--[[
    CryzenHub UI Library v2.0.0 - Orion v2 Inspired (Fixed)
    A premium UI library inspired by Orion UI Library v2 with enhanced features
    Created by CryzenHub
    
    NEW IN v2.0.0:
    - Complete Orion v2 inspired redesign
    - Fixed all UIPadding and layout errors
    - Enhanced draggable UI system
    - Improved mobile compatibility
    - Better performance optimization
    - New modern notification system
    - Enhanced theme support with gradients
    - Smooth animations and transitions
    - Advanced error handling
]]

local OrionLib = {}
OrionLib.Version = "2.0.0"
OrionLib.Build = "Orion-v2-Inspired"
OrionLib.Windows = {}
OrionLib.Connections = {}
OrionLib.Flags = {}
OrionLib.Themes = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")
local HttpService = game:GetService("HttpService")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Orion v2 Inspired Themes
OrionLib.Themes = {
    Default = {
        Main = Color3.fromRGB(25, 25, 25),
        Second = Color3.fromRGB(40, 40, 40),
        Stroke = Color3.fromRGB(60, 60, 60),
        Divider = Color3.fromRGB(60, 60, 60),
        Text = Color3.fromRGB(240, 240, 240),
        TextDark = Color3.fromRGB(150, 150, 150),
        SchemeColor = Color3.fromRGB(86, 120, 233),
        Background = Color3.fromRGB(30, 30, 30),
        Header = Color3.fromRGB(35, 35, 35),
        Success = Color3.fromRGB(68, 206, 84),
        Warning = Color3.fromRGB(255, 184, 0),
        Error = Color3.fromRGB(255, 92, 92),
        Info = Color3.fromRGB(86, 120, 233)
    },
    
    Ocean = {
        Main = Color3.fromRGB(15, 25, 35),
        Second = Color3.fromRGB(25, 35, 50),
        Stroke = Color3.fromRGB(45, 55, 70),
        Divider = Color3.fromRGB(45, 55, 70),
        Text = Color3.fromRGB(240, 245, 250),
        TextDark = Color3.fromRGB(160, 170, 180),
        SchemeColor = Color3.fromRGB(52, 152, 219),
        Background = Color3.fromRGB(20, 30, 40),
        Header = Color3.fromRGB(30, 40, 55),
        Success = Color3.fromRGB(46, 204, 113),
        Warning = Color3.fromRGB(241, 196, 15),
        Error = Color3.fromRGB(231, 76, 60),
        Info = Color3.fromRGB(52, 152, 219)
    },
    
    Purple = {
        Main = Color3.fromRGB(30, 20, 40),
        Second = Color3.fromRGB(45, 35, 55),
        Stroke = Color3.fromRGB(65, 55, 75),
        Divider = Color3.fromRGB(65, 55, 75),
        Text = Color3.fromRGB(245, 240, 250),
        TextDark = Color3.fromRGB(170, 160, 180),
        SchemeColor = Color3.fromRGB(142, 68, 173),
        Background = Color3.fromRGB(35, 25, 45),
        Header = Color3.fromRGB(50, 40, 60),
        Success = Color3.fromRGB(68, 206, 84),
        Warning = Color3.fromRGB(255, 184, 0),
        Error = Color3.fromRGB(255, 92, 92),
        Info = Color3.fromRGB(142, 68, 173)
    }
}

OrionLib.CurrentTheme = OrionLib.Themes.Default

-- Utility Functions
local function SafeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        warn("[OrionLib] Error:", result)
        return nil
    end
    return result
end

local function CreateTween(object, properties, duration, style, direction)
    if not object then return end
    
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        style or Enum.EasingStyle.Quart,
        direction or Enum.EasingDirection.Out
    )
    
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

local function CreateCorner(parent, radius)
    if not parent then return end
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = parent
    return corner
end

local function CreateStroke(parent, color, thickness, transparency)
    if not parent then return end
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or OrionLib.CurrentTheme.Stroke
    stroke.Thickness = thickness or 1
    stroke.Transparency = transparency or 0
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = parent
    return stroke
end

local function CreateGradient(parent, colors, rotation)
    if not parent then return end
    
    local gradient = Instance.new("UIGradient")
    gradient.Color = colors or ColorSequence.new{
        ColorSequenceKeypoint.new(0, OrionLib.CurrentTheme.Second),
        ColorSequenceKeypoint.new(1, OrionLib.CurrentTheme.Main)
    }
    gradient.Rotation = rotation or 90
    gradient.Parent = parent
    return gradient
end

local function CreateShadow(parent)
    if not parent then return end
    
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0.5, 0, 0.5, 1)
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.Image = "rbxassetid://6014261993"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.7
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    shadow.ZIndex = parent.ZIndex - 1
    shadow.Parent = parent.Parent
    return shadow
end

local function CreateRipple(parent, position, color)
    if not parent then return end
    
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.BackgroundColor3 = color or OrionLib.CurrentTheme.SchemeColor
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.Position = UDim2.new(0, position.X - parent.AbsolutePosition.X, 0, position.Y - parent.AbsolutePosition.Y)
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.ZIndex = parent.ZIndex + 1
    ripple.Parent = parent
    
    CreateCorner(ripple, 999)
    
    local maxSize = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
    
    CreateTween(ripple, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        BackgroundTransparency = 1
    }, 0.6, nil, nil)
    
    game:GetService("Debris"):AddItem(ripple, 0.6)
end

local function MakeDraggable(frame, dragHandle)
    dragHandle = dragHandle or frame
    
    local dragging = false
    local dragInput, mousePos, framePos
    
    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            CreateTween(frame, {
                Position = UDim2.new(
                    framePos.X.Scale,
                    framePos.X.Offset + delta.X,
                    framePos.Y.Scale,
                    framePos.Y.Offset + delta.Y
                )
            }, 0.1)
        end
    end)
end

local function CreateScreenGui(name)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = name or "OrionLibGUI"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.DisplayOrder = 100
    screenGui.ResetOnSpawn = false
    
    -- Try CoreGui first, fallback to PlayerGui
    local success = pcall(function()
        screenGui.Parent = CoreGui
    end)
    
    if not success then
        screenGui.Parent = Player:WaitForChild("PlayerGui")
    end
    
    return screenGui
end

-- Notification System
function OrionLib:MakeNotification(config)
    config = config or {}
    
    local Name = config.Name or "Notification"
    local Content = config.Content or ""
    local Image = config.Image
    local Time = config.Time or 5
    
    -- Create notification GUI
    local NotificationGui = CreateScreenGui("OrionNotification")
    
    -- Main notification frame
    local NotificationFrame = Instance.new("Frame")
    NotificationFrame.Name = "NotificationFrame"
    NotificationFrame.Size = UDim2.new(0, 300, 0, 80)
    NotificationFrame.Position = UDim2.new(1, -320, 1, -100)
    NotificationFrame.BackgroundColor3 = OrionLib.CurrentTheme.Main
    NotificationFrame.BorderSizePixel = 0
    NotificationFrame.Parent = NotificationGui
    
    CreateCorner(NotificationFrame, 10)
    CreateStroke(NotificationFrame, OrionLib.CurrentTheme.Stroke, 1, 0.5)
    CreateShadow(NotificationFrame)
    CreateGradient(NotificationFrame)
    
    -- Icon (if provided)
    if Image then
        local Icon = Instance.new("ImageLabel")
        Icon.Name = "Icon"
        Icon.Size = UDim2.new(0, 50, 0, 50)
        Icon.Position = UDim2.new(0, 15, 0.5, -25)
        Icon.BackgroundTransparency = 1
        Icon.Image = Image
        Icon.Parent = NotificationFrame
        
        CreateCorner(Icon, 8)
    end
    
    -- Title
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, Image and -80 or -30, 0, 25)
    Title.Position = UDim2.new(0, Image and 75 or 15, 0, 10)
    Title.BackgroundTransparency = 1
    Title.Text = Name
    Title.Font = Enum.Font.GothamSemibold
    Title.TextSize = 14
    Title.TextColor3 = OrionLib.CurrentTheme.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.TextYAlignment = Enum.TextYAlignment.Top
    Title.Parent = NotificationFrame
    
    -- Content
    local ContentLabel = Instance.new("TextLabel")
    ContentLabel.Name = "Content"
    ContentLabel.Size = UDim2.new(1, Image and -80 or -30, 0, 20)
    ContentLabel.Position = UDim2.new(0, Image and 75 or 15, 0, 35)
    ContentLabel.BackgroundTransparency = 1
    ContentLabel.Text = Content
    ContentLabel.Font = Enum.Font.Gotham
    ContentLabel.TextSize = 12
    ContentLabel.TextColor3 = OrionLib.CurrentTheme.TextDark
    ContentLabel.TextXAlignment = Enum.TextXAlignment.Left
    ContentLabel.TextYAlignment = Enum.TextYAlignment.Top
    ContentLabel.TextWrapped = true
    ContentLabel.Parent = NotificationFrame
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Position = UDim2.new(1, -25, 0, 5)
    CloseButton.BackgroundTransparency = 1
    CloseButton.Text = "Ã"
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.TextSize = 16
    CloseButton.TextColor3 = OrionLib.CurrentTheme.TextDark
    CloseButton.Parent = NotificationFrame
    
    -- Progress bar
    local ProgressBar = Instance.new("Frame")
    ProgressBar.Name = "ProgressBar"
    ProgressBar.Size = UDim2.new(1, 0, 0, 2)
    ProgressBar.Position = UDim2.new(0, 0, 1, -2)
    ProgressBar.BackgroundColor3 = OrionLib.CurrentTheme.SchemeColor
    ProgressBar.BorderSizePixel = 0
    ProgressBar.Parent = NotificationFrame
    
    -- Animations
    NotificationFrame.Position = UDim2.new(1, 0, 1, -100)
    CreateTween(NotificationFrame, {Position = UDim2.new(1, -320, 1, -100)}, 0.4)
    
    -- Progress animation
    if Time > 0 then
        CreateTween(ProgressBar, {Size = UDim2.new(0, 0, 0, 2)}, Time)
    end
    
    -- Close function
    local function CloseNotification()
        CreateTween(NotificationFrame, {
            Position = UDim2.new(1, 0, 1, -100),
            BackgroundTransparency = 1
        }, 0.3, nil, nil)
        
        game:GetService("Debris"):AddItem(NotificationGui, 0.3)
    end
    
    CloseButton.MouseButton1Click:Connect(CloseNotification)
    
    -- Auto close
    if Time > 0 then
        game:GetService("Debris"):AddItem(NotificationGui, Time)
        task.delay(Time - 0.3, function()
            if NotificationGui and NotificationGui.Parent then
                CloseNotification()
            end
        end)
    end
    
    return {
        Close = CloseNotification,
        Frame = NotificationFrame
    }
end

-- Main Window Creation
function OrionLib:MakeWindow(config)
    config = config or {}
    
    local Name = config.Name or "OrionLib"
    local HidePremium = config.HidePremium or false
    local SaveConfig = config.SaveConfig ~= false
    local ConfigFolder = config.ConfigFolder or "OrionConfig"
    local IntroEnabled = config.IntroEnabled ~= false
    local IntroText = config.IntroText or "Welcome to OrionLib!"
    local IntroIcon = config.IntroIcon
    local Icon = config.Icon
    
    -- Create main GUI
    local OrionLibGui = CreateScreenGui("OrionLib")
    
    local Window = {}
    Window.Name = Name
    Window.Tabs = {}
    Window.Flags = {}
    Window.SaveConfig = SaveConfig
    Window.ConfigFolder = ConfigFolder
    
    -- Main frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 580, 0, 460)
    MainFrame.Position = UDim2.new(0.5, -290, 0.5, -230)
    MainFrame.BackgroundColor3 = OrionLib.CurrentTheme.Main
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = OrionLibGui
    Window.MainFrame = MainFrame
    
    CreateCorner(MainFrame, 12)
    CreateStroke(MainFrame, OrionLib.CurrentTheme.Stroke, 1, 0.3)
    CreateShadow(MainFrame)
    CreateGradient(MainFrame)
    
    -- Top bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 50)
    TopBar.BackgroundColor3 = OrionLib.CurrentTheme.Header
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame
    
    CreateCorner(TopBar, 12)
    CreateGradient(TopBar, ColorSequence.new{
        ColorSequenceKeypoint.new(0, OrionLib.CurrentTheme.Header),
        ColorSequenceKeypoint.new(1, OrionLib.CurrentTheme.Second)
    })
    
    -- Window title
    local WindowTitle = Instance.new("TextLabel")
    WindowTitle.Name = "WindowTitle"
    WindowTitle.Size = UDim2.new(1, Icon and -90 or -50, 1, 0)
    WindowTitle.Position = UDim2.new(0, Icon and 60 or 20, 0, 0)
    WindowTitle.BackgroundTransparency = 1
    WindowTitle.Text = Name
    WindowTitle.Font = Enum.Font.GothamBold
    WindowTitle.TextSize = 16
    WindowTitle.TextColor3 = OrionLib.CurrentTheme.Text
    WindowTitle.TextXAlignment = Enum.TextXAlignment.Left
    WindowTitle.Parent = TopBar
    
    -- Window icon
    if Icon then
        local WindowIcon = Instance.new("ImageLabel")
        WindowIcon.Name = "WindowIcon"
        WindowIcon.Size = UDim2.new(0, 30, 0, 30)
        WindowIcon.Position = UDim2.new(0, 15, 0.5, -15)
        WindowIcon.BackgroundTransparency = 1
        WindowIcon.Image = Icon
        WindowIcon.Parent = TopBar
        
        CreateCorner(WindowIcon, 6)
    end
    
    -- Premium badge
    if not HidePremium then
        local PremiumBadge = Instance.new("Frame")
        PremiumBadge.Name = "PremiumBadge"
        PremiumBadge.Size = UDim2.new(0, 60, 0, 20)
        PremiumBadge.Position = UDim2.new(1, -90, 0.5, -10)
        PremiumBadge.BackgroundColor3 = OrionLib.CurrentTheme.SchemeColor
        PremiumBadge.BorderSizePixel = 0
        PremiumBadge.Parent = TopBar
        
        CreateCorner(PremiumBadge, 10)
        
        local PremiumText = Instance.new("TextLabel")
        PremiumText.Size = UDim2.new(1, 0, 1, 0)
        PremiumText.BackgroundTransparency = 1
        PremiumText.Text = "PREMIUM"
        PremiumText.Font = Enum.Font.GothamBold
        PremiumText.TextSize = 9
        PremiumText.TextColor3 = Color3.fromRGB(255, 255, 255)
        PremiumText.Parent = PremiumBadge
    end
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -40, 0.5, -15)
    CloseButton.BackgroundColor3 = OrionLib.CurrentTheme.Second
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = ""
    CloseButton.Parent = TopBar
    
    CreateCorner(CloseButton, 8)
    CreateStroke(CloseButton, OrionLib.CurrentTheme.Stroke, 1, 0.5)
    
    local CloseIcon = Instance.new("TextLabel")
    CloseIcon.Size = UDim2.new(1, 0, 1, 0)
    CloseIcon.BackgroundTransparency = 1
    CloseIcon.Text = "Ã"
    CloseIcon.Font = Enum.Font.GothamBold
    CloseIcon.TextSize = 16
    CloseIcon.TextColor3 = OrionLib.CurrentTheme.Text
    CloseIcon.Parent = CloseButton
    
    -- Tab container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(0, 160, 1, -50)
    TabContainer.Position = UDim2.new(0, 0, 0, 50)
    TabContainer.BackgroundColor3 = OrionLib.CurrentTheme.Second
    TabContainer.BorderSizePixel = 0
    TabContainer.Parent = MainFrame
    Window.TabContainer = TabContainer
    
    CreateGradient(TabContainer, ColorSequence.new{
        ColorSequenceKeypoint.new(0, OrionLib.CurrentTheme.Second),
        ColorSequenceKeypoint.new(1, OrionLib.CurrentTheme.Main)
    }, 45)
    
    -- Tab divider
    local TabDivider = Instance.new("Frame")
    TabDivider.Size = UDim2.new(0, 1, 1, 0)
    TabDivider.Position = UDim2.new(1, 0, 0, 0)
    TabDivider.BackgroundColor3 = OrionLib.CurrentTheme.Divider
    TabDivider.BorderSizePixel = 0
    TabDivider.Parent = TabContainer
    
    -- Tab list with proper scrolling
    local TabList = Instance.new("ScrollingFrame")
    TabList.Name = "TabList"
    TabList.Size = UDim2.new(1, -10, 1, -20)
    TabList.Position = UDim2.new(0, 5, 0, 10)
    TabList.BackgroundTransparency = 1
    TabList.BorderSizePixel = 0
    TabList.ScrollBarThickness = 4
    TabList.ScrollBarImageColor3 = OrionLib.CurrentTheme.SchemeColor
    TabList.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabList.AutomaticCanvasSize = Enum.AutomaticSize.Y
    TabList.Parent = TabContainer
    
    -- Fixed UIListLayout for tabs
    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Padding = UDim.new(0, 5)
    TabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    TabListLayout.Parent = TabList
    
    -- Fixed UIPadding for tab list
    local TabListPadding = Instance.new("UIPadding")
    TabListPadding.PaddingTop = UDim.new(0, 10)
    TabListPadding.PaddingBottom = UDim.new(0, 10)
    TabListPadding.PaddingLeft = UDim.new(0, 5)
    TabListPadding.PaddingRight = UDim.new(0, 5)
    TabListPadding.Parent = TabList
    
    -- Content container
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Size = UDim2.new(1, -160, 1, -50)
    ContentContainer.Position = UDim2.new(0, 160, 0, 50)
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.BorderSizePixel = 0
    ContentContainer.Parent = MainFrame
    Window.ContentContainer = ContentContainer
    
    -- Make window draggable
    MakeDraggable(MainFrame, TopBar)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        CreateRipple(CloseButton, UserInputService:GetMouseLocation())
        
        CreateTween(MainFrame, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, 0.3, nil, nil)
        
        task.delay(0.3, function()
            OrionLibGui:Destroy()
        end)
    end)
    
    -- Close button hover effect
    CloseButton.MouseEnter:Connect(function()
        CreateTween(CloseButton, {BackgroundColor3 = OrionLib.CurrentTheme.Error}, 0.2)
    end)
    
    CloseButton.MouseLeave:Connect(function()
        CreateTween(CloseButton, {BackgroundColor3 = OrionLib.CurrentTheme.Second}, 0.2)
    end)
    
    -- Tab creation function
    function Window:MakeTab(config)
        config = config or {}
        
        local Name = config.Name or "Tab"
        local Icon = config.Icon
        local PremiumOnly = config.PremiumOnly or false
        
        local Tab = {}
        Tab.Name = Name
        Tab.Icon = Icon
        Tab.PremiumOnly = PremiumOnly
        
        -- Tab button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = Name .. "Button"
        TabButton.Size = UDim2.new(1, -10, 0, 40)
        TabButton.BackgroundColor3 = OrionLib.CurrentTheme.Second
        TabButton.BackgroundTransparency = 1
        TabButton.BorderSizePixel = 0
        TabButton.Text = ""
        TabButton.Parent = TabList
        Tab.Button = TabButton
        
        CreateCorner(TabButton, 8)
        
        -- Tab button gradient (for active state)
        local TabGradient = CreateGradient(TabButton, ColorSequence.new{
            ColorSequenceKeypoint.new(0, OrionLib.CurrentTheme.SchemeColor),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(
                math.max(0, OrionLib.CurrentTheme.SchemeColor.R * 255 - 30),
                math.max(0, OrionLib.CurrentTheme.SchemeColor.G * 255 - 30),
                math.max(0, OrionLib.CurrentTheme.SchemeColor.B * 255 - 30)
            ))
        })
        TabGradient.Enabled = false
        
        -- Tab icon
        if Icon then
            local TabIcon = Instance.new("ImageLabel")
            TabIcon.Name = "TabIcon"
            TabIcon.Size = UDim2.new(0, 20, 0, 20)
            TabIcon.Position = UDim2.new(0, 10, 0.5, -10)
            TabIcon.BackgroundTransparency = 1
            TabIcon.Image = Icon
            TabIcon.ImageColor3 = OrionLib.CurrentTheme.TextDark
            TabIcon.Parent = TabButton
            Tab.Icon = TabIcon
        end
        
        -- Tab label
        local TabLabel = Instance.new("TextLabel")
        TabLabel.Name = "TabLabel"
        TabLabel.Size = UDim2.new(1, Icon and -40 or -20, 1, 0)
        TabLabel.Position = UDim2.new(0, Icon and 35 or 10, 0, 0)
        TabLabel.BackgroundTransparency = 1
        TabLabel.Text = Name
        TabLabel.Font = Enum.Font.GothamSemibold
        TabLabel.TextSize = 13
        TabLabel.TextColor3 = OrionLib.CurrentTheme.TextDark
        TabLabel.TextXAlignment = Enum.TextXAlignment.Left
        TabLabel.Parent = TabButton
        Tab.Label = TabLabel
        
        -- Premium indicator
        if PremiumOnly then
            local PremiumIndicator = Instance.new("Frame")
            PremiumIndicator.Size = UDim2.new(0, 6, 0, 6)
            PremiumIndicator.Position = UDim2.new(1, -12, 0.5, -3)
            PremiumIndicator.BackgroundColor3 = OrionLib.CurrentTheme.SchemeColor
            PremiumIndicator.BorderSizePixel = 0
            PremiumIndicator.Parent = TabButton
            
            CreateCorner(PremiumIndicator, 3)
        end
        
        -- Tab content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = Name .. "Content"
        TabContent.Size = UDim2.new(1, -20, 1, -20)
        TabContent.Position = UDim2.new(0, 10, 0, 10)
        TabContent.BackgroundTransparency = 1
        TabContent.BorderSizePixel = 0
        TabContent.ScrollBarThickness = 6
        TabContent.ScrollBarImageColor3 = OrionLib.CurrentTheme.SchemeColor
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        TabContent.Visible = false
        TabContent.Parent = ContentContainer
        Tab.Content = TabContent
        
        -- Fixed UIListLayout for content
        local ContentLayout = Instance.new("UIListLayout")
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, 15)
        ContentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        ContentLayout.Parent = TabContent
        
        -- Fixed UIPadding for content
        local ContentPadding = Instance.new("UIPadding")
        ContentPadding.PaddingTop = UDim.new(0, 15)
        ContentPadding.PaddingBottom = UDim.new(0, 15)
        ContentPadding.PaddingLeft = UDim.new(0, 10)
        ContentPadding.PaddingRight = UDim.new(0, 10)
        ContentPadding.Parent = TabContent
        
        -- Tab selection function
        local function SelectTab()
            -- Deselect all tabs
            for _, OtherTab in pairs(Window.Tabs) do
                OtherTab.Button.BackgroundTransparency = 1
                OtherTab.Button:FindFirstChild("UIGradient").Enabled = false
                OtherTab.Label.TextColor3 = OrionLib.CurrentTheme.TextDark
                if OtherTab.Icon then
                    OtherTab.Icon.ImageColor3 = OrionLib.CurrentTheme.TextDark
                end
                OtherTab.Content.Visible = false
            end
            
            -- Select this tab
            TabButton.BackgroundTransparency = 0
            TabGradient.Enabled = true
            TabLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            if Tab.Icon then
                Tab.Icon.ImageColor3 = Color3.fromRGB(255, 255, 255)
            end
            TabContent.Visible = true
        end
        
        -- Tab button events
        TabButton.MouseButton1Click:Connect(function()
            CreateRipple(TabButton, UserInputService:GetMouseLocation())
            SelectTab()
        end)
        
        TabButton.MouseEnter:Connect(function()
            if not TabContent.Visible then
                CreateTween(TabButton, {BackgroundTransparency = 0.8}, 0.2)
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if not TabContent.Visible then
                CreateTween(TabButton, {BackgroundTransparency = 1}, 0.2)
            end
        end)
        
        -- Section creation function
        function Tab:AddSection(config)
            config = config or {}
            local Name = config.Name or "Section"
            
            local Section = {}
            Section.Name = Name
            
            -- Section frame
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Name = Name .. "Section"
            SectionFrame.Size = UDim2.new(1, 0, 0, 0)
            SectionFrame.BackgroundTransparency = 1
            SectionFrame.AutomaticSize = Enum.AutomaticSize.Y
            SectionFrame.Parent = TabContent
            Section.Frame = SectionFrame
            
            -- Fixed UIListLayout for section
            local SectionLayout = Instance.new("UIListLayout")
            SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLayout.Padding = UDim.new(0, 8)
            SectionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionLayout.Parent = SectionFrame
            
            -- Section header
            if Name ~= "" then
                local SectionHeader = Instance.new("TextLabel")
                SectionHeader.Name = "SectionHeader"
                SectionHeader.Size = UDim2.new(1, 0, 0, 30)
                SectionHeader.BackgroundTransparency = 1
                SectionHeader.Text = Name
                SectionHeader.Font = Enum.Font.GothamBold
                SectionHeader.TextSize = 15
                SectionHeader.TextColor3 = OrionLib.CurrentTheme.Text
                SectionHeader.TextXAlignment = Enum.TextXAlignment.Left
                SectionHeader.Parent = SectionFrame
            end
            
            -- Element creation functions
            function Section:AddLabel(text)
                local Label = {}
                Label.Type = "Label"
                Label.Text = text or "Label"
                
                local LabelFrame = Instance.new("Frame")
                LabelFrame.Name = "LabelFrame"
                LabelFrame.Size = UDim2.new(1, 0, 0, 30)
                LabelFrame.BackgroundTransparency = 1
                LabelFrame.Parent = SectionFrame
                Label.Frame = LabelFrame
                
                local LabelText = Instance.new("TextLabel")
                LabelText.Name = "LabelText"
                LabelText.Size = UDim2.new(1, -10, 1, 0)
                LabelText.Position = UDim2.new(0, 5, 0, 0)
                LabelText.BackgroundTransparency = 1
                LabelText.Text = Label.Text
                LabelText.Font = Enum.Font.Gotham
                LabelText.TextSize = 14
                LabelText.TextColor3 = OrionLib.CurrentTheme.Text
                LabelText.TextXAlignment = Enum.TextXAlignment.Left
                LabelText.TextWrapped = true
                LabelText.RichText = true
                LabelText.Parent = LabelFrame
                Label.TextLabel = LabelText
                
                function Label:Set(newText)
                    self.Text = newText
                    LabelText.Text = newText
                end
                
                return Label
            end
            
            function Section:AddButton(config)
                config = config or {}
                local Name = config.Name or "Button"
                local Callback = config.Callback or function() end
                
                local Button = {}
                Button.Type = "Button"
                Button.Name = Name
                Button.Callback = Callback
                
                local ButtonFrame = Instance.new("Frame")
                ButtonFrame.Name = "ButtonFrame"
                ButtonFrame.Size = UDim2.new(1, 0, 0, 40)
                ButtonFrame.BackgroundTransparency = 1
                ButtonFrame.Parent = SectionFrame
                Button.Frame = ButtonFrame
                
                local ButtonElement = Instance.new("TextButton")
                ButtonElement.Name = "ButtonElement"
                ButtonElement.Size = UDim2.new(1, 0, 1, 0)
                ButtonElement.BackgroundColor3 = OrionLib.CurrentTheme.Second
                ButtonElement.BorderSizePixel = 0
                ButtonElement.Text = Name
                ButtonElement.Font = Enum.Font.GothamSemibold
                ButtonElement.TextSize = 14
                ButtonElement.TextColor3 = OrionLib.CurrentTheme.Text
                ButtonElement.Parent = ButtonFrame
                Button.Element = ButtonElement
                
                CreateCorner(ButtonElement, 8)
                CreateStroke(ButtonElement, OrionLib.CurrentTheme.Stroke, 1, 0.5)
                CreateGradient(ButtonElement)
                
                ButtonElement.MouseButton1Click:Connect(function()
                    CreateRipple(ButtonElement, UserInputService:GetMouseLocation())
                    SafeCall(Callback)
                end)
                
                ButtonElement.MouseEnter:Connect(function()
                    CreateTween(ButtonElement, {BackgroundColor3 = OrionLib.CurrentTheme.Stroke}, 0.2)
                end)
                
                ButtonElement.MouseLeave:Connect(function()
                    CreateTween(ButtonElement, {BackgroundColor3 = OrionLib.CurrentTheme.Second}, 0.2)
                end)
                
                return Button
            end
            
            function Section:AddToggle(config)
                config = config or {}
                local Name = config.Name or "Toggle"
                local Default = config.Default or false
                local Callback = config.Callback or function() end
                local Flag = config.Flag or Name
                
                local Toggle = {}
                Toggle.Type = "Toggle"
                Toggle.Name = Name
                Toggle.Value = Default
                Toggle.Callback = Callback
                Toggle.Flag = Flag
                
                Window.Flags[Flag] = Default
                
                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.Name = "ToggleFrame"
                ToggleFrame.Size = UDim2.new(1, 0, 0, 40)
                ToggleFrame.BackgroundTransparency = 1
                ToggleFrame.Parent = SectionFrame
                Toggle.Frame = ToggleFrame
                
                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Name = "ToggleButton"
                ToggleButton.Size = UDim2.new(1, 0, 1, 0)
                ToggleButton.BackgroundColor3 = OrionLib.CurrentTheme.Second
                ToggleButton.BorderSizePixel = 0
                ToggleButton.Text = ""
                ToggleButton.Parent = ToggleFrame
                Toggle.Button = ToggleButton
                
                CreateCorner(ToggleButton, 8)
                CreateStroke(ToggleButton, OrionLib.CurrentTheme.Stroke, 1, 0.5)
                CreateGradient(ToggleButton)
                
                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Name = "ToggleLabel"
                ToggleLabel.Size = UDim2.new(1, -50, 1, 0)
                ToggleLabel.Position = UDim2.new(0, 15, 0, 0)
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.Text = Name
                ToggleLabel.Font = Enum.Font.Gotham
                ToggleLabel.TextSize = 14
                ToggleLabel.TextColor3 = OrionLib.CurrentTheme.Text
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                ToggleLabel.Parent = ToggleButton
                
                local ToggleIndicator = Instance.new("Frame")
                ToggleIndicator.Name = "ToggleIndicator"
                ToggleIndicator.Size = UDim2.new(0, 24, 0, 24)
                ToggleIndicator.Position = UDim2.new(1, -32, 0.5, -12)
                ToggleIndicator.BackgroundColor3 = Default and OrionLib.CurrentTheme.SchemeColor or OrionLib.CurrentTheme.Stroke
                ToggleIndicator.BorderSizePixel = 0
                ToggleIndicator.Parent = ToggleButton
                
                CreateCorner(ToggleIndicator, 12)
                
                local Checkmark = Instance.new("TextLabel")
                Checkmark.Size = UDim2.new(1, 0, 1, 0)
                Checkmark.BackgroundTransparency = 1
                Checkmark.Text = Default and "â" or ""
                Checkmark.Font = Enum.Font.GothamBold
                Checkmark.TextSize = 16
                Checkmark.TextColor3 = Color3.fromRGB(255, 255, 255)
                Checkmark.Parent = ToggleIndicator
                
                local function UpdateToggle(value)
                    Toggle.Value = value
                    Window.Flags[Flag] = value
                    
                    CreateTween(ToggleIndicator, {
                        BackgroundColor3 = value and OrionLib.CurrentTheme.SchemeColor or OrionLib.CurrentTheme.Stroke
                    }, 0.2)
                    
                    Checkmark.Text = value and "â" or ""
                    
                    SafeCall(Callback, value)
                end
                
                ToggleButton.MouseButton1Click:Connect(function()
                    CreateRipple(ToggleButton, UserInputService:GetMouseLocation())
                    UpdateToggle(not Toggle.Value)
                end)
                
                ToggleButton.MouseEnter:Connect(function()
                    CreateTween(ToggleButton, {BackgroundColor3 = OrionLib.CurrentTheme.Stroke}, 0.2)
                end)
                
                ToggleButton.MouseLeave:Connect(function()
                    CreateTween(ToggleButton, {BackgroundColor3 = OrionLib.CurrentTheme.Second}, 0.2)
                end)
                
                function Toggle:Set(value)
                    UpdateToggle(value)
                end
                
                return Toggle
            end
            
            function Section:AddSlider(config)
                config = config or {}
                local Name = config.Name or "Slider"
                local Min = config.Min or 0
                local Max = config.Max or 100
                local Increment = config.Increment or 1
                local Default = config.Default or Min
                local ValueName = config.ValueName or ""
                local Callback = config.Callback or function() end
                local Flag = config.Flag or Name
                
                local Slider = {}
                Slider.Type = "Slider"
                Slider.Name = Name
                Slider.Min = Min
                Slider.Max = Max
                Slider.Increment = Increment
                Slider.Value = Default
                Slider.ValueName = ValueName
                Slider.Callback = Callback
                Slider.Flag = Flag
                
                Window.Flags[Flag] = Default
                
                local SliderFrame = Instance.new("Frame")
                SliderFrame.Name = "SliderFrame"
                SliderFrame.Size = UDim2.new(1, 0, 0, 60)
                SliderFrame.BackgroundTransparency = 1
                SliderFrame.Parent = SectionFrame
                Slider.Frame = SliderFrame
                
                local SliderContainer = Instance.new("Frame")
                SliderContainer.Name = "SliderContainer"
                SliderContainer.Size = UDim2.new(1, 0, 1, 0)
                SliderContainer.BackgroundColor3 = OrionLib.CurrentTheme.Second
                SliderContainer.BorderSizePixel = 0
                SliderContainer.Parent = SliderFrame
                
                CreateCorner(SliderContainer, 8)
                CreateStroke(SliderContainer, OrionLib.CurrentTheme.Stroke, 1, 0.5)
                CreateGradient(SliderContainer)
                
                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Name = "SliderLabel"
                SliderLabel.Size = UDim2.new(1, -80, 0, 25)
                SliderLabel.Position = UDim2.new(0, 15, 0, 8)
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.Text = Name
                SliderLabel.Font = Enum.Font.Gotham
                SliderLabel.TextSize = 14
                SliderLabel.TextColor3 = OrionLib.CurrentTheme.Text
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                SliderLabel.Parent = SliderContainer
                
                local SliderValue = Instance.new("TextLabel")
                SliderValue.Name = "SliderValue"
                SliderValue.Size = UDim2.new(0, 60, 0, 25)
                SliderValue.Position = UDim2.new(1, -75, 0, 8)
                SliderValue.BackgroundTransparency = 1
                SliderValue.Text = tostring(Default) .. ValueName
                SliderValue.Font = Enum.Font.GothamSemibold
                SliderValue.TextSize = 14
                SliderValue.TextColor3 = OrionLib.CurrentTheme.SchemeColor
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                SliderValue.Parent = SliderContainer
                
                local SliderTrack = Instance.new("Frame")
                SliderTrack.Name = "SliderTrack"
                SliderTrack.Size = UDim2.new(1, -30, 0, 6)
                SliderTrack.Position = UDim2.new(0, 15, 1, -18)
                SliderTrack.BackgroundColor3 = OrionLib.CurrentTheme.Stroke
                SliderTrack.BorderSizePixel = 0
                SliderTrack.Parent = SliderContainer
                
                CreateCorner(SliderTrack, 3)
                
                local SliderFill = Instance.new("Frame")
                SliderFill.Name = "SliderFill"
                SliderFill.Size = UDim2.new((Default - Min) / (Max - Min), 0, 1, 0)
                SliderFill.BackgroundColor3 = OrionLib.CurrentTheme.SchemeColor
                SliderFill.BorderSizePixel = 0
                SliderFill.Parent = SliderTrack
                
                CreateCorner(SliderFill, 3)
                CreateGradient(SliderFill, ColorSequence.new{
                    ColorSequenceKeypoint.new(0, OrionLib.CurrentTheme.SchemeColor),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(
                        math.min(255, OrionLib.CurrentTheme.SchemeColor.R * 255 + 30),
                        math.min(255, OrionLib.CurrentTheme.SchemeColor.G * 255 + 30),
                        math.min(255, OrionLib.CurrentTheme.SchemeColor.B * 255 + 30)
                    ))
                })
                
                local SliderKnob = Instance.new("Frame")
                SliderKnob.Name = "SliderKnob"
                SliderKnob.Size = UDim2.new(0, 16, 0, 16)
                SliderKnob.Position = UDim2.new((Default - Min) / (Max - Min), -8, 0.5, -8)
                SliderKnob.BackgroundColor3 = OrionLib.CurrentTheme.SchemeColor
                SliderKnob.BorderSizePixel = 0
                SliderKnob.Parent = SliderTrack
                
                CreateCorner(SliderKnob, 8)
                CreateStroke(SliderKnob, Color3.fromRGB(255, 255, 255), 2, 0.3)
                
                local isDragging = false
                
                local function UpdateSlider(value)
                    value = math.clamp(value, Min, Max)
                    value = math.floor(value / Increment) * Increment
                    
                    Slider.Value = value
                    Window.Flags[Flag] = value
                    
                    local percent = (value - Min) / (Max - Min)
                    
                    CreateTween(SliderFill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
                    CreateTween(SliderKnob, {Position = UDim2.new(percent, -8, 0.5, -8)}, 0.1)
                    
                    SliderValue.Text = tostring(value) .. ValueName
                    
                    SafeCall(Callback, value)
                end
                
                local function GetSliderValue(input)
                    local percent = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                    return Min + (Max - Min) * percent
                end
                
                SliderTrack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = true
                        CreateTween(SliderKnob, {Size = UDim2.new(0, 20, 0, 20)}, 0.1)
                        UpdateSlider(GetSliderValue(input))
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = false
                        CreateTween(SliderKnob, {Size = UDim2.new(0, 16, 0, 16)}, 0.1)
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        UpdateSlider(GetSliderValue(input))
                    end
                end)
                
                function Slider:Set(value)
                    UpdateSlider(value)
                end
                
                return Slider
            end
            
            function Section:AddDropdown(config)
                config = config or {}
                local Name = config.Name or "Dropdown"
                local Options = config.Options or {}
                local Default = config.Default
                local Callback = config.Callback or function() end
                local Flag = config.Flag or Name
                
                local Dropdown = {}
                Dropdown.Type = "Dropdown"
                Dropdown.Name = Name
                Dropdown.Options = Options
                Dropdown.Value = Default
                Dropdown.Callback = Callback
                Dropdown.Flag = Flag
                
                Window.Flags[Flag] = Default
                
                local DropdownFrame = Instance.new("Frame")
                DropdownFrame.Name = "DropdownFrame"
                DropdownFrame.Size = UDim2.new(1, 0, 0, 40)
                DropdownFrame.BackgroundTransparency = 1
                DropdownFrame.Parent = SectionFrame
                Dropdown.Frame = DropdownFrame
                
                local DropdownButton = Instance.new("TextButton")
                DropdownButton.Name = "DropdownButton"
                DropdownButton.Size = UDim2.new(1, 0, 1, 0)
                DropdownButton.BackgroundColor3 = OrionLib.CurrentTheme.Second
                DropdownButton.BorderSizePixel = 0
                DropdownButton.Text = ""
                DropdownButton.Parent = DropdownFrame
                Dropdown.Button = DropdownButton
                
                CreateCorner(DropdownButton, 8)
                CreateStroke(DropdownButton, OrionLib.CurrentTheme.Stroke, 1, 0.5)
                CreateGradient(DropdownButton)
                
                local DropdownLabel = Instance.new("TextLabel")
                DropdownLabel.Name = "DropdownLabel"
                DropdownLabel.Size = UDim2.new(1, -40, 1, 0)
                DropdownLabel.Position = UDim2.new(0, 15, 0, 0)
                DropdownLabel.BackgroundTransparency = 1
                DropdownLabel.Text = Name .. ": " .. (Default or "None")
                DropdownLabel.Font = Enum.Font.Gotham
                DropdownLabel.TextSize = 14
                DropdownLabel.TextColor3 = OrionLib.CurrentTheme.Text
                DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                DropdownLabel.Parent = DropdownButton
                
                local DropdownIcon = Instance.new("TextLabel")
                DropdownIcon.Name = "DropdownIcon"
                DropdownIcon.Size = UDim2.new(0, 20, 0, 20)
                DropdownIcon.Position = UDim2.new(1, -30, 0.5, -10)
                DropdownIcon.BackgroundTransparency = 1
                DropdownIcon.Text = "â"
                DropdownIcon.Font = Enum.Font.GothamBold
                DropdownIcon.TextSize = 16
                DropdownIcon.TextColor3 = OrionLib.CurrentTheme.TextDark
                DropdownIcon.Parent = DropdownButton
                
                local DropdownList = Instance.new("Frame")
                DropdownList.Name = "DropdownList"
                DropdownList.Size = UDim2.new(1, 0, 0, 0)
                DropdownList.Position = UDim2.new(0, 0, 1, 5)
                DropdownList.BackgroundColor3 = OrionLib.CurrentTheme.Second
                DropdownList.BorderSizePixel = 0
                DropdownList.Visible = false
                DropdownList.ZIndex = 10
                DropdownList.Parent = DropdownFrame
                
                CreateCorner(DropdownList, 8)
                CreateStroke(DropdownList, OrionLib.CurrentTheme.Stroke, 1, 0.5)
                CreateShadow(DropdownList)
                CreateGradient(DropdownList)
                
                -- Fixed UIListLayout for dropdown
                local ListLayout = Instance.new("UIListLayout")
                ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
                ListLayout.Parent = DropdownList
                
                -- Fixed UIPadding for dropdown list
                local ListPadding = Instance.new("UIPadding")
                ListPadding.PaddingTop = UDim.new(0, 5)
                ListPadding.PaddingBottom = UDim.new(0, 5)
                ListPadding.PaddingLeft = UDim.new(0, 5)
                ListPadding.PaddingRight = UDim.new(0, 5)
                ListPadding.Parent = DropdownList
                
                local isOpen = false
                
                local function ToggleDropdown()
                    isOpen = not isOpen
                    
                    if isOpen then
                        DropdownList.Visible = true
                        DropdownFrame.Size = UDim2.new(1, 0, 0, 40 + math.min(#Options * 30 + 10, 150))
                        DropdownList.Size = UDim2.new(1, 0, 0, math.min(#Options * 30 + 10, 150))
                        CreateTween(DropdownIcon, {Rotation = 180}, 0.2)
                    else
                        DropdownFrame.Size = UDim2.new(1, 0, 0, 40)
                        CreateTween(DropdownIcon, {Rotation = 0}, 0.2)
                        task.delay(0.1, function()
                            DropdownList.Visible = false
                        end)
                    end
                end
                
                local function CreateOptions()
                    -- Clear existing options
                    for _, child in pairs(DropdownList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    -- Create new options
                    for i, option in pairs(Options) do
                        local OptionButton = Instance.new("TextButton")
                        OptionButton.Name = "Option"
                        OptionButton.Size = UDim2.new(1, -10, 0, 25)
                        OptionButton.BackgroundColor3 = OrionLib.CurrentTheme.Second
                        OptionButton.BackgroundTransparency = 1
                        OptionButton.BorderSizePixel = 0
                        OptionButton.Text = option
                        OptionButton.Font = Enum.Font.Gotham
                        OptionButton.TextSize = 13
                        OptionButton.TextColor3 = OrionLib.CurrentTheme.Text
                        OptionButton.TextXAlignment = Enum.TextXAlignment.Left
                        OptionButton.Parent = DropdownList
                        
                        -- Fixed UIPadding for option button
                        local OptionPadding = Instance.new("UIPadding")
                        OptionPadding.PaddingLeft = UDim.new(0, 10)
                        OptionPadding.PaddingRight = UDim.new(0, 10)
                        OptionPadding.Parent = OptionButton
                        
                        CreateCorner(OptionButton, 6)
                        
                        OptionButton.MouseButton1Click:Connect(function()
                            Dropdown.Value = option
                            Window.Flags[Flag] = option
                            DropdownLabel.Text = Name .. ": " .. option
                            ToggleDropdown()
                            SafeCall(Callback, option)
                        end)
                        
                        OptionButton.MouseEnter:Connect(function()
                            OptionButton.BackgroundTransparency = 0.8
                        end)
                        
                        OptionButton.MouseLeave:Connect(function()
                            OptionButton.BackgroundTransparency = 1
                        end)
                    end
                end
                
                CreateOptions()
                
                DropdownButton.MouseButton1Click:Connect(function()
                    CreateRipple(DropdownButton, UserInputService:GetMouseLocation())
                    ToggleDropdown()
                end)
                
                DropdownButton.MouseEnter:Connect(function()
                    CreateTween(DropdownButton, {BackgroundColor3 = OrionLib.CurrentTheme.Stroke}, 0.2)
                end)
                
                DropdownButton.MouseLeave:Connect(function()
                    CreateTween(DropdownButton, {BackgroundColor3 = OrionLib.CurrentTheme.Second}, 0.2)
                end)
                
                function Dropdown:Refresh(newOptions, newDefault)
                    self.Options = newOptions
                    Options = newOptions
                    
                    if newDefault then
                        self.Value = newDefault
                        Window.Flags[Flag] = newDefault
                        DropdownLabel.Text = Name .. ": " .. newDefault
                    end
                    
                    CreateOptions()
                end
                
                function Dropdown:Set(option)
                    if table.find(Options, option) then
                        self.Value = option
                        Window.Flags[Flag] = option
                        DropdownLabel.Text = Name .. ": " .. option
                        SafeCall(Callback, option)
                    end
                end
                
                return Dropdown
            end
            
            function Section:AddTextbox(config)
                config = config or {}
                local Name = config.Name or "Textbox"
                local Default = config.Default or ""
                local TextDisappear = config.TextDisappear or false
                local Callback = config.Callback or function() end
                local Flag = config.Flag or Name
                
                local Textbox = {}
                Textbox.Type = "Textbox"
                Textbox.Name = Name
                Textbox.Value = Default
                Textbox.Callback = Callback
                Textbox.Flag = Flag
                
                Window.Flags[Flag] = Default
                
                local TextboxFrame = Instance.new("Frame")
                TextboxFrame.Name = "TextboxFrame"
                TextboxFrame.Size = UDim2.new(1, 0, 0, 40)
                TextboxFrame.BackgroundTransparency = 1
                TextboxFrame.Parent = SectionFrame
                Textbox.Frame = TextboxFrame
                
                local TextboxContainer = Instance.new("Frame")
                TextboxContainer.Name = "TextboxContainer"
                TextboxContainer.Size = UDim2.new(1, 0, 1, 0)
                TextboxContainer.BackgroundColor3 = OrionLib.CurrentTheme.Second
                TextboxContainer.BorderSizePixel = 0
                TextboxContainer.Parent = TextboxFrame
                
                CreateCorner(TextboxContainer, 8)
                CreateStroke(TextboxContainer, OrionLib.CurrentTheme.Stroke, 1, 0.5)
                CreateGradient(TextboxContainer)
                
                local TextboxLabel = Instance.new("TextLabel")
                TextboxLabel.Name = "TextboxLabel"
                TextboxLabel.Size = UDim2.new(0, 80, 1, 0)
                TextboxLabel.Position = UDim2.new(0, 15, 0, 0)
                TextboxLabel.BackgroundTransparency = 1
                TextboxLabel.Text = Name .. ":"
                TextboxLabel.Font = Enum.Font.Gotham
                TextboxLabel.TextSize = 14
                TextboxLabel.TextColor3 = OrionLib.CurrentTheme.Text
                TextboxLabel.TextXAlignment = Enum.TextXAlignment.Left
                TextboxLabel.Parent = TextboxContainer
                
                local TextboxInput = Instance.new("TextBox")
                TextboxInput.Name = "TextboxInput"
                TextboxInput.Size = UDim2.new(1, -110, 1, 0)
                TextboxInput.Position = UDim2.new(0, 100, 0, 0)
                TextboxInput.BackgroundTransparency = 1
                TextboxInput.Text = Default
                TextboxInput.PlaceholderText = "Enter text..."
                TextboxInput.Font = Enum.Font.Gotham
                TextboxInput.TextSize = 14
                TextboxInput.TextColor3 = OrionLib.CurrentTheme.SchemeColor
                TextboxInput.TextXAlignment = Enum.TextXAlignment.Left
                TextboxInput.ClearTextOnFocus = TextDisappear
                TextboxInput.Parent = TextboxContainer
                Textbox.Input = TextboxInput
                
                TextboxInput.FocusLost:Connect(function(enterPressed)
                    Textbox.Value = TextboxInput.Text
                    Window.Flags[Flag] = TextboxInput.Text
                    SafeCall(Callback, TextboxInput.Text)
                end)
                
                TextboxInput.Focused:Connect(function()
                    CreateTween(TextboxContainer, {BackgroundColor3 = OrionLib.CurrentTheme.Stroke}, 0.2)
                end)
                
                TextboxInput.FocusLost:Connect(function()
                    CreateTween(TextboxContainer, {BackgroundColor3 = OrionLib.CurrentTheme.Second}, 0.2)
                end)
                
                function Textbox:Set(text)
                    self.Value = text
                    TextboxInput.Text = text
                    Window.Flags[Flag] = text
                end
                
                return Textbox
            end
            
            function Section:AddColorpicker(config)
                config = config or {}
                local Name = config.Name or "Colorpicker"
                local Default = config.Default or Color3.fromRGB(255, 255, 255)
                local Callback = config.Callback or function() end
                local Flag = config.Flag or Name
                
                local Colorpicker = {}
                Colorpicker.Type = "Colorpicker"
                Colorpicker.Name = Name
                Colorpicker.Value = Default
                Colorpicker.Callback = Callback
                Colorpicker.Flag = Flag
                
                Window.Flags[Flag] = Default
                
                local ColorFrame = Instance.new("Frame")
                ColorFrame.Name = "ColorFrame"
                ColorFrame.Size = UDim2.new(1, 0, 0, 40)
                ColorFrame.BackgroundTransparency = 1
                ColorFrame.Parent = SectionFrame
                Colorpicker.Frame = ColorFrame
                
                local ColorContainer = Instance.new("Frame")
                ColorContainer.Name = "ColorContainer"
                ColorContainer.Size = UDim2.new(1, 0, 1, 0)
                ColorContainer.BackgroundColor3 = OrionLib.CurrentTheme.Second
                ColorContainer.BorderSizePixel = 0
                ColorContainer.Parent = ColorFrame
                
                CreateCorner(ColorContainer, 8)
                CreateStroke(ColorContainer, OrionLib.CurrentTheme.Stroke, 1, 0.5)
                CreateGradient(ColorContainer)
                
                local ColorLabel = Instance.new("TextLabel")
                ColorLabel.Name = "ColorLabel"
                ColorLabel.Size = UDim2.new(1, -60, 1, 0)
                ColorLabel.Position = UDim2.new(0, 15, 0, 0)
                ColorLabel.BackgroundTransparency = 1
                ColorLabel.Text = Name
                ColorLabel.Font = Enum.Font.Gotham
                ColorLabel.TextSize = 14
                ColorLabel.TextColor3 = OrionLib.CurrentTheme.Text
                ColorLabel.TextXAlignment = Enum.TextXAlignment.Left
                ColorLabel.Parent = ColorContainer
                
                local ColorDisplay = Instance.new("Frame")
                ColorDisplay.Name = "ColorDisplay"
                ColorDisplay.Size = UDim2.new(0, 30, 0, 30)
                ColorDisplay.Position = UDim2.new(1, -40, 0.5, -15)
                ColorDisplay.BackgroundColor3 = Default
                ColorDisplay.BorderSizePixel = 0
                ColorDisplay.Parent = ColorContainer
                
                CreateCorner(ColorDisplay, 6)
                CreateStroke(ColorDisplay, OrionLib.CurrentTheme.Stroke, 2, 0.3)
                
                local ColorButton = Instance.new("TextButton")
                ColorButton.Size = UDim2.new(1, 0, 1, 0)
                ColorButton.BackgroundTransparency = 1
                ColorButton.Text = ""
                ColorButton.Parent = ColorDisplay
                
                -- Simple color cycling (for demonstration)
                ColorButton.MouseButton1Click:Connect(function()
                    CreateRipple(ColorContainer, UserInputService:GetMouseLocation())
                    
                    local colors = {
                        Color3.fromRGB(255, 0, 0),
                        Color3.fromRGB(0, 255, 0),
                        Color3.fromRGB(0, 0, 255),
                        Color3.fromRGB(255, 255, 0),
                        Color3.fromRGB(255, 0, 255),
                        Color3.fromRGB(0, 255, 255),
                        Color3.fromRGB(255, 255, 255)
                    }
                    
                    local currentIndex = 1
                    for i, color in pairs(colors) do
                        if color == Colorpicker.Value then
                            currentIndex = i
                            break
                        end
                    end
                    
                    currentIndex = currentIndex % #colors + 1
                    local newColor = colors[currentIndex]
                    
                    Colorpicker.Value = newColor
                    Window.Flags[Flag] = newColor
                    ColorDisplay.BackgroundColor3 = newColor
                    SafeCall(Callback, newColor)
                end)
                
                ColorContainer.MouseEnter:Connect(function()
                    CreateTween(ColorContainer, {BackgroundColor3 = OrionLib.CurrentTheme.Stroke}, 0.2)
                end)
                
                ColorContainer.MouseLeave:Connect(function()
                    CreateTween(ColorContainer, {BackgroundColor3 = OrionLib.CurrentTheme.Second}, 0.2)
                end)
                
                function Colorpicker:Set(color)
                    self.Value = color
                    Window.Flags[Flag] = color
                    ColorDisplay.BackgroundColor3 = color
                end
                
                return Colorpicker
            end
            
            return Section
        end
        
        -- Select first tab by default
        if #Window.Tabs == 0 then
            SelectTab()
        end
        
        table.insert(Window.Tabs, Tab)
        return Tab
    end
    
    -- Window entrance animation
    MainFrame.Size = UDim2.new(0, 0, 0, 0)
    MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    
    CreateTween(MainFrame, {
        Size = UDim2.new(0, 580, 0, 460),
        Position = UDim2.new(0.5, -290, 0.5, -230)
    }, 0.5, Enum.EasingStyle.Back)
    
    -- Intro notification
    if IntroEnabled then
        task.wait(0.6)
        OrionLib:MakeNotification({
            Name = "Welcome!",
            Content = IntroText,
            Image = IntroIcon,
            Time = 4
        })
    end
    
    table.insert(OrionLib.Windows, Window)
    return Window
end

-- Theme functions
function OrionLib:SetTheme(themeName)
    if OrionLib.Themes[themeName] then
        OrionLib.CurrentTheme = OrionLib.Themes[themeName]
        return true
    end
    return false
end

function OrionLib:GetThemes()
    local themes = {}
    for name, _ in pairs(OrionLib.Themes) do
        table.insert(themes, name)
    end
    return themes
end

-- Cleanup function
function OrionLib:Destroy()
    for _, connection in pairs(OrionLib.Connections) do
        if connection then
            connection:Disconnect()
        end
    end
    
    for _, window in pairs(OrionLib.Windows) do
        if window.MainFrame and window.MainFrame.Parent then
            window.MainFrame.Parent:Destroy()
        end
    end
    
    OrionLib.Windows = {}
    OrionLib.Connections = {}
end

return OrionLib
