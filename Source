--[[
    CryzenHub UI Library v1.0.0
    A simple yet powerful UI library for Roblox scripts
    Created by CryzenHub
]]

local CryzenHub = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Configuration
local Config = {
    MainColor = Color3.fromRGB(36, 36, 36),
    AccentColor = Color3.fromRGB(70, 120, 255),
    TextColor = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.GothamSemibold,
    TweenSpeed = 0.25,
    ToggleSpeed = 0.15,
    TooltipDelay = 0.5
}

-- Create base GUI
function CryzenHub:CreateWindow(title)
    -- Remove any existing CryzenHub GUIs
    for _, gui in pairs(Player.PlayerGui:GetChildren()) do
        if gui.Name == "CryzenHubGUI" then
            gui:Destroy()
        end
    end
    
    local Window = {}
    
    -- Create main GUI
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "CryzenHubGUI"
    ScreenGui.Parent = Player.PlayerGui
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false
    
    -- Create main frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 500, 0, 350)
    MainFrame.Position = UDim2.new(0.5, -250, 0.5, -175)
    MainFrame.BackgroundColor3 = Config.MainColor
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    -- Add corner radius
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = MainFrame
    
    -- Add shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxassetid://5554236805"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.6
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(23, 23, 277, 277)
    Shadow.Parent = MainFrame
    
    -- Create title bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Config.AccentColor
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 6)
    TitleCorner.Parent = TitleBar
    
    -- Fix corner radius for title bar
    local TitleBarFix = Instance.new("Frame")
    TitleBarFix.Name = "TitleBarFix"
    TitleBarFix.Size = UDim2.new(1, 0, 0.5, 0)
    TitleBarFix.Position = UDim2.new(0, 0, 0.5, 0)
    TitleBarFix.BackgroundColor3 = Config.AccentColor
    TitleBarFix.BorderSizePixel = 0
    TitleBarFix.Parent = TitleBar
    
    -- Title text
    local TitleText = Instance.new("TextLabel")
    TitleText.Name = "TitleText"
    TitleText.Size = UDim2.new(1, -60, 1, 0)
    TitleText.Position = UDim2.new(0, 10, 0, 0)
    TitleText.BackgroundTransparency = 1
    TitleText.Text = title or "CryzenHub"
    TitleText.Font = Config.Font
    TitleText.TextSize = 16
    TitleText.TextColor3 = Config.TextColor
    TitleText.TextXAlignment = Enum.TextXAlignment.Left
    TitleText.Parent = TitleBar
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.BackgroundTransparency = 1
    CloseButton.Text = "âœ•"
    CloseButton.Font = Config.Font
    CloseButton.TextSize = 18
    CloseButton.TextColor3 = Config.TextColor
    CloseButton.Parent = TitleBar
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    -- Make window draggable
    local Dragging = false
    local DragStart = nil
    local StartPos = nil
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            DragStart = input.Position
            StartPos = MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and Dragging then
            local Delta = input.Position - DragStart
            MainFrame.Position = UDim2.new(
                StartPos.X.Scale,
                StartPos.X.Offset + Delta.X,
                StartPos.Y.Scale,
                StartPos.Y.Offset + Delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = false
        end
    end)
    
    -- Create tab system
    local TabHolder = Instance.new("Frame")
    TabHolder.Name = "TabHolder"
    TabHolder.Size = UDim2.new(0, 120, 1, -30)
    TabHolder.Position = UDim2.new(0, 0, 0, 30)
    TabHolder.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    TabHolder.BorderSizePixel = 0
    TabHolder.Parent = MainFrame
    
    local TabHolderCorner = Instance.new("UICorner")
    TabHolderCorner.CornerRadius = UDim.new(0, 6)
    TabHolderCorner.Parent = TabHolder
    
    -- Fix TabHolder corners
    local TabHolderFix = Instance.new("Frame")
    TabHolderFix.Name = "TabHolderFix"
    TabHolderFix.Size = UDim2.new(0.5, 0, 1, 0)
    TabHolderFix.Position = UDim2.new(0.5, 0, 0, 0)
    TabHolderFix.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    TabHolderFix.BorderSizePixel = 0
    TabHolderFix.Parent = TabHolder
    
    local TabList = Instance.new("ScrollingFrame")
    TabList.Name = "TabList"
    TabList.Size = UDim2.new(1, 0, 1, 0)
    TabList.BackgroundTransparency = 1
    TabList.BorderSizePixel = 0
    TabList.ScrollBarThickness = 0
    TabList.ScrollingEnabled = true
    TabList.AutomaticCanvasSize = Enum.AutomaticSize.Y
    TabList.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabList.Parent = TabHolder
    
    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Padding = UDim.new(0, 5)
    TabListLayout.Parent = TabList
    
    local TabListPadding = Instance.new("UIPadding")
    TabListPadding.PaddingTop = UDim.new(0, 8)
    TabListPadding.PaddingLeft = UDim.new(0, 8)
    TabListPadding.PaddingRight = UDim.new(0, 8)
    TabListPadding.Parent = TabList
    
    -- Content area
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "ContentFrame"
    ContentFrame.Size = UDim2.new(1, -130, 1, -40)
    ContentFrame.Position = UDim2.new(0, 125, 0, 35)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Parent = MainFrame
    
    local TabContent = {}
    local Tabs = {}
    local SelectedTab = nil
    
    -- Create tab function
    function Window:CreateTab(tabName, icon)
        local Tab = {}
        
        -- Tab button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = tabName.."Tab"
        TabButton.Size = UDim2.new(1, 0, 0, 32)
        TabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        TabButton.BackgroundTransparency = 1
        TabButton.Text = ""
        TabButton.Parent = TabList
        
        local TabButtonCorner = Instance.new("UICorner")
        TabButtonCorner.CornerRadius = UDim.new(0, 4)
        TabButtonCorner.Parent = TabButton
        
        local TabIcon
        if icon then
            TabIcon = Instance.new("ImageLabel")
            TabIcon.Name = "Icon"
            TabIcon.Size = UDim2.new(0, 20, 0, 20)
            TabIcon.Position = UDim2.new(0, 5, 0.5, -10)
            TabIcon.BackgroundTransparency = 1
            TabIcon.Image = icon
            TabIcon.Parent = TabButton
        end
        
        local TabText = Instance.new("TextLabel")
        TabText.Name = "TabText"
        TabText.Size = UDim2.new(1, icon and -30 or -10, 1, 0)
        TabText.Position = UDim2.new(0, icon and 30 or 5, 0, 0)
        TabText.BackgroundTransparency = 1
        TabText.Text = tabName
        TabText.Font = Config.Font
        TabText.TextSize = 14
        TabText.TextColor3 = Config.TextColor
        TabText.TextXAlignment = Enum.TextXAlignment.Left
        TabText.Parent = TabButton
        
        -- Tab content
        local TabContentFrame = Instance.new("ScrollingFrame")
        TabContentFrame.Name = tabName.."Content"
        TabContentFrame.Size = UDim2.new(1, 0, 1, 0)
        TabContentFrame.BackgroundTransparency = 1
        TabContentFrame.BorderSizePixel = 0
        TabContentFrame.ScrollBarThickness = 2
        TabContentFrame.ScrollingEnabled = true
        TabContentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        TabContentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContentFrame.Visible = false
        TabContentFrame.Parent = ContentFrame
        
        local ContentLayout = Instance.new("UIListLayout")
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, 8)
        ContentLayout.Parent = TabContentFrame
        
        local ContentPadding = Instance.new("UIPadding")
        ContentPadding.PaddingTop = UDim.new(0, 5)
        ContentPadding.PaddingBottom = UDim.new(0, 10)
        ContentPadding.PaddingLeft = UDim.new(0, 5)
        ContentPadding.PaddingRight = UDim.new(0, 5)
        ContentPadding.Parent = TabContentFrame
        
        -- Tab selection logic
        TabButton.MouseButton1Click:Connect(function()
            if SelectedTab then
                -- Deselect current tab
                TweenService:Create(Tabs[SelectedTab].TabButton, 
                    TweenInfo.new(Config.TweenSpeed), 
                    {BackgroundTransparency = 1}
                ):Play()
                Tabs[SelectedTab].ContentFrame.Visible = false
            end
            
            -- Select new tab
            SelectedTab = tabName
            TweenService:Create(TabButton, 
                TweenInfo.new(Config.TweenSpeed), 
                {BackgroundTransparency = 0}
            ):Play()
            TabContentFrame.Visible = true
        end)
        
        Tabs[tabName] = {
            TabButton = TabButton,
            ContentFrame = TabContentFrame
        }
        
        -- Select first tab by default
        if not SelectedTab then
            SelectedTab = tabName
            TabButton.BackgroundTransparency = 0
            TabContentFrame.Visible = true
        end
        
        -- Section function
        function Tab:CreateSection(sectionName)
            local Section = {}
            
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Name = sectionName.."Section"
            SectionFrame.Size = UDim2.new(1, -10, 0, 35) -- Will be automatically resized
            SectionFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            SectionFrame.BorderSizePixel = 0
            SectionFrame.AutomaticSize = Enum.AutomaticSize.Y
            SectionFrame.Parent = TabContentFrame
            
            local SectionCorner = Instance.new("UICorner")
            SectionCorner.CornerRadius = UDim.new(0, 5)
            SectionCorner.Parent = SectionFrame
            
            local SectionTitle = Instance.new("TextLabel")
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Size = UDim2.new(1, -10, 0, 25)
            SectionTitle.Position = UDim2.new(0, 10, 0, 0)
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Text = sectionName
            SectionTitle.Font = Config.Font
            SectionTitle.TextSize = 15
            SectionTitle.TextColor3 = Config.TextColor
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            SectionTitle.Parent = SectionFrame
            
            local SectionContent = Instance.new("Frame")
            SectionContent.Name = "SectionContent"
            SectionContent.Size = UDim2.new(1, 0, 0, 0)
            SectionContent.Position = UDim2.new(0, 0, 0, 25)
            SectionContent.BackgroundTransparency = 1
            SectionContent.AutomaticSize = Enum.AutomaticSize.Y
            SectionContent.Parent = SectionFrame
            
            local SectionLayout = Instance.new("UIListLayout")
            SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLayout.Padding = UDim.new(0, 10)
            SectionLayout.Parent = SectionContent
            
            local SectionPadding = Instance.new("UIPadding")
            SectionPadding.PaddingTop = UDim.new(0, 5)
            SectionPadding.PaddingBottom = UDim.new(0, 10)
            SectionPadding.PaddingLeft = UDim.new(0, 10)
            SectionPadding.PaddingRight = UDim.new(0, 10)
            SectionPadding.Parent = SectionContent
            
            -- Button function
            function Section:CreateButton(buttonText, callback)
                local Button = Instance.new("TextButton")
                Button.Name = buttonText.."Button"
                Button.Size = UDim2.new(1, 0, 0, 32)
                Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                Button.Text = buttonText
                Button.Font = Config.Font
                Button.TextSize = 14
                Button.TextColor3 = Config.TextColor
                Button.Parent = SectionContent
                
                local ButtonCorner = Instance.new("UICorner")
                ButtonCorner.CornerRadius = UDim.new(0, 4)
                ButtonCorner.Parent = Button
                
                -- Button hover effect
                Button.MouseEnter:Connect(function()
                    TweenService:Create(Button, 
                        TweenInfo.new(Config.TweenSpeed), 
                        {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}
                    ):Play()
                end)
                
                Button.MouseLeave:Connect(function()
                    TweenService:Create(Button, 
                        TweenInfo.new(Config.TweenSpeed), 
                        {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}
                    ):Play()
                end)
                
                Button.MouseButton1Down:Connect(function()
                    TweenService:Create(Button, 
                        TweenInfo.new(Config.TweenSpeed/2), 
                        {BackgroundColor3 = Config.AccentColor}
                    ):Play()
                end)
                
                Button.MouseButton1Up:Connect(function()
                    TweenService:Create(Button, 
                        TweenInfo.new(Config.TweenSpeed/2), 
                        {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}
                    ):Play()
                end)
                
                Button.MouseButton1Click:Connect(function()
                    if callback then 
                        callback() 
                    end
                end)
                
                return Button
            end
            
            -- Toggle function
            function Section:CreateToggle(toggleText, default, callback)
                local toggled = default or false
                
                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.Name = toggleText.."Toggle"
                ToggleFrame.Size = UDim2.new(1, 0, 0, 32)
                ToggleFrame.BackgroundTransparency = 1
                ToggleFrame.Parent = SectionContent
                
                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Name = "ToggleButton"
                ToggleButton.Size = UDim2.new(0, 32, 0, 16)
                ToggleButton.Position = UDim2.new(0, 0, 0.5, -8)
                ToggleButton.BackgroundColor3 = toggled and Config.AccentColor or Color3.fromRGB(70, 70, 70)
                ToggleButton.Text = ""
                ToggleButton.Parent = ToggleFrame
                
                local ToggleCorner = Instance.new("UICorner")
                ToggleCorner.CornerRadius = UDim.new(1, 0)
                ToggleCorner.Parent = ToggleButton
                
                local ToggleCircle = Instance.new("Frame")
                ToggleCircle.Name = "Circle"
                ToggleCircle.Size = UDim2.new(0, 12, 0, 12)
                ToggleCircle.Position = UDim2.new(toggled and 1 or 0, toggled and -14 or 2, 0.5, -6)
                ToggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleCircle.Parent = ToggleButton
                
                local ToggleCircleCorner = Instance.new("UICorner")
                ToggleCircleCorner.CornerRadius = UDim.new(1, 0)
                ToggleCircleCorner.Parent = ToggleCircle
                
                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Name = "Label"
                ToggleLabel.Size = UDim2.new(1, -40, 1, 0)
                ToggleLabel.Position = UDim2.new(0, 40, 0, 0)
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.Text = toggleText
                ToggleLabel.Font = Config.Font
                ToggleLabel.TextSize = 14
                ToggleLabel.TextColor3 = Config.TextColor
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                ToggleLabel.Parent = ToggleFrame
                
                local function UpdateToggle()
                    TweenService:Create(ToggleButton, 
                        TweenInfo.new(Config.ToggleSpeed), 
                        {BackgroundColor3 = toggled and Config.AccentColor or Color3.fromRGB(70, 70, 70)}
                    ):Play()
                    
                    TweenService:Create(ToggleCircle, 
                        TweenInfo.new(Config.ToggleSpeed),
                        {Position = UDim2.new(toggled and 1 or 0, toggled and -14 or 2, 0.5, -6)}
                    ):Play()
                    
                    if callback then
                        callback(toggled)
                    end
                end
                
                ToggleButton.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    UpdateToggle()
                end)
                
                ToggleLabel.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggled = not toggled
                        UpdateToggle()
                    end
                end)
                
                return {
                    Frame = ToggleFrame,
                    SetValue = function(self, value)
                        toggled = value
                        UpdateToggle()
                    end,
                    GetValue = function(self)
                        return toggled
                    end
                }
            end
            
            -- Slider function
            function Section:CreateSlider(sliderText, min, max, default, callback)
                min = min or 0
                max = max or 100
                default = default or min
                
                local SliderFrame = Instance.new("Frame")
                SliderFrame.Name = sliderText.."Slider"
                SliderFrame.Size = UDim2.new(1, 0, 0, 45)
                SliderFrame.BackgroundTransparency = 1
                SliderFrame.Parent = SectionContent
                
                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Name = "Label"
                SliderLabel.Size = UDim2.new(1, 0, 0, 20)
                SliderLabel.Position = UDim2.new(0, 0, 0, 0)
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.Text = sliderText
                SliderLabel.Font = Config.Font
                SliderLabel.TextSize = 14
                SliderLabel.TextColor3 = Config.TextColor
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                SliderLabel.Parent = SliderFrame
                
                local SliderValue = Instance.new("TextLabel")
                SliderValue.Name = "Value"
                SliderValue.Size = UDim2.new(0, 50, 0, 20)
                SliderValue.Position = UDim2.new(1, -50, 0, 0)
                SliderValue.BackgroundTransparency = 1
                SliderValue.Text = tostring(default)
                SliderValue.Font = Config.Font
                SliderValue.TextSize = 14
                SliderValue.TextColor3 = Config.TextColor
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                SliderValue.Parent = SliderFrame
                
                local SliderOuter = Instance.new("Frame")
                SliderOuter.Name = "SliderOuter"
                SliderOuter.Size = UDim2.new(1, 0, 0, 6)
                SliderOuter.Position = UDim2.new(0, 0, 0, 30)
                SliderOuter.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                SliderOuter.BorderSizePixel = 0
                SliderOuter.Parent = SliderFrame
                
                local SliderOuterCorner = Instance.new("UICorner")
                SliderOuterCorner.CornerRadius = UDim.new(1, 0)
                SliderOuterCorner.Parent = SliderOuter
                
                local SliderInner = Instance.new("Frame")
                SliderInner.Name = "SliderInner"
                SliderInner.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                SliderInner.BackgroundColor3 = Config.AccentColor
                SliderInner.BorderSizePixel = 0
                SliderInner.Parent = SliderOuter
                
                local SliderInnerCorner = Instance.new("UICorner")
                SliderInnerCorner.CornerRadius = UDim.new(1, 0)
                SliderInnerCorner.Parent = SliderInner
                
                local SliderButton = Instance.new("TextButton")
                SliderButton.Name = "SliderButton"
                SliderButton.Size = UDim2.new(1, 0, 1, 0)
                SliderButton.BackgroundTransparency = 1
                SliderButton.Text = ""
                SliderButton.Parent = SliderOuter
                
                local currentValue = default
                
                local function UpdateSlider(value)
                    value = math.clamp(value, min, max)
                    currentValue = value
                    
                    -- For integers, round the value
                    if min % 1 == 0 and max % 1 == 0 then
                        currentValue = math.round(currentValue)
                    end
                    
                    SliderValue.Text = tostring(currentValue)
                    TweenService:Create(SliderInner, 
                        TweenInfo.new(0.1), 
                        {Size = UDim2.new((currentValue - min) / (max - min), 0, 1, 0)}
                    ):Play()
                    
                    if callback then
                        callback(currentValue)
                    end
                end
                
                local dragging = false
                
                SliderButton.MouseButton1Down:Connect(function()
                    dragging = true
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mousePos = UserInputService:GetMouseLocation()
                        local framePos = SliderOuter.AbsolutePosition
                        local frameSize = SliderOuter.AbsoluteSize
                        
                        local relativeX = (mousePos.X - framePos.X) / frameSize.X
                        local value = min + ((max - min) * relativeX)
                        
                        UpdateSlider(value)
                    end
                end)
                
                -- Initial update
                UpdateSlider(default)
                
                return {
                    Frame = SliderFrame,
                    SetValue = function(self, value)
                        UpdateSlider(value)
                    end,
                    GetValue = function(self)
                        return currentValue
                    end
                }
            end
            
            -- Dropdown function
            function Section:CreateDropdown(dropdownText, options, default, callback)
                options = options or {}
                
                local DropdownFrame = Instance.new("Frame")
                DropdownFrame.Name = dropdownText.."Dropdown"
                DropdownFrame.Size = UDim2.new(1, 0, 0, 35)
                DropdownFrame.BackgroundTransparency = 1
                DropdownFrame.Parent = SectionContent
                
                local DropdownLabel = Instance.new("TextLabel")
                DropdownLabel.Name = "Label"
                DropdownLabel.Size = UDim2.new(1, 0, 0, 20)
                DropdownLabel.BackgroundTransparency = 1
                DropdownLabel.Text = dropdownText
                DropdownLabel.Font = Config.Font
                DropdownLabel.TextSize = 14
                DropdownLabel.TextColor3 = Config.TextColor
                DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                DropdownLabel.Parent = DropdownFrame
                
                local DropdownButton = Instance.new("TextButton")
                DropdownButton.Name = "Button"
                DropdownButton.Size = UDim2.new(1, 0, 0, 30)
                DropdownButton.Position = UDim2.new(0, 0, 0, 20)
                DropdownButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                DropdownButton.Text = default or "Select..."
                DropdownButton.Font = Config.Font
                DropdownButton.TextSize = 14
                DropdownButton.TextColor3 = Config.TextColor
                DropdownButton.Parent = DropdownFrame
                
                local DropdownCorner = Instance.new("UICorner")
                DropdownCorner.CornerRadius = UDim.new(0, 4)
                DropdownCorner.Parent = DropdownButton
                
                local DropdownIcon = Instance.new("ImageLabel")
                DropdownIcon.Name = "Icon"
                DropdownIcon.Size = UDim2.new(0, 20, 0, 20)
                DropdownIcon.Position = UDim2.new(1, -25, 0.5, -10)
                DropdownIcon.BackgroundTransparency = 1
                DropdownIcon.Rotation = 0
                DropdownIcon.Image = "rbxassetid://7072706663" -- Down arrow
                DropdownIcon.Parent = DropdownButton
                
                local DropdownContent = Instance.new("Frame")
                DropdownContent.Name = "Content"
                DropdownContent.Size = UDim2.new(1, 0, 0, 0) -- Will be resized based on options
                DropdownContent.Position = UDim2.new(0, 0, 1, 5)
                DropdownContent.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                DropdownContent.BorderSizePixel = 0
                DropdownContent.ClipsDescendants = true
                DropdownContent.Visible = false
                DropdownContent.ZIndex = 10
                DropdownContent.Parent = DropdownButton
                
                local ContentCorner = Instance.new("UICorner")
                ContentCorner.CornerRadius = UDim.new(0, 4)
                ContentCorner.Parent = DropdownContent
                
                local ContentLayout = Instance.new("UIListLayout")
                ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
                ContentLayout.Padding = UDim.new(0, 2)
                ContentLayout.Parent = DropdownContent
                
                local selected = default
                local opened = false
                
                -- Add options
                for i, option in ipairs(options) do
                    local OptionButton = Instance.new("TextButton")
                    OptionButton.Name = option.."Option"
                    OptionButton.Size = UDim2.new(1, 0, 0, 25)
                    OptionButton.BackgroundTransparency = 1
                    OptionButton.Text = option
                    OptionButton.Font = Config.Font
                    OptionButton.TextSize = 14
                    OptionButton.TextColor3 = Config.TextColor
                    OptionButton.ZIndex = 11
                    OptionButton.Parent = DropdownContent
                    
                    -- Option hover effect
                    OptionButton.MouseEnter:Connect(function()
                        TweenService:Create(OptionButton, 
                            TweenInfo.new(Config.TweenSpeed), 
                            {BackgroundTransparency = 0.8, BackgroundColor3 = Config.AccentColor}
                        ):Play()
                    end)
                    
                    OptionButton.MouseLeave:Connect(function()
                        TweenService:Create(OptionButton, 
                            TweenInfo.new(Config.TweenSpeed), 
                            {BackgroundTransparency = 1}
                        ):Play()
                    end)
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        selected = option
                        DropdownButton.Text = option
                        
                        -- Close dropdown
                        TweenService:Create(DropdownContent, 
                            TweenInfo.new(Config.TweenSpeed), 
                            {Size = UDim2.new(1, 0, 0, 0)}
                        ):Play()
                        TweenService:Create(DropdownIcon, 
                            TweenInfo.new(Config.TweenSpeed), 
                            {Rotation = 0}
                        ):Play()
                        
                        opened = false
                        wait(Config.TweenSpeed)
                        DropdownContent.Visible = false
                        
                        -- Call callback
                        if callback then
                            callback(option)
                        end
                    end)
                end
                
                -- Adjust content height
                DropdownContent.Size = UDim2.new(1, 0, 0, math.min(#options * 27, 150))
                
                -- Toggle dropdown
                DropdownButton.MouseButton1Click:Connect(function()
                    opened = not opened
                    
                    if opened then
                        DropdownContent.Visible = true
                        TweenService:Create(DropdownContent, 
                            TweenInfo.new(Config.TweenSpeed), 
                            {Size = UDim2.new(1, 0, 0, math.min(#options * 27, 150))}
                        ):Play()
                        TweenService:Create(DropdownIcon, 
                            TweenInfo.new(Config.TweenSpeed), 
                            {Rotation = 180}
                        ):Play()
                    else
                        TweenService:Create(DropdownContent, 
                            TweenInfo.new(Config.TweenSpeed), 
                            {Size = UDim2.new(1, 0, 0, 0)}
                        ):Play()
                        TweenService:Create(DropdownIcon, 
                            TweenInfo.new(Config.TweenSpeed), 
                            {Rotation = 0}
                        ):Play()
                        
                        wait(Config.TweenSpeed)
                        DropdownContent.Visible = false
                    end
                end)
                
                -- Adjust frame height
                DropdownFrame.Size = UDim2.new(1, 0, 0, 55)
                
                return {
                    Frame = DropdownFrame,
                    SetValue = function(self, value)
                        if table.find(options, value) then
                            selected = value
                            DropdownButton.Text = value
                            
                            if callback then
                                callback(value)
                            end
                        end
                    end,
                    GetValue = function(self)
                        return selected
                    end,
                    Refresh = function(self, newOptions, keepSelected)
                        -- Clear existing options
                        for _, child in pairs(DropdownContent:GetChildren()) do
                            if child:IsA("TextButton") then
                                child:Destroy()
                            end
                        end
                        
                        options = newOptions
                        
                        -- Add new options
                        for i, option in ipairs(options) do
                            local OptionButton = Instance.new("TextButton")
                            OptionButton.Name = option.."Option"
                            OptionButton.Size = UDim2.new(1, 0, 0, 25)
                            OptionButton.BackgroundTransparency = 1
                            OptionButton.Text = option
                            OptionButton.Font = Config.Font
                            OptionButton.TextSize = 14
                            OptionButton.TextColor3 = Config.TextColor
                            OptionButton.ZIndex = 11
                            OptionButton.Parent = DropdownContent
                            
                            OptionButton.MouseEnter:Connect(function()
                                TweenService:Create(OptionButton, 
                                    TweenInfo.new(Config.TweenSpeed), 
                                    {BackgroundTransparency = 0.8, BackgroundColor3 = Config.AccentColor}
                                ):Play()
                            end)
                            
                            OptionButton.MouseLeave:Connect(function()
                                TweenService:Create(OptionButton, 
                                    TweenInfo.new(Config.TweenSpeed), 
                                    {BackgroundTransparency = 1}
                                ):Play()
                            end)
                            
                            OptionButton.MouseButton1Click:Connect(function()
                                selected = option
                                DropdownButton.Text = option
                                
                                TweenService:Create(DropdownContent, 
                                    TweenInfo.new(Config.TweenSpeed), 
                                    {Size = UDim2.new(1, 0, 0, 0)}
                                ):Play()
                                TweenService:Create(DropdownIcon, 
                                    TweenInfo.new(Config.TweenSpeed), 
                                    {Rotation = 0}
                                ):Play()
                                
                                opened = false
                                wait(Config.TweenSpeed)
                                DropdownContent.Visible = false
                                
                                if callback then
                                    callback(option)
                                end
                            end)
                        end
                        
                        -- Adjust content height
                        DropdownContent.Size = UDim2.new(1, 0, 0, math.min(#options * 27, 150))
                        
                        -- Update selected value if needed
                        if not keepSelected or not table.find(options, selected) then
                            if #options > 0 then
                                selected = options[1]
                                DropdownButton.Text = selected
                            else
                                selected = nil
                                DropdownButton.Text = "Select..."
                            end
                        end
                    end
                }
            end
            
            -- Input field function
            function Section:CreateTextbox(boxText, placeholderText, callback)
                local TextBoxFrame = Instance.new("Frame")
                TextBoxFrame.Name = boxText.."TextBox"
                TextBoxFrame.Size = UDim2.new(1, 0, 0, 45)
                TextBoxFrame.BackgroundTransparency = 1
                TextBoxFrame.Parent = SectionContent
                
                local TextBoxLabel = Instance.new("TextLabel")
                TextBoxLabel.Name = "Label"
                TextBoxLabel.Size = UDim2.new(1, 0, 0, 20)
                TextBoxLabel.BackgroundTransparency = 1
                TextBoxLabel.Text = boxText
                TextBoxLabel.Font = Config.Font
                TextBoxLabel.TextSize = 14
                TextBoxLabel.TextColor3 = Config.TextColor
                TextBoxLabel.TextXAlignment = Enum.TextXAlignment.Left
                TextBoxLabel.Parent = TextBoxFrame
                
                local TextBoxInput = Instance.new("TextBox")
                TextBoxInput.Name = "Input"
                TextBoxInput.Size = UDim2.new(1, 0, 0, 30)
                TextBoxInput.Position = UDim2.new(0, 0, 0, 20)
                TextBoxInput.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                TextBoxInput.PlaceholderText = placeholderText or "Enter text..."
                TextBoxInput.Text = ""
                TextBoxInput.Font = Config.Font
                TextBoxInput.TextSize = 14
                TextBoxInput.TextColor3 = Config.TextColor
                TextBoxInput.PlaceholderColor3 = Color3.fromRGB(180, 180, 180)
                TextBoxInput.Parent = TextBoxFrame
                
                local TextBoxCorner = Instance.new("UICorner")
                TextBoxCorner.CornerRadius = UDim.new(0, 4)
                TextBoxCorner.Parent = TextBoxInput
                
                TextBoxInput.FocusLost:Connect(function(enterPressed)
                    if enterPressed and callback then
                        callback(TextBoxInput.Text)
                    end
                end)
                
                return {
                    Frame = TextBoxFrame,
                    SetValue = function(self, value)
                        TextBoxInput.Text = value
                    end,
                    GetValue = function(self)
                        return TextBoxInput.Text
                    end
                }
            end
            
            -- Label function
            function Section:CreateLabel(labelText)
                local LabelFrame = Instance.new("Frame")
                LabelFrame.Name = "Label"
                LabelFrame.Size = UDim2.new(1, 0, 0, 20)
                LabelFrame.BackgroundTransparency = 1
                LabelFrame.Parent = SectionContent
                
                local Label = Instance.new("TextLabel")
                Label.Name = "Text"
                Label.Size = UDim2.new(1, 0, 1, 0)
                Label.BackgroundTransparency = 1
                Label.Text = labelText
                Label.Font = Config.Font
                Label.TextSize = 14
                Label.TextColor3 = Config.TextColor
                Label.TextWrapped = true
                Label.Parent = LabelFrame
                
                return {
                    Frame = LabelFrame,
                    SetText = function(self, text)
                        Label.Text = text
                    end
                }
            end
            
            -- Colorpicker function
            function Section:CreateColorPicker(pickerText, default, callback)
                default = default or Color3.fromRGB(255, 255, 255)
                
                local ColorPickerFrame = Instance.new("Frame")
                ColorPickerFrame.Name = pickerText.."ColorPicker"
                ColorPickerFrame.Size = UDim2.new(1, 0, 0, 35)
                ColorPickerFrame.BackgroundTransparency = 1
                ColorPickerFrame.Parent = SectionContent
                
                local ColorPickerLabel = Instance.new("TextLabel")
                ColorPickerLabel.Name = "Label"
                ColorPickerLabel.Size = UDim2.new(1, -40, 1, 0)
                ColorPickerLabel.BackgroundTransparency = 1
                ColorPickerLabel.Text = pickerText
                ColorPickerLabel.Font = Config.Font
                ColorPickerLabel.TextSize = 14
                ColorPickerLabel.TextColor3 = Config.TextColor
                ColorPickerLabel.TextXAlignment = Enum.TextXAlignment.Left
                ColorPickerLabel.Parent = ColorPickerFrame
                
                local ColorDisplay = Instance.new("Frame")
                ColorDisplay.Name = "ColorDisplay"
                ColorDisplay.Size = UDim2.new(0, 30, 0, 30)
                ColorDisplay.Position = UDim2.new(1, -30, 0.5, -15)
                ColorDisplay.BackgroundColor3 = default
                ColorDisplay.Parent = ColorPickerFrame
                
                local ColorCorner = Instance.new("UICorner")
                ColorCorner.CornerRadius = UDim.new(0, 4)
                ColorCorner.Parent = ColorDisplay
                
                local ColorPickerButton = Instance.new("TextButton")
                ColorPickerButton.Name = "Button"
                ColorPickerButton.Size = UDim2.new(1, 0, 1, 0)
                ColorPickerButton.BackgroundTransparency = 1
                ColorPickerButton.Text = ""
                ColorPickerButton.Parent = ColorDisplay
                
                -- Create color picker popup
                local PickerPopup = Instance.new("Frame")
                PickerPopup.Name = "PickerPopup"
                PickerPopup.Size = UDim2.new(0, 200, 0, 220)
                PickerPopup.Position = UDim2.new(1, 10, 0, 0)
                PickerPopup.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                PickerPopup.BorderSizePixel = 0
                PickerPopup.Visible = false
                PickerPopup.ZIndex = 100
                PickerPopup.Parent = ColorPickerFrame
                
                local PopupCorner = Instance.new("UICorner")
                PopupCorner.CornerRadius = UDim.new(0, 4)
                PopupCorner.Parent = PickerPopup
                
                -- Color saturation/value panel
                local ColorPanel = Instance.new("ImageLabel")
                ColorPanel.Name = "ColorPanel"
                ColorPanel.Size = UDim2.new(0, 180, 0, 180)
                ColorPanel.Position = UDim2.new(0.5, -90, 0, 10)
                ColorPanel.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Hue color
                ColorPanel.Image = "rbxassetid://4155801252" -- Saturation/value gradient
                ColorPanel.ZIndex = 101
                ColorPanel.Parent = PickerPopup
                
                local ColorPanelCorner = Instance.new("UICorner")
                ColorPanelCorner.CornerRadius = UDim.new(0, 4)
                ColorPanelCorner.Parent = ColorPanel
                
                -- Hue slider
                local HueSlider = Instance.new("Frame")
                HueSlider.Name = "HueSlider"
                HueSlider.Size = UDim2.new(0, 180, 0, 20)
                HueSlider.Position = UDim2.new(0.5, -90, 0, 195)
                HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                HueSlider.ZIndex = 101
                HueSlider.Parent = PickerPopup
                
                local HueSliderCorner = Instance.new("UICorner")
                HueSliderCorner.CornerRadius = UDim.new(0, 4)
                HueSliderCorner.Parent = HueSlider
                
                -- Hue gradient
                local HueGradient = Instance.new("UIGradient")
                HueGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                })
                HueGradient.Parent = HueSlider
                
                -- SV selector
                local SVSelector = Instance.new("Frame")
                SVSelector.Name = "SVSelector"
                SVSelector.Size = UDim2.new(0, 10, 0, 10)
                SVSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SVSelector.BorderColor3 = Color3.fromRGB(0, 0, 0)
                SVSelector.BorderSizePixel = 1
                SVSelector.ZIndex = 102
                SVSelector.Parent = ColorPanel
                
                local SVSelectorCorner = Instance.new("UICorner")
                SVSelectorCorner.CornerRadius = UDim.new(1, 0)
                SVSelectorCorner.Parent = SVSelector
                
                -- Hue selector
                local HueSelector = Instance.new("Frame")
                HueSelector.Name = "HueSelector"
                HueSelector.Size = UDim2.new(0, 5, 1, 0)
                HueSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                HueSelector.BorderColor3 = Color3.fromRGB(0, 0, 0)
                HueSelector.BorderSizePixel = 1
                HueSelector.ZIndex = 102
                HueSelector.Parent = HueSlider
                
                -- Button for color panel
                local ColorPanelButton = Instance.new("TextButton")
                ColorPanelButton.Name = "Button"
                ColorPanelButton.Size = UDim2.new(1, 0, 1, 0)
                ColorPanelButton.BackgroundTransparency = 1
                ColorPanelButton.Text = ""
                ColorPanelButton.ZIndex = 101
                ColorPanelButton.Parent = ColorPanel
                
                -- Button for hue slider
                local HueSliderButton = Instance.new("TextButton")
                HueSliderButton.Name = "Button"
                HueSliderButton.Size = UDim2.new(1, 0, 1, 0)
                HueSliderButton.BackgroundTransparency = 1
                HueSliderButton.Text = ""
                HueSliderButton.ZIndex = 101
                HueSliderButton.Parent = HueSlider
                
                -- Variables for color picking
                local hue, saturation, value = 0, 0, 1
                local selectedColor = default
                
                -- Function to convert HSV to RGB
                local function HSVToRGB(h, s, v)
                    local r, g, b
                    
                    local i = math.floor(h * 6)
                    local f = h * 6 - i
                    local p = v * (1 - s)
                    local q = v * (1 - f * s)
                    local t = v * (1 - (1 - f) * s)
                    
                    i = i % 6
                    
                    if i == 0 then r, g, b = v, t, p
                    elseif i == 1 then r, g, b = q, v, p
                    elseif i == 2 then r, g, b = p, v, t
                    elseif i == 3 then r, g, b = p, q, v
                    elseif i == 4 then r, g, b = t, p, v
                    elseif i == 5 then r, g, b = v, p, q
                    end
                    
                    return Color3.fromRGB(r * 255, g * 255, b * 255)
                end
                
                -- Function to convert RGB to HSV
                local function RGBToHSV(color)
                    local r, g, b = color.R, color.G, color.B
                    local max, min = math.max(r, g, b), math.min(r, g, b)
                    local h, s, v
                    
                    v = max
                    
                    local d = max - min
                    if max == 0 then s = 0 else s = d / max end
                    
                    if max == min then
                        h = 0
                    else
                        if max == r then
                            h = (g - b) / d
                            if g < b then h = h + 6 end
                        elseif max == g then
                            h = (b - r) / d + 2
                        elseif max == b then
                            h = (r - g) / d + 4
                        end
                        h = h / 6
                    end
                    
                    return h, s, v
                end
                
                -- Function to update color display
                local function UpdateColor()
                    selectedColor = HSVToRGB(hue, saturation, value)
                    ColorDisplay.BackgroundColor3 = selectedColor
                    ColorPanel.BackgroundColor3 = HSVToRGB(hue, 1, 1)
                    
                    if callback then
                        callback(selectedColor)
                    end
                end
                
                -- Function to update selectors
                local function UpdateSelectors()
                    -- Update SV selector position
                    SVSelector.Position = UDim2.new(saturation, -5, 1 - value, -5)
                    
                    -- Update hue selector position
                    HueSelector.Position = UDim2.new(hue, -2.5, 0, 0)
                end
                
                -- Initialize selectors based on default color
                local initialH, initialS, initialV = RGBToHSV(default)
                hue, saturation, value = initialH, initialS, initialV
                UpdateSelectors()
                
                -- Color panel interaction
                local colorPanelDragging = false
                
                ColorPanelButton.MouseButton1Down:Connect(function()
                    colorPanelDragging = true
                    
                    -- Get initial position
                    local panelPosition = ColorPanel.AbsolutePosition
                    local panelSize = ColorPanel.AbsoluteSize
                    local mousePosition = UserInputService:GetMouseLocation()
                    
                    -- Calculate saturation and value
                    local relativeX = math.clamp((mousePosition.X - panelPosition.X) / panelSize.X, 0, 1)
                    local relativeY = math.clamp((mousePosition.Y - panelPosition.Y) / panelSize.Y, 0, 1)
                    
                    saturation = relativeX
                    value = 1 - relativeY
                    
                    UpdateSelectors()
                    UpdateColor()
                end)
                
                -- Hue slider interaction
                local hueSliderDragging = false
                
                HueSliderButton.MouseButton1Down:Connect(function()
                    hueSliderDragging = true
                    
                    -- Get initial position
                    local sliderPosition = HueSlider.AbsolutePosition
                    local sliderSize = HueSlider.AbsoluteSize
                    local mousePosition = UserInputService:GetMouseLocation()
                    
                    -- Calculate hue
                    local relativeX = math.clamp((mousePosition.X - sliderPosition.X) / sliderSize.X, 0, 1)
                    
                    hue = relativeX
                    
                    UpdateSelectors()
                    UpdateColor()
                end)
                
                -- Handle dragging
                UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        if colorPanelDragging then
                            -- Get position
                            local panelPosition = ColorPanel.AbsolutePosition
                            local panelSize = ColorPanel.AbsoluteSize
                            local mousePosition = UserInputService:GetMouseLocation()
                            
                            -- Calculate saturation and value
                            local relativeX = math.clamp((mousePosition.X - panelPosition.X) / panelSize.X, 0, 1)
                            local relativeY = math.clamp((mousePosition.Y - panelPosition.Y) / panelSize.Y, 0, 1)
                            
                            saturation = relativeX
                            value = 1 - relativeY
                            
                            UpdateSelectors()
                            UpdateColor()
                        elseif hueSliderDragging then
                            -- Get position
                            local sliderPosition = HueSlider.AbsolutePosition
                            local sliderSize = HueSlider.AbsoluteSize
                            local mousePosition = UserInputService:GetMouseLocation()
                            
                            -- Calculate hue
                            local relativeX = math.clamp((mousePosition.X - sliderPosition.X) / sliderSize.X, 0, 1)
                            
                            hue = relativeX
                            
                            UpdateSelectors()
                            UpdateColor()
                        end
                    end
                end)
                
                -- Stop dragging on mouse up
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        colorPanelDragging = false
                        hueSliderDragging = false
                    end
                end)
                
                -- Toggle color picker popup
                local pickerVisible = false
                
                ColorPickerButton.MouseButton1Click:Connect(function()
                    pickerVisible = not pickerVisible
                    PickerPopup.Visible = pickerVisible
                end)
                
                -- Hide picker when clicking elsewhere
                UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local mousePosition = UserInputService:GetMouseLocation()
                        local pickerPosition = PickerPopup.AbsolutePosition
                        local pickerSize = PickerPopup.AbsoluteSize
                        
                        -- Check if click is outside the picker popup
                        if pickerVisible and 
                           (mousePosition.X < pickerPosition.X or
                            mousePosition.Y < pickerPosition.Y or
                            mousePosition.X > pickerPosition.X + pickerSize.X or
                            mousePosition.Y > pickerPosition.Y + pickerSize.Y) and
                           not (mousePosition.X > ColorDisplay.AbsolutePosition.X and
                                mousePosition.Y > ColorDisplay.AbsolutePosition.Y and
                                mousePosition.X < ColorDisplay.AbsolutePosition.X + ColorDisplay.AbsoluteSize.X and
                                mousePosition.Y < ColorDisplay.AbsolutePosition.Y + ColorDisplay.AbsoluteSize.Y) then
                            
                            pickerVisible = false
                            PickerPopup.Visible = false
                        end
                    end
                end)
                
                return {
                    Frame = ColorPickerFrame,
                    SetValue = function(self, color)
                        selectedColor = color
                        hue, saturation, value = RGBToHSV(color)
                        ColorDisplay.BackgroundColor3 = color
                        ColorPanel.BackgroundColor3 = HSVToRGB(hue, 1, 1)
                        UpdateSelectors()
                        
                        if callback then
                            callback(color)
                        end
                    end,
                    GetValue = function(self)
                        return selectedColor
                    end
                }
            end
            
            return Section
        end
        
        return Tab
    end
    
    -- Add notification system
    function Window:Notify(title, text, duration)
        title = title or "Notification"
        text = text or ""
        duration = duration or 5
        
        -- Create notification
        local Notification = Instance.new("Frame")
        Notification.Name = "Notification"
        Notification.Size = UDim2.new(0, 250, 0, 80)
        Notification.Position = UDim2.new(1, -260, 1, 10)
        Notification.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Notification.BorderSizePixel = 0
        Notification.AnchorPoint = Vector2.new(0, 1)
        Notification.Parent = ScreenGui
        
        local NotificationCorner = Instance.new("UICorner")
        NotificationCorner.CornerRadius = UDim.new(0, 4)
        NotificationCorner.Parent = Notification
        
        local NotificationTitle = Instance.new("TextLabel")
        NotificationTitle.Name = "Title"
        NotificationTitle.Size = UDim2.new(1, -10, 0, 25)
        NotificationTitle.Position = UDim2.new(0, 5, 0, 5)
        NotificationTitle.BackgroundTransparency = 1
        NotificationTitle.Text = title
        NotificationTitle.Font = Config.Font
        NotificationTitle.TextSize = 16
        NotificationTitle.TextColor3 = Config.AccentColor
        NotificationTitle.TextXAlignment = Enum.TextXAlignment.Left
        NotificationTitle.Parent = Notification
        
        local NotificationText = Instance.new("TextLabel")
        NotificationText.Name = "Text"
        NotificationText.Size = UDim2.new(1, -10, 1, -40)
        NotificationText.Position = UDim2.new(0, 5, 0, 30)
        NotificationText.BackgroundTransparency = 1
        NotificationText.Text = text
        NotificationText.Font = Config.Font
        NotificationText.TextSize = 14
        NotificationText.TextColor3 = Config.TextColor
        NotificationText.TextXAlignment = Enum.TextXAlignment.Left
        NotificationText.TextYAlignment = Enum.TextYAlignment.Top
        NotificationText.TextWrapped = true
        NotificationText.Parent = Notification
        
        -- Animate notification
        Notification.Position = UDim2.new(1, 10, 1, -10)
        TweenService:Create(Notification, 
            TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), 
            {Position = UDim2.new(1, -10, 1, -10)}
        ):Play()
        
        -- Destroy notification after duration
        task.delay(duration, function()
            TweenService:Create(Notification, 
                TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), 
                {Position = UDim2.new(1, 10, 1, -10)}
            ):Play()
            
            task.delay(0.5, function()
                Notification:Destroy()
            end)
        end)
        
        return Notification
    end
    
    -- Add theme customization
    function Window:SetTheme(theme)
        if theme.MainColor then
            Config.MainColor = theme.MainColor
            MainFrame.BackgroundColor3 = theme.MainColor
        end
        
        if theme.AccentColor then
            Config.AccentColor = theme.AccentColor
            TitleBar.BackgroundColor3 = theme.AccentColor
            TitleBarFix.BackgroundColor3 = theme.AccentColor
        end
        
        if theme.TextColor then
            Config.TextColor = theme.TextColor
            TitleText.TextColor3 = theme.TextColor
            CloseButton.TextColor3 = theme.TextColor
        end
        
        if theme.Font then
            Config.Font = theme.Font
        end
    end
    
    return Window
end

return CryzenHub
