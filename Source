--[[
    CryzenHub UI Library v1.0.0 - Orion Inspired
    A premium UI library inspired by Orion UI with CryzenHub enhancements
    Created by CryzenHub
    
    NEW IN v1.0.0:
    - Complete redesign inspired by Orion UI
    - Modern card-based interface
    - Enhanced animations and transitions
    - Improved mobile compatibility
    - Better performance optimization
    - New notification system
    - Enhanced theme support
    - Improved accessibility
]]

local CryzenHub = {
    Version = "1.0.0",
    Build = "Orion-Inspired",
    Windows = {},
    Themes = {},
    Flags = {},
    Connections = {},
    Utils = {},
    Notifications = {},
    Debug = {
        Enabled = false,
        Logs = {}
    }
}

-- Services
local Services = {
    RunService = game:GetService("RunService"),
    TweenService = game:GetService("TweenService"),
    UserInputService = game:GetService("UserInputService"),
    TextService = game:GetService("TextService"),
    HttpService = game:GetService("HttpService"),
    Players = game:GetService("Players"),
    CoreGui = game:GetService("CoreGui"),
    Lighting = game:GetService("Lighting"),
    SoundService = game:GetService("SoundService"),
    GuiService = game:GetService("GuiService")
}

-- Variables
local Player = Services.Players.LocalPlayer
local Mouse = Player:GetMouse()
local Camera = workspace.CurrentCamera
local ViewportSize = Camera.ViewportSize

-- Debug System
function CryzenHub.Utils.DebugLog(message, level)
    level = level or "Info"
    local timestamp = os.date("%H:%M:%S")
    local logEntry = string.format("[%s] [CryzenHub] [%s] %s", timestamp, level, message)
    
    table.insert(CryzenHub.Debug.Logs, logEntry)
    
    if CryzenHub.Debug.Enabled then
        print(logEntry)
    end
    
    if #CryzenHub.Debug.Logs > 100 then
        table.remove(CryzenHub.Debug.Logs, 1)
    end
end

-- Safe Function Execution
function CryzenHub.Utils.SafeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        CryzenHub.Utils.DebugLog("Error in function call: " .. tostring(result), "Error")
        return nil
    end
    return result
end

-- Orion-Inspired Theme System
CryzenHub.Themes = {
    Default = {
        Name = "Default",
        
        -- Main Colors
        Main = Color3.fromRGB(25, 25, 25),
        Second = Color3.fromRGB(40, 40, 40),
        Stroke = Color3.fromRGB(60, 60, 60),
        Divider = Color3.fromRGB(60, 60, 60),
        Text = Color3.fromRGB(240, 240, 240),
        TextDark = Color3.fromRGB(180, 180, 180),
        
        -- Accent Colors
        SchemeColor = Color3.fromRGB(86, 120, 233),
        Background = Color3.fromRGB(30, 30, 30),
        Header = Color3.fromRGB(35, 35, 35),
        
        -- Status Colors
        Success = Color3.fromRGB(68, 206, 84),
        Warning = Color3.fromRGB(255, 184, 0),
        Error = Color3.fromRGB(255, 92, 92),
        Info = Color3.fromRGB(86, 120, 233),
        
        -- Effects
        DropShadow = Color3.fromRGB(0, 0, 0),
        CornerRadius = 6,
        StrokeThickness = 1,
        
        -- Typography
        Font = Enum.Font.Gotham,
        FontSemiBold = Enum.Font.GothamSemibold,
        FontBold = Enum.Font.GothamBold,
        
        TextSize = {
            Small = 12,
            Medium = 14,
            Large = 16,
            XLarge = 18
        },
        
        -- Spacing
        Padding = {
            Small = 4,
            Medium = 8,
            Large = 12,
            XLarge = 16
        }
    },
    
    Ocean = {
        Name = "Ocean",
        Main = Color3.fromRGB(15, 25, 35),
        Second = Color3.fromRGB(25, 35, 50),
        Stroke = Color3.fromRGB(45, 55, 70),
        Divider = Color3.fromRGB(45, 55, 70),
        Text = Color3.fromRGB(240, 245, 250),
        TextDark = Color3.fromRGB(180, 190, 200),
        SchemeColor = Color3.fromRGB(52, 152, 219),
        Background = Color3.fromRGB(20, 30, 40),
        Header = Color3.fromRGB(30, 40, 55),
        Success = Color3.fromRGB(46, 204, 113),
        Warning = Color3.fromRGB(241, 196, 15),
        Error = Color3.fromRGB(231, 76, 60),
        Info = Color3.fromRGB(52, 152, 219)
    },
    
    Dark = {
        Name = "Dark",
        Main = Color3.fromRGB(10, 10, 10),
        Second = Color3.fromRGB(20, 20, 20),
        Stroke = Color3.fromRGB(40, 40, 40),
        Divider = Color3.fromRGB(40, 40, 40),
        Text = Color3.fromRGB(255, 255, 255),
        TextDark = Color3.fromRGB(200, 200, 200),
        SchemeColor = Color3.fromRGB(142, 68, 173),
        Background = Color3.fromRGB(15, 15, 15),
        Header = Color3.fromRGB(25, 25, 25),
        Success = Color3.fromRGB(39, 174, 96),
        Warning = Color3.fromRGB(230, 126, 34),
        Error = Color3.fromRGB(192, 57, 43),
        Info = Color3.fromRGB(142, 68, 173)
    }
}

-- Set default theme
CryzenHub.CurrentTheme = CryzenHub.Themes.Default

-- Utility Functions
function CryzenHub.Utils.Tween(object, properties, duration, style, direction, callback)
    if not object or not Services.TweenService then
        return
    end
    
    return CryzenHub.Utils.SafeCall(function()
        local tweenInfo = TweenInfo.new(
            duration or 0.25,
            style or Enum.EasingStyle.Quad,
            direction or Enum.EasingDirection.Out
        )
        
        local tween = Services.TweenService:Create(object, tweenInfo, properties)
        tween:Play()
        
        if callback then
            tween.Completed:Connect(callback)
        end
        
        return tween
    end)
end

function CryzenHub.Utils.CreateCorner(parent, size)
    if not parent then return end
    
    return CryzenHub.Utils.SafeCall(function()
        local corner = parent:FindFirstChild("UICorner")
        if not corner then
            corner = Instance.new("UICorner")
            corner.Parent = parent
        end
        corner.CornerRadius = UDim.new(0, size or CryzenHub.CurrentTheme.CornerRadius)
        return corner
    end)
end

function CryzenHub.Utils.CreateStroke(parent, color, thickness, transparency)
    if not parent then return end
    
    return CryzenHub.Utils.SafeCall(function()
        local stroke = parent:FindFirstChild("UIStroke")
        if not stroke then
            stroke = Instance.new("UIStroke")
            stroke.Parent = parent
        end
        stroke.Color = color or CryzenHub.CurrentTheme.Stroke
        stroke.Thickness = thickness or CryzenHub.CurrentTheme.StrokeThickness
        stroke.Transparency = transparency or 0
        stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        return stroke
    end)
end

function CryzenHub.Utils.CreateDropShadow(parent, size, transparency)
    if not parent then return end
    
    return CryzenHub.Utils.SafeCall(function()
        local shadow = parent:FindFirstChild("DropShadow")
        if not shadow then
            shadow = Instance.new("ImageLabel")
            shadow.Name = "DropShadow"
            shadow.Parent = parent
        end
        
        shadow.AnchorPoint = Vector2.new(0.5, 0.5)
        shadow.BackgroundTransparency = 1
        shadow.Position = UDim2.new(0.5, 0, 0.5, 1)
        shadow.Size = UDim2.new(1, size or 30, 1, size or 30)
        shadow.Image = "rbxassetid://6014261993"
        shadow.ImageColor3 = CryzenHub.CurrentTheme.DropShadow
        shadow.ImageTransparency = transparency or 0.5
        shadow.ScaleType = Enum.ScaleType.Slice
        shadow.SliceCenter = Rect.new(49, 49, 450, 450)
        shadow.ZIndex = (parent.ZIndex or 1) - 1
        
        return shadow
    end)
end

function CryzenHub.Utils.CreateRipple(parent, position, color)
    if not parent then return end
    
    return CryzenHub.Utils.SafeCall(function()
        local ripple = Instance.new("Frame")
        ripple.Name = "Ripple"
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.BackgroundColor3 = color or CryzenHub.CurrentTheme.SchemeColor
        ripple.BackgroundTransparency = 0.8
        ripple.BorderSizePixel = 0
        ripple.Position = UDim2.new(0, position.X - parent.AbsolutePosition.X, 0, position.Y - parent.AbsolutePosition.Y)
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.ZIndex = parent.ZIndex + 1
        ripple.Parent = parent
        
        CryzenHub.Utils.CreateCorner(ripple, 999)
        
        local maxSize = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
        
        CryzenHub.Utils.Tween(ripple, {
            Size = UDim2.new(0, maxSize, 0, maxSize),
            BackgroundTransparency = 1
        }, 0.5, nil, nil, function()
            ripple:Destroy()
        end)
        
        return ripple
    end)
end

function CryzenHub.Utils.GetIcon(iconName)
    local icons = {
        Home = "rbxassetid://10734884548",
        Settings = "rbxassetid://10734886004",
        Search = "rbxassetid://10734885081",
        User = "rbxassetid://10734884910",
        Lock = "rbxassetid://10734884925",
        Unlock = "rbxassetid://10734884925",
        Eye = "rbxassetid://10734884748",
        EyeOff = "rbxassetid://10734884748",
        Check = "rbxassetid://10734884606",
        X = "rbxassetid://10734884871",
        Plus = "rbxassetid://10734884982",
        Minus = "rbxassetid://10734884982",
        ChevronDown = "rbxassetid://10734884517",
        ChevronUp = "rbxassetid://10734884517",
        ChevronLeft = "rbxassetid://10734884517",
        ChevronRight = "rbxassetid://10734884517",
        Info = "rbxassetid://10734884748",
        Warning = "rbxassetid://10734885081",
        Error = "rbxassetid://10734884871",
        Success = "rbxassetid://10734884606"
    }
    
    return icons[iconName] or icons.Home
end

-- Screen GUI Creation
function CryzenHub.Utils.CreateScreenGui(name)
    return CryzenHub.Utils.SafeCall(function()
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = name or "CryzenHubOrion"
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        screenGui.DisplayOrder = 100
        screenGui.ResetOnSpawn = false
        
        local success = false
        
        -- Try CoreGui first
        pcall(function()
            if syn and syn.protect_gui then
                syn.protect_gui(screenGui)
            end
            screenGui.Parent = Services.CoreGui
            success = true
        end)
        
        -- Fallback to PlayerGui
        if not success and Player then
            screenGui.Parent = Player:WaitForChild("PlayerGui")
        end
        
        CryzenHub.Utils.DebugLog("ScreenGui created: " .. screenGui.Name, "Info")
        return screenGui
    end)
end

-- Notification System
function CryzenHub:CreateNotification(config)
    config = config or {}
    
    local title = config.Title or "Notification"
    local content = config.Content or ""
    local image = config.Image
    local time = config.Time or 5
    local actions = config.Actions or {}
    
    -- Create notification ScreenGui
    local notifGui = CryzenHub.Utils.CreateScreenGui("CryzenNotification")
    if not notifGui then return end
    
    -- Notification container
    local container = Instance.new("Frame")
    container.Name = "NotificationContainer"
    container.Size = UDim2.new(0, 350, 0, 100)
    container.Position = UDim2.new(1, -370, 1, -120)
    container.BackgroundColor3 = CryzenHub.CurrentTheme.Second
    container.BorderSizePixel = 0
    container.Parent = notifGui
    
    CryzenHub.Utils.CreateCorner(container)
    CryzenHub.Utils.CreateStroke(container, CryzenHub.CurrentTheme.Stroke)
    CryzenHub.Utils.CreateDropShadow(container)
    
    -- Icon (if provided)
    if image then
        local icon = Instance.new("ImageLabel")
        icon.Name = "Icon"
        icon.Size = UDim2.new(0, 40, 0, 40)
        icon.Position = UDim2.new(0, 15, 0, 15)
        icon.BackgroundTransparency = 1
        icon.Image = image
        icon.Parent = container
        
        CryzenHub.Utils.CreateCorner(icon)
    end
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, image and -70 or -30, 0, 25)
    titleLabel.Position = UDim2.new(0, image and 65 or 15, 0, 15)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.Font = CryzenHub.CurrentTheme.FontSemiBold
    titleLabel.TextSize = CryzenHub.CurrentTheme.TextSize.Medium
    titleLabel.TextColor3 = CryzenHub.CurrentTheme.Text
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextYAlignment = Enum.TextYAlignment.Top
    titleLabel.Parent = container
    
    -- Content
    local contentLabel = Instance.new("TextLabel")
    contentLabel.Name = "Content"
    contentLabel.Size = UDim2.new(1, image and -70 or -30, 0, 20)
    contentLabel.Position = UDim2.new(0, image and 65 or 15, 0, 40)
    contentLabel.BackgroundTransparency = 1
    contentLabel.Text = content
    contentLabel.Font = CryzenHub.CurrentTheme.Font
    contentLabel.TextSize = CryzenHub.CurrentTheme.TextSize.Small
    contentLabel.TextColor3 = CryzenHub.CurrentTheme.TextDark
    contentLabel.TextXAlignment = Enum.TextXAlignment.Left
    contentLabel.TextYAlignment = Enum.TextYAlignment.Top
    contentLabel.TextWrapped = true
    contentLabel.Parent = container
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 20, 0, 20)
    closeButton.Position = UDim2.new(1, -25, 0, 5)
    closeButton.BackgroundTransparency = 1
    closeButton.Text = "✕"
    closeButton.Font = CryzenHub.CurrentTheme.Font
    closeButton.TextSize = 14
    closeButton.TextColor3 = CryzenHub.CurrentTheme.TextDark
    closeButton.Parent = container
    
    -- Progress bar
    local progressBar = Instance.new("Frame")
    progressBar.Name = "ProgressBar"
    progressBar.Size = UDim2.new(1, 0, 0, 2)
    progressBar.Position = UDim2.new(0, 0, 1, -2)
    progressBar.BackgroundColor3 = CryzenHub.CurrentTheme.SchemeColor
    progressBar.BorderSizePixel = 0
    progressBar.Parent = container
    
    -- Animation
    container.Position = UDim2.new(1, 0, 1, -120)
    CryzenHub.Utils.Tween(container, {Position = UDim2.new(1, -370, 1, -120)}, 0.3)
    
    -- Progress animation
    CryzenHub.Utils.Tween(progressBar, {Size = UDim2.new(0, 0, 0, 2)}, time)
    
    -- Auto close
    local closeNotification = function()
        CryzenHub.Utils.Tween(container, {Position = UDim2.new(1, 0, 1, -120)}, 0.3, nil, nil, function()
            notifGui:Destroy()
        end)
    end
    
    closeButton.MouseButton1Click:Connect(closeNotification)
    
    if time > 0 then
        task.delay(time, closeNotification)
    end
    
    return {
        Close = closeNotification,
        Container = container
    }
end

-- Main Window Creation
function CryzenHub:MakeWindow(config)
    config = config or {}
    
    local windowName = config.Name or "CryzenHub"
    local hidePremium = config.HidePremium or false
    local saveConfig = config.SaveConfig ~= false
    local configFolder = config.ConfigFolder or "CryzenHub"
    local introEnabled = config.IntroEnabled ~= false
    local introText = config.IntroText or "Welcome to CryzenHub"
    local introIcon = config.IntroIcon
    local icon = config.Icon
    
    CryzenHub.Utils.DebugLog("Creating window: " .. windowName, "Info")
    
    -- Create main ScreenGui
    local screenGui = CryzenHub.Utils.CreateScreenGui("CryzenHubMain")
    if not screenGui then
        error("Failed to create ScreenGui")
    end
    
    local window = {
        Name = windowName,
        ScreenGui = screenGui,
        Tabs = {},
        Flags = {},
        SaveConfig = saveConfig,
        ConfigFolder = configFolder
    }
    
    local theme = CryzenHub.CurrentTheme
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 550, 0, 400)
    mainFrame.Position = UDim2.new(0.5, -275, 0.5, -200)
    mainFrame.BackgroundColor3 = theme.Main
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = screenGui
    window.MainFrame = mainFrame
    
    CryzenHub.Utils.CreateCorner(mainFrame)
    CryzenHub.Utils.CreateStroke(mainFrame, theme.Stroke)
    CryzenHub.Utils.CreateDropShadow(mainFrame)
    
    -- Top Bar
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Size = UDim2.new(1, 0, 0, 50)
    topBar.BackgroundColor3 = theme.Header
    topBar.BorderSizePixel = 0
    topBar.Parent = mainFrame
    
    CryzenHub.Utils.CreateCorner(topBar)
    CryzenHub.Utils.CreateStroke(topBar, theme.Stroke, 1, 0.5)
    
    -- Window Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -100, 1, 0)
    titleLabel.Position = UDim2.new(0, icon and 60 or 20, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = windowName
    titleLabel.Font = theme.FontSemiBold
    titleLabel.TextSize = theme.TextSize.Large
    titleLabel.TextColor3 = theme.Text
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = topBar
    
    -- Window Icon
    if icon then
        local iconLabel = Instance.new("ImageLabel")
        iconLabel.Name = "Icon"
        iconLabel.Size = UDim2.new(0, 30, 0, 30)
        iconLabel.Position = UDim2.new(0, 15, 0.5, -15)
        iconLabel.BackgroundTransparency = 1
        iconLabel.Image = icon
        iconLabel.Parent = topBar
        
        CryzenHub.Utils.CreateCorner(iconLabel)
    end
    
    -- Premium Badge
    if not hidePremium then
        local premiumBadge = Instance.new("Frame")
        premiumBadge.Name = "PremiumBadge"
        premiumBadge.Size = UDim2.new(0, 60, 0, 20)
        premiumBadge.Position = UDim2.new(1, -80, 0.5, -10)
        premiumBadge.BackgroundColor3 = theme.SchemeColor
        premiumBadge.BorderSizePixel = 0
        premiumBadge.Parent = topBar
        
        CryzenHub.Utils.CreateCorner(premiumBadge, 10)
        
        local premiumText = Instance.new("TextLabel")
        premiumText.Size = UDim2.new(1, 0, 1, 0)
        premiumText.BackgroundTransparency = 1
        premiumText.Text = "PREMIUM"
        premiumText.Font = theme.FontBold
        premiumText.TextSize = 10
        premiumText.TextColor3 = Color3.fromRGB(255, 255, 255)
        premiumText.Parent = premiumBadge
    end
    
    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -40, 0.5, -15)
    closeButton.BackgroundColor3 = theme.Second
    closeButton.BorderSizePixel = 0
    closeButton.Text = ""
    closeButton.Parent = topBar
    
    CryzenHub.Utils.CreateCorner(closeButton)
    CryzenHub.Utils.CreateStroke(closeButton, theme.Stroke)
    
    local closeIcon = Instance.new("TextLabel")
    closeIcon.Size = UDim2.new(1, 0, 1, 0)
    closeIcon.BackgroundTransparency = 1
    closeIcon.Text = "✕"
    closeIcon.Font = theme.Font
    closeIcon.TextSize = 16
    closeIcon.TextColor3 = theme.Text
    closeIcon.Parent = closeButton
    
    -- Tab Container
    local tabContainer = Instance.new("Frame")
    tabContainer.Name = "TabContainer"
    tabContainer.Size = UDim2.new(0, 150, 1, -50)
    tabContainer.Position = UDim2.new(0, 0, 0, 50)
    tabContainer.BackgroundColor3 = theme.Second
    tabContainer.BorderSizePixel = 0
    tabContainer.Parent = mainFrame
    window.TabContainer = tabContainer
    
    local tabContainerStroke = Instance.new("Frame")
    tabContainerStroke.Size = UDim2.new(0, 1, 1, 0)
    tabContainerStroke.Position = UDim2.new(1, 0, 0, 0)
    tabContainerStroke.BackgroundColor3 = theme.Stroke
    tabContainerStroke.BorderSizePixel = 0
    tabContainerStroke.Parent = tabContainer
    
    -- Tab List
    local tabList = Instance.new("ScrollingFrame")
    tabList.Name = "TabList"
    tabList.Size = UDim2.new(1, 0, 1, 0)
    tabList.BackgroundTransparency = 1
    tabList.BorderSizePixel = 0
    tabList.ScrollBarThickness = 4
    tabList.ScrollBarImageColor3 = theme.SchemeColor
    tabList.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabList.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tabList.Parent = tabContainer
    
    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabListLayout.Padding = UDim.new(0, 2)
    tabListLayout.Parent = tabList
    
    local tabListPadding = Instance.new("UIPadding")
    tabListPadding.PaddingAll = UDim.new(0, 8)
    tabListPadding.Parent = tabList
    
    -- Content Container
    local contentContainer = Instance.new("Frame")
    contentContainer.Name = "ContentContainer"
    contentContainer.Size = UDim2.new(1, -150, 1, -50)
    contentContainer.Position = UDim2.new(0, 150, 0, 50)
    contentContainer.BackgroundTransparency = 1
    contentContainer.BorderSizePixel = 0
    contentContainer.Parent = mainFrame
    window.ContentContainer = contentContainer
    
    -- Window Functions
    function window:MakeTab(config)
        config = config or {}
        local tabName = config.Name or "Tab"
        local tabIcon = config.Icon or CryzenHub.Utils.GetIcon("Home")
        local tabPremiumOnly = config.PremiumOnly or false
        
        CryzenHub.Utils.DebugLog("Creating tab: " .. tabName, "Info")
        
        local tab = {
            Name = tabName,
            Icon = tabIcon,
            PremiumOnly = tabPremiumOnly,
            Sections = {},
            Elements = {}
        }
        
        -- Tab Button
        local tabButton = Instance.new("TextButton")
        tabButton.Name = tabName .. "Button"
        tabButton.Size = UDim2.new(1, 0, 0, 40)
        tabButton.BackgroundColor3 = theme.Second
        tabButton.BackgroundTransparency = 1
        tabButton.BorderSizePixel = 0
        tabButton.Text = ""
        tabButton.Parent = tabList
        tab.Button = tabButton
        
        CryzenHub.Utils.CreateCorner(tabButton)
        
        -- Tab Icon
        local tabIconLabel = Instance.new("ImageLabel")
        tabIconLabel.Name = "Icon"
        tabIconLabel.Size = UDim2.new(0, 20, 0, 20)
        tabIconLabel.Position = UDim2.new(0, 10, 0.5, -10)
        tabIconLabel.BackgroundTransparency = 1
        tabIconLabel.Image = tabIcon
        tabIconLabel.ImageColor3 = theme.TextDark
        tabIconLabel.Parent = tabButton
        
        -- Tab Label
        local tabLabel = Instance.new("TextLabel")
        tabLabel.Name = "Label"
        tabLabel.Size = UDim2.new(1, -45, 1, 0)
        tabLabel.Position = UDim2.new(0, 40, 0, 0)
        tabLabel.BackgroundTransparency = 1
        tabLabel.Text = tabName
        tabLabel.Font = theme.Font
        tabLabel.TextSize = theme.TextSize.Medium
        tabLabel.TextColor3 = theme.TextDark
        tabLabel.TextXAlignment = Enum.TextXAlignment.Left
        tabLabel.Parent = tabButton
        
        -- Premium Indicator
        if tabPremiumOnly then
            local premiumIndicator = Instance.new("Frame")
            premiumIndicator.Size = UDim2.new(0, 6, 0, 6)
            premiumIndicator.Position = UDim2.new(1, -15, 0.5, -3)
            premiumIndicator.BackgroundColor3 = theme.SchemeColor
            premiumIndicator.BorderSizePixel = 0
            premiumIndicator.Parent = tabButton
            
            CryzenHub.Utils.CreateCorner(premiumIndicator, 3)
        end
        
        -- Tab Content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = tabName .. "Content"
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.ScrollBarThickness = 4
        tabContent.ScrollBarImageColor3 = theme.SchemeColor
        tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        tabContent.Visible = false
        tabContent.Parent = contentContainer
        tab.Content = tabContent
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, theme.Padding.Large)
        contentLayout.Parent = tabContent
        
        local contentPadding = Instance.new("UIPadding")
        contentPadding.PaddingAll = UDim.new(0, theme.Padding.Large)
        contentPadding.Parent = tabContent
        
        -- Tab Selection
        local function selectTab()
            -- Deselect all tabs
            for _, otherTab in pairs(window.Tabs) do
                otherTab.Button.BackgroundTransparency = 1
                otherTab.Button.Icon.ImageColor3 = theme.TextDark
                otherTab.Button.Label.TextColor3 = theme.TextDark
                otherTab.Content.Visible = false
            end
            
            -- Select this tab
            tabButton.BackgroundTransparency = 0
            tabIconLabel.ImageColor3 = theme.SchemeColor
            tabLabel.TextColor3 = theme.Text
            tabContent.Visible = true
            
            CryzenHub.Utils.DebugLog("Selected tab: " .. tabName, "Info")
        end
        
        tabButton.MouseButton1Click:Connect(function()
            CryzenHub.Utils.CreateRipple(tabButton, Services.UserInputService:GetMouseLocation())
            selectTab()
        end)
        
        -- Hover effects
        tabButton.MouseEnter:Connect(function()
            if tabContent.Visible then return end
            CryzenHub.Utils.Tween(tabButton, {BackgroundTransparency = 0.8}, 0.2)
        end)
        
        tabButton.MouseLeave:Connect(function()
            if tabContent.Visible then return end
            CryzenHub.Utils.Tween(tabButton, {BackgroundTransparency = 1}, 0.2)
        end)
        
        -- Section creation
        function tab:AddSection(config)
            config = config or {}
            local sectionName = config.Name or "Section"
            
            local section = {
                Name = sectionName,
                Elements = {}
            }
            
            local sectionFrame = Instance.new("Frame")
            sectionFrame.Name = sectionName .. "Section"
            sectionFrame.Size = UDim2.new(1, 0, 0, 0)
            sectionFrame.BackgroundTransparency = 1
            sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
            sectionFrame.Parent = tabContent
            section.Frame = sectionFrame
            
            local sectionLayout = Instance.new("UIListLayout")
            sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
            sectionLayout.Padding = UDim.new(0, theme.Padding.Medium)
            sectionLayout.Parent = sectionFrame
            
            -- Section Header
            if sectionName ~= "" then
                local sectionHeader = Instance.new("TextLabel")
                sectionHeader.Name = "SectionHeader"
                sectionHeader.Size = UDim2.new(1, 0, 0, 25)
                sectionHeader.BackgroundTransparency = 1
                sectionHeader.Text = sectionName
                sectionHeader.Font = theme.FontSemiBold
                sectionHeader.TextSize = theme.TextSize.Medium
                sectionHeader.TextColor3 = theme.Text
                sectionHeader.TextXAlignment = Enum.TextXAlignment.Left
                sectionHeader.Parent = sectionFrame
            end
            
            -- Element creation functions
            function section:AddLabel(config)
                config = config or {}
                local text = config.Text or "Label"
                
                local element = {
                    Type = "Label",
                    Text = text
                }
                
                local labelFrame = Instance.new("Frame")
                labelFrame.Name = "LabelFrame"
                labelFrame.Size = UDim2.new(1, 0, 0, 25)
                labelFrame.BackgroundTransparency = 1
                labelFrame.Parent = sectionFrame
                element.Frame = labelFrame
                
                local label = Instance.new("TextLabel")
                label.Name = "Label"
                label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.Text = text
                label.Font = theme.Font
                label.TextSize = theme.TextSize.Medium
                label.TextColor3 = theme.Text
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.TextWrapped = true
                label.RichText = true
                label.Parent = labelFrame
                element.Label = label
                
                function element:Set(newText)
                    self.Text = newText
                    label.Text = newText
                end
                
                table.insert(section.Elements, element)
                return element
            end
            
            function section:AddButton(config)
                config = config or {}
                local name = config.Name or "Button"
                local callback = config.Callback or function() end
                
                local element = {
                    Type = "Button",
                    Name = name,
                    Callback = callback
                }
                
                local buttonFrame = Instance.new("Frame")
                buttonFrame.Name = "ButtonFrame"
                buttonFrame.Size = UDim2.new(1, 0, 0, 35)
                buttonFrame.BackgroundTransparency = 1
                buttonFrame.Parent = sectionFrame
                element.Frame = buttonFrame
                
                local button = Instance.new("TextButton")
                button.Name = "Button"
                button.Size = UDim2.new(1, 0, 1, 0)
                button.BackgroundColor3 = theme.Second
                button.BorderSizePixel = 0
                button.Text = name
                button.Font = theme.FontSemiBold
                button.TextSize = theme.TextSize.Medium
                button.TextColor3 = theme.Text
                button.Parent = buttonFrame
                element.Button = button
                
                CryzenHub.Utils.CreateCorner(button)
                CryzenHub.Utils.CreateStroke(button, theme.Stroke)
                
                button.MouseButton1Click:Connect(function()
                    CryzenHub.Utils.CreateRipple(button, Services.UserInputService:GetMouseLocation())
                    callback()
                end)
                
                button.MouseEnter:Connect(function()
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = theme.Stroke}, 0.2)
                end)
                
                button.MouseLeave:Connect(function()
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = theme.Second}, 0.2)
                end)
                
                table.insert(section.Elements, element)
                return element
            end
            
            function section:AddToggle(config)
                config = config or {}
                local name = config.Name or "Toggle"
                local default = config.Default or false
                local callback = config.Callback or function() end
                local flag = config.Flag or name
                
                local element = {
                    Type = "Toggle",
                    Name = name,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                window.Flags[flag] = default
                
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Name = "ToggleFrame"
                toggleFrame.Size = UDim2.new(1, 0, 0, 35)
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.Parent = sectionFrame
                element.Frame = toggleFrame
                
                local toggleButton = Instance.new("TextButton")
                toggleButton.Name = "ToggleButton"
                toggleButton.Size = UDim2.new(1, 0, 1, 0)
                toggleButton.BackgroundColor3 = theme.Second
                toggleButton.BorderSizePixel = 0
                toggleButton.Text = ""
                toggleButton.Parent = toggleFrame
                element.Button = toggleButton
                
                CryzenHub.Utils.CreateCorner(toggleButton)
                CryzenHub.Utils.CreateStroke(toggleButton, theme.Stroke)
                
                local toggleLabel = Instance.new("TextLabel")
                toggleLabel.Name = "Label"
                toggleLabel.Size = UDim2.new(1, -50, 1, 0)
                toggleLabel.Position = UDim2.new(0, 15, 0, 0)
                toggleLabel.BackgroundTransparency = 1
                toggleLabel.Text = name
                toggleLabel.Font = theme.Font
                toggleLabel.TextSize = theme.TextSize.Medium
                toggleLabel.TextColor3 = theme.Text
                toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                toggleLabel.Parent = toggleButton
                
                local toggleIndicator = Instance.new("Frame")
                toggleIndicator.Name = "Indicator"
                toggleIndicator.Size = UDim2.new(0, 20, 0, 20)
                toggleIndicator.Position = UDim2.new(1, -30, 0.5, -10)
                toggleIndicator.BackgroundColor3 = default and theme.SchemeColor or theme.Stroke
                toggleIndicator.BorderSizePixel = 0
                toggleIndicator.Parent = toggleButton
                
                CryzenHub.Utils.CreateCorner(toggleIndicator, 10)
                
                local checkmark = Instance.new("TextLabel")
                checkmark.Size = UDim2.new(1, 0, 1, 0)
                checkmark.BackgroundTransparency = 1
                checkmark.Text = default and "✓" or ""
                checkmark.Font = theme.FontBold
                checkmark.TextSize = 14
                checkmark.TextColor3 = Color3.fromRGB(255, 255, 255)
                checkmark.Parent = toggleIndicator
                
                local function updateToggle(value)
                    element.Value = value
                    window.Flags[flag] = value
                    
                    CryzenHub.Utils.Tween(toggleIndicator, {
                        BackgroundColor3 = value and theme.SchemeColor or theme.Stroke
                    }, 0.2)
                    
                    checkmark.Text = value and "✓" or ""
                    
                    callback(value)
                end
                
                toggleButton.MouseButton1Click:Connect(function()
                    CryzenHub.Utils.CreateRipple(toggleButton, Services.UserInputService:GetMouseLocation())
                    updateToggle(not element.Value)
                end)
                
                toggleButton.MouseEnter:Connect(function()
                    CryzenHub.Utils.Tween(toggleButton, {BackgroundColor3 = theme.Stroke}, 0.2)
                end)
                
                toggleButton.MouseLeave:Connect(function()
                    CryzenHub.Utils.Tween(toggleButton, {BackgroundColor3 = theme.Second}, 0.2)
                end)
                
                function element:Set(value)
                    updateToggle(value)
                end
                
                table.insert(section.Elements, element)
                return element
            end
            
            function section:AddSlider(config)
                config = config or {}
                local name = config.Name or "Slider"
                local min = config.Min or 0
                local max = config.Max or 100
                local increment = config.Increment or 1
                local default = config.Default or min
                local callback = config.Callback or function() end
                local flag = config.Flag or name
                local valueName = config.ValueName or ""
                
                local element = {
                    Type = "Slider",
                    Name = name,
                    Min = min,
                    Max = max,
                    Increment = increment,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                window.Flags[flag] = default
                
                local sliderFrame = Instance.new("Frame")
                sliderFrame.Name = "SliderFrame"
                sliderFrame.Size = UDim2.new(1, 0, 0, 55)
                sliderFrame.BackgroundTransparency = 1
                sliderFrame.Parent = sectionFrame
                element.Frame = sliderFrame
                
                local sliderContainer = Instance.new("Frame")
                sliderContainer.Name = "Container"
                sliderContainer.Size = UDim2.new(1, 0, 1, 0)
                sliderContainer.BackgroundColor3 = theme.Second
                sliderContainer.BorderSizePixel = 0
                sliderContainer.Parent = sliderFrame
                
                CryzenHub.Utils.CreateCorner(sliderContainer)
                CryzenHub.Utils.CreateStroke(sliderContainer, theme.Stroke)
                
                local sliderLabel = Instance.new("TextLabel")
                sliderLabel.Name = "Label"
                sliderLabel.Size = UDim2.new(1, -80, 0, 20)
                sliderLabel.Position = UDim2.new(0, 15, 0, 8)
                sliderLabel.BackgroundTransparency = 1
                sliderLabel.Text = name
                sliderLabel.Font = theme.Font
                sliderLabel.TextSize = theme.TextSize.Medium
                sliderLabel.TextColor3 = theme.Text
                sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                sliderLabel.Parent = sliderContainer
                
                local sliderValue = Instance.new("TextLabel")
                sliderValue.Name = "Value"
                sliderValue.Size = UDim2.new(0, 60, 0, 20)
                sliderValue.Position = UDim2.new(1, -75, 0, 8)
                sliderValue.BackgroundTransparency = 1
                sliderValue.Text = tostring(default) .. valueName
                sliderValue.Font = theme.FontSemiBold
                sliderValue.TextSize = theme.TextSize.Medium
                sliderValue.TextColor3 = theme.SchemeColor
                sliderValue.TextXAlignment = Enum.TextXAlignment.Right
                sliderValue.Parent = sliderContainer
                
                local sliderTrack = Instance.new("Frame")
                sliderTrack.Name = "Track"
                sliderTrack.Size = UDim2.new(1, -30, 0, 4)
                sliderTrack.Position = UDim2.new(0, 15, 1, -15)
                sliderTrack.BackgroundColor3 = theme.Stroke
                sliderTrack.BorderSizePixel = 0
                sliderTrack.Parent = sliderContainer
                
                CryzenHub.Utils.CreateCorner(sliderTrack, 2)
                
                local sliderFill = Instance.new("Frame")
                sliderFill.Name = "Fill"
                sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                sliderFill.BackgroundColor3 = theme.SchemeColor
                sliderFill.BorderSizePixel = 0
                sliderFill.Parent = sliderTrack
                
                CryzenHub.Utils.CreateCorner(sliderFill, 2)
                
                local sliderKnob = Instance.new("Frame")
                sliderKnob.Name = "Knob"
                sliderKnob.Size = UDim2.new(0, 12, 0, 12)
                sliderKnob.Position = UDim2.new((default - min) / (max - min), -6, 0.5, -6)
                sliderKnob.BackgroundColor3 = theme.SchemeColor
                sliderKnob.BorderSizePixel = 0
                sliderKnob.Parent = sliderTrack
                
                CryzenHub.Utils.CreateCorner(sliderKnob, 6)
                
                local isDragging = false
                
                local function updateSlider(value)
                    value = math.clamp(value, min, max)
                    value = math.floor(value / increment) * increment
                    
                    element.Value = value
                    window.Flags[flag] = value
                    
                    local percent = (value - min) / (max - min)
                    
                    CryzenHub.Utils.Tween(sliderFill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
                    CryzenHub.Utils.Tween(sliderKnob, {Position = UDim2.new(percent, -6, 0.5, -6)}, 0.1)
                    
                    sliderValue.Text = tostring(value) .. valueName
                    
                    callback(value)
                end
                
                local function getSliderValue(input)
                    local percent = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
                    return min + (max - min) * percent
                end
                
                sliderTrack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = true
                        updateSlider(getSliderValue(input))
                    end
                end)
                
                Services.UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = false
                    end
                end)
                
                Services.UserInputService.InputChanged:Connect(function(input)
                    if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateSlider(getSliderValue(input))
                    end
                end)
                
                function element:Set(value)
                    updateSlider(value)
                end
                
                table.insert(section.Elements, element)
                return element
            end
            
            function section:AddDropdown(config)
                config = config or {}
                local name = config.Name or "Dropdown"
                local options = config.Options or {}
                local default = config.Default
                local callback = config.Callback or function() end
                local flag = config.Flag or name
                
                local element = {
                    Type = "Dropdown",
                    Name = name,
                    Options = options,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                window.Flags[flag] = default
                
                local dropdownFrame = Instance.new("Frame")
                dropdownFrame.Name = "DropdownFrame"
                dropdownFrame.Size = UDim2.new(1, 0, 0, 35)
                dropdownFrame.BackgroundTransparency = 1
                dropdownFrame.Parent = sectionFrame
                element.Frame = dropdownFrame
                
                local dropdownButton = Instance.new("TextButton")
                dropdownButton.Name = "DropdownButton"
                dropdownButton.Size = UDim2.new(1, 0, 1, 0)
                dropdownButton.BackgroundColor3 = theme.Second
                dropdownButton.BorderSizePixel = 0
                dropdownButton.Text = ""
                dropdownButton.Parent = dropdownFrame
                element.Button = dropdownButton
                
                CryzenHub.Utils.CreateCorner(dropdownButton)
                CryzenHub.Utils.CreateStroke(dropdownButton, theme.Stroke)
                
                local dropdownLabel = Instance.new("TextLabel")
                dropdownLabel.Name = "Label"
                dropdownLabel.Size = UDim2.new(1, -30, 1, 0)
                dropdownLabel.Position = UDim2.new(0, 15, 0, 0)
                dropdownLabel.BackgroundTransparency = 1
                dropdownLabel.Text = name .. ": " .. (default or "None")
                dropdownLabel.Font = theme.Font
                dropdownLabel.TextSize = theme.TextSize.Medium
                dropdownLabel.TextColor3 = theme.Text
                dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                dropdownLabel.Parent = dropdownButton
                
                local dropdownIcon = Instance.new("TextLabel")
                dropdownIcon.Name = "Icon"
                dropdownIcon.Size = UDim2.new(0, 20, 0, 20)
                dropdownIcon.Position = UDim2.new(1, -25, 0.5, -10)
                dropdownIcon.BackgroundTransparency = 1
                dropdownIcon.Text = "⌄"
                dropdownIcon.Font = theme.Font
                dropdownIcon.TextSize = 16
                dropdownIcon.TextColor3 = theme.TextDark
                dropdownIcon.Parent = dropdownButton
                
                local dropdownList = Instance.new("Frame")
                dropdownList.Name = "List"
                dropdownList.Size = UDim2.new(1, 0, 0, 0)
                dropdownList.Position = UDim2.new(0, 0, 1, 2)
                dropdownList.BackgroundColor3 = theme.Second
                dropdownList.BorderSizePixel = 0
                dropdownList.Visible = false
                dropdownList.ZIndex = 10
                dropdownList.Parent = dropdownFrame
                
                CryzenHub.Utils.CreateCorner(dropdownList)
                CryzenHub.Utils.CreateStroke(dropdownList, theme.Stroke)
                CryzenHub.Utils.CreateDropShadow(dropdownList)
                
                local listLayout = Instance.new("UIListLayout")
                listLayout.SortOrder = Enum.SortOrder.LayoutOrder
                listLayout.Parent = dropdownList
                
                local isOpen = false
                
                local function toggleDropdown()
                    isOpen = not isOpen
                    
                    if isOpen then
                        dropdownList.Visible = true
                        dropdownList.Size = UDim2.new(1, 0, 0, math.min(#options * 30, 150))
                        CryzenHub.Utils.Tween(dropdownIcon, {Rotation = 180}, 0.2)
                    else
                        dropdownList.Visible = false
                        CryzenHub.Utils.Tween(dropdownIcon, {Rotation = 0}, 0.2)
                    end
                end
                
                local function createOptions()
                    for _, child in pairs(dropdownList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    for i, option in pairs(options) do
                        local optionButton = Instance.new("TextButton")
                        optionButton.Name = "Option"
                        optionButton.Size = UDim2.new(1, 0, 0, 30)
                        optionButton.BackgroundColor3 = theme.Second
                        optionButton.BackgroundTransparency = 1
                        optionButton.BorderSizePixel = 0
                        optionButton.Text = option
                        optionButton.Font = theme.Font
                        optionButton.TextSize = theme.TextSize.Medium
                        optionButton.TextColor3 = theme.Text
                        optionButton.TextXAlignment = Enum.TextXAlignment.Left
                        optionButton.Parent = dropdownList
                        
                        local optionPadding = Instance.new("UIPadding")
                        optionPadding.PaddingLeft = UDim.new(0, 15)
                        optionPadding.Parent = optionButton
                        
                        optionButton.MouseButton1Click:Connect(function()
                            element.Value = option
                            window.Flags[flag] = option
                            dropdownLabel.Text = name .. ": " .. option
                            toggleDropdown()
                            callback(option)
                        end)
                        
                        optionButton.MouseEnter:Connect(function()
                            optionButton.BackgroundTransparency = 0.8
                        end)
                        
                        optionButton.MouseLeave:Connect(function()
                            optionButton.BackgroundTransparency = 1
                        end)
                    end
                end
                
                createOptions()
                
                dropdownButton.MouseButton1Click:Connect(function()
                    CryzenHub.Utils.CreateRipple(dropdownButton, Services.UserInputService:GetMouseLocation())
                    toggleDropdown()
                end)
                
                dropdownButton.MouseEnter:Connect(function()
                    CryzenHub.Utils.Tween(dropdownButton, {BackgroundColor3 = theme.Stroke}, 0.2)
                end)
                
                dropdownButton.MouseLeave:Connect(function()
                    CryzenHub.Utils.Tween(dropdownButton, {BackgroundColor3 = theme.Second}, 0.2)
                end)
                
                function element:Refresh(newOptions, newDefault)
                    self.Options = newOptions
                    options = newOptions
                    
                    if newDefault then
                        self.Value = newDefault
                        window.Flags[flag] = newDefault
                        dropdownLabel.Text = name .. ": " .. newDefault
                    end
                    
                    createOptions()
                end
                
                function element:Set(option)
                    if table.find(options, option) then
                        self.Value = option
                        window.Flags[flag] = option
                        dropdownLabel.Text = name .. ": " .. option
                        callback(option)
                    end
                end
                
                table.insert(section.Elements, element)
                return element
            end
            
            function section:AddTextbox(config)
                config = config or {}
                local name = config.Name or "Textbox"
                local default = config.Default or ""
                local textDisappear = config.TextDisappear or false
                local callback = config.Callback or function() end
                local flag = config.Flag or name
                
                local element = {
                    Type = "Textbox",
                    Name = name,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                window.Flags[flag] = default
                
                local textboxFrame = Instance.new("Frame")
                textboxFrame.Name = "TextboxFrame"
                textboxFrame.Size = UDim2.new(1, 0, 0, 35)
                textboxFrame.BackgroundTransparency = 1
                textboxFrame.Parent = sectionFrame
                element.Frame = textboxFrame
                
                local textboxContainer = Instance.new("Frame")
                textboxContainer.Name = "Container"
                textboxContainer.Size = UDim2.new(1, 0, 1, 0)
                textboxContainer.BackgroundColor3 = theme.Second
                textboxContainer.BorderSizePixel = 0
                textboxContainer.Parent = textboxFrame
                
                CryzenHub.Utils.CreateCorner(textboxContainer)
                CryzenHub.Utils.CreateStroke(textboxContainer, theme.Stroke)
                
                local textboxLabel = Instance.new("TextLabel")
                textboxLabel.Name = "Label"
                textboxLabel.Size = UDim2.new(0, 100, 1, 0)
                textboxLabel.Position = UDim2.new(0, 15, 0, 0)
                textboxLabel.BackgroundTransparency = 1
                textboxLabel.Text = name .. ":"
                textboxLabel.Font = theme.Font
                textboxLabel.TextSize = theme.TextSize.Medium
                textboxLabel.TextColor3 = theme.Text
                textboxLabel.TextXAlignment = Enum.TextXAlignment.Left
                textboxLabel.Parent = textboxContainer
                
                local textbox = Instance.new("TextBox")
                textbox.Name = "Textbox"
                textbox.Size = UDim2.new(1, -120, 1, 0)
                textbox.Position = UDim2.new(0, 115, 0, 0)
                textbox.BackgroundTransparency = 1
                textbox.Text = default
                textbox.PlaceholderText = "Enter text..."
                textbox.Font = theme.Font
                textbox.TextSize = theme.TextSize.Medium
                textbox.TextColor3 = theme.SchemeColor
                textbox.TextXAlignment = Enum.TextXAlignment.Left
                textbox.ClearTextOnFocus = textDisappear
                textbox.Parent = textboxContainer
                element.Textbox = textbox
                
                textbox.FocusLost:Connect(function(enterPressed)
                    element.Value = textbox.Text
                    window.Flags[flag] = textbox.Text
                    callback(textbox.Text)
                end)
                
                textbox.Focused:Connect(function()
                    CryzenHub.Utils.Tween(textboxContainer, {BackgroundColor3 = theme.Stroke}, 0.2)
                end)
                
                textbox.FocusLost:Connect(function()
                    CryzenHub.Utils.Tween(textboxContainer, {BackgroundColor3 = theme.Second}, 0.2)
                end)
                
                function element:Set(text)
                    self.Value = text
                    textbox.Text = text
                    window.Flags[flag] = text
                end
                
                table.insert(section.Elements, element)
                return element
            end
            
            function section:AddColorpicker(config)
                config = config or {}
                local name = config.Name or "Colorpicker"
                local default = config.Default or Color3.fromRGB(255, 255, 255)
                local callback = config.Callback or function() end
                local flag = config.Flag or name
                
                local element = {
                    Type = "Colorpicker",
                    Name = name,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                window.Flags[flag] = default
                
                local colorFrame = Instance.new("Frame")
                colorFrame.Name = "ColorFrame"
                colorFrame.Size = UDim2.new(1, 0, 0, 35)
                colorFrame.BackgroundTransparency = 1
                colorFrame.Parent = sectionFrame
                element.Frame = colorFrame
                
                local colorContainer = Instance.new("Frame")
                colorContainer.Name = "Container"
                colorContainer.Size = UDim2.new(1, 0, 1, 0)
                colorContainer.BackgroundColor3 = theme.Second
                colorContainer.BorderSizePixel = 0
                colorContainer.Parent = colorFrame
                
                CryzenHub.Utils.CreateCorner(colorContainer)
                CryzenHub.Utils.CreateStroke(colorContainer, theme.Stroke)
                
                local colorLabel = Instance.new("TextLabel")
                colorLabel.Name = "Label"
                colorLabel.Size = UDim2.new(1, -50, 1, 0)
                colorLabel.Position = UDim2.new(0, 15, 0, 0)
                colorLabel.BackgroundTransparency = 1
                colorLabel.Text = name
                colorLabel.Font = theme.Font
                colorLabel.TextSize = theme.TextSize.Medium
                colorLabel.TextColor3 = theme.Text
                colorLabel.TextXAlignment = Enum.TextXAlignment.Left
                colorLabel.Parent = colorContainer
                
                local colorDisplay = Instance.new("Frame")
                colorDisplay.Name = "Display"
                colorDisplay.Size = UDim2.new(0, 25, 0, 25)
                colorDisplay.Position = UDim2.new(1, -35, 0.5, -12.5)
                colorDisplay.BackgroundColor3 = default
                colorDisplay.BorderSizePixel = 0
                colorDisplay.Parent = colorContainer
                
                CryzenHub.Utils.CreateCorner(colorDisplay, 4)
                CryzenHub.Utils.CreateStroke(colorDisplay, theme.Stroke)
                
                local colorButton = Instance.new("TextButton")
                colorButton.Size = UDim2.new(1, 0, 1, 0)
                colorButton.BackgroundTransparency = 1
                colorButton.Text = ""
                colorButton.Parent = colorDisplay
                
                -- Simple color picker (would need full implementation)
                colorButton.MouseButton1Click:Connect(function()
                    CryzenHub.Utils.CreateRipple(colorContainer, Services.UserInputService:GetMouseLocation())
                    
                    -- This would open a color picker window
                    -- For now, just cycle through some colors
                    local colors = {
                        Color3.fromRGB(255, 0, 0),
                        Color3.fromRGB(0, 255, 0),
                        Color3.fromRGB(0, 0, 255),
                        Color3.fromRGB(255, 255, 0),
                        Color3.fromRGB(255, 0, 255),
                        Color3.fromRGB(0, 255, 255),
                        Color3.fromRGB(255, 255, 255)
                    }
                    
                    local currentIndex = 1
                    for i, color in pairs(colors) do
                        if color == element.Value then
                            currentIndex = i
                            break
                        end
                    end
                    
                    currentIndex = currentIndex % #colors + 1
                    local newColor = colors[currentIndex]
                    
                    element.Value = newColor
                    window.Flags[flag] = newColor
                    colorDisplay.BackgroundColor3 = newColor
                    callback(newColor)
                end)
                
                colorContainer.MouseEnter:Connect(function()
                    CryzenHub.Utils.Tween(colorContainer, {BackgroundColor3 = theme.Stroke}, 0.2)
                end)
                
                colorContainer.MouseLeave:Connect(function()
                    CryzenHub.Utils.Tween(colorContainer, {BackgroundColor3 = theme.Second}, 0.2)
                end)
                
                function element:Set(color)
                    self.Value = color
                    window.Flags[flag] = color
                    colorDisplay.BackgroundColor3 = color
                end
                
                table.insert(section.Elements, element)
                return element
            end
            
            table.insert(tab.Sections, section)
            return section
        end
        
        -- Select first tab by default
        if #window.Tabs == 0 then
            selectTab()
        end
        
        table.insert(window.Tabs, tab)
        return tab
    end
    
    -- Window close functionality
    closeButton.MouseButton1Click:Connect(function()
        CryzenHub.Utils.Tween(mainFrame, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, 0.3, nil, nil, function()
            screenGui:Destroy()
        end)
    end)
    
    closeButton.MouseEnter:Connect(function()
        CryzenHub.Utils.Tween(closeButton, {BackgroundColor3 = theme.Stroke}, 0.2)
    end)
    
    closeButton.MouseLeave:Connect(function()
        CryzenHub.Utils.Tween(closeButton, {BackgroundColor3 = theme.Second}, 0.2)
    end)
    
    -- Make window draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    topBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    Services.UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Window entrance animation
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    
    CryzenHub.Utils.Tween(mainFrame, {
        Size = UDim2.new(0, 550, 0, 400),
        Position = UDim2.new(0.5, -275, 0.5, -200)
    }, 0.4, Enum.EasingStyle.Quart)
    
    -- Intro notification
    if introEnabled then
        task.wait(0.5)
        CryzenHub:CreateNotification({
            Title = "Welcome!",
            Content = introText,
            Image = introIcon,
            Time = 3
        })
    end
    
    table.insert(CryzenHub.Windows, window)
    CryzenHub.Utils.DebugLog("Window created successfully: " .. windowName, "Info")
    
    return window
end

-- Theme functions
function CryzenHub:SetTheme(themeName)
    if CryzenHub.Themes[themeName] then
        CryzenHub.CurrentTheme = CryzenHub.Themes[themeName]
        CryzenHub.Utils.DebugLog("Theme changed to: " .. themeName, "Info")
        return true
    else
        CryzenHub.Utils.DebugLog("Theme not found: " .. themeName, "Warning")
        return false
    end
end

function CryzenHub:GetThemes()
    local themes = {}
    for name, _ in pairs(CryzenHub.Themes) do
        table.insert(themes, name)
    end
    return themes
end

return CryzenHub
