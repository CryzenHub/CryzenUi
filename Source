--[[
    CryzenHub UI Library v2.0.0
    A premium UI library for Roblox scripts
    Created by CryzenHub
]]

local CryzenHub = {
    Version = "2.0.0",
    Windows = {},
    Theme = {},
    Flags = {},
    Signals = {},
    Connections = {},
    Utils = {}
}

-- Services
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local Lighting = game:GetService("Lighting")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local Camera = workspace.CurrentCamera
local ViewportSize = Camera.ViewportSize
local Random = Random.new()

-- Default Theme
CryzenHub.Theme = {
    Primary = Color3.fromRGB(20, 20, 30),        -- Main background
    Secondary = Color3.fromRGB(30, 30, 40),      -- Secondary background (cards, sections)
    Tertiary = Color3.fromRGB(40, 40, 55),       -- Tertiary background (inputs, dropdowns)
    Accent = Color3.fromRGB(100, 120, 255),      -- Accent color
    Text = Color3.fromRGB(240, 240, 255),        -- Primary text
    TextDark = Color3.fromRGB(180, 180, 195),    -- Secondary text
    Stroke = Color3.fromRGB(60, 60, 80),         -- Border color
    InlineStroke = Color3.fromRGB(50, 50, 70),   -- Inner border color
    
    -- Component-specific colors
    Success = Color3.fromRGB(70, 200, 120),      -- Success color
    Warning = Color3.fromRGB(255, 180, 70),      -- Warning color
    Error = Color3.fromRGB(255, 80, 80),         -- Error color
    Info = Color3.fromRGB(70, 160, 255),         -- Info color
    
    -- Gradients
    PrimaryGradient = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 25, 35)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 15, 25))
    }),
    AccentGradient = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(120, 140, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 100, 255))
    }),
    
    -- Typography
    Font = Enum.Font.Gotham,
    HeaderSize = 18,
    TextSize = 14,
    SubTextSize = 12,
    
    -- Styling
    CornerRadius = UDim.new(0, 6),
    SmallCornerRadius = UDim.new(0, 4),
    RoundCornerRadius = UDim.new(0, 999),
    StrokeThickness = 1,
    ElementPadding = 8,
    WindowPadding = 12,
    
    -- Effects
    Blur = true,
    BlurSize = 10,
    Transparency = 0.97,
    ShadowIntensity = 0.8,
    
    -- Animation
    AnimationSpeed = 0.2,
    EasingStyle = Enum.EasingStyle.Quart,
    EasingDirection = Enum.EasingDirection.Out,
    
    -- Additional
    UseAcrylic = true,
    EnableShadows = true,
    UseGradients = true
}

-- Utility Functions
local function IsInBounds(point, position, size)
    return point.X >= position.X and point.X <= position.X + size.X and
           point.Y >= position.Y and point.Y <= position.Y + size.Y
end

local function GetMouseLocation()
    return UserInputService:GetMouseLocation()
end

local function CreateSignal()
    local signal = {}
    local connections = {}
    
    function signal:Connect(callback)
        local connection = {
            Callback = callback,
            Disconnect = function(self)
                for i, conn in ipairs(connections) do
                    if conn == self then
                        table.remove(connections, i)
                        break
                    end
                end
            end
        }
        table.insert(connections, connection)
        return connection
    end
    
    function signal:Fire(...)
        for _, connection in ipairs(connections) do
            task.spawn(connection.Callback, ...)
        end
    end
    
    return signal
end

function CryzenHub.Utils.Tween(object, properties, duration, style, direction, callback)
    local tweenInfo = TweenInfo.new(
        duration or CryzenHub.Theme.AnimationSpeed,
        style or CryzenHub.Theme.EasingStyle,
        direction or CryzenHub.Theme.EasingDirection
    )
    
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    
    if callback then
        tween.Completed:Connect(callback)
    end
    
    return tween
end

function CryzenHub.Utils.DarkenColor(color, percent)
    local h, s, v = color:ToHSV()
    v = math.clamp(v - percent, 0, 1)
    return Color3.fromHSV(h, s, v)
end

function CryzenHub.Utils.LightenColor(color, percent)
    local h, s, v = color:ToHSV()
    v = math.clamp(v + percent, 0, 1)
    return Color3.fromHSV(h, s, v)
end

function CryzenHub.Utils.GetTextSize(text, textSize, font, frameSize)
    return TextService:GetTextSize(text, textSize, font, frameSize)
end

function CryzenHub.Utils.SetRoundedCorners(instance, radius)
    if instance:FindFirstChild("UICorner") then
        instance.UICorner.CornerRadius = radius or CryzenHub.Theme.CornerRadius
    else
        local corner = Instance.new("UICorner")
        corner.CornerRadius = radius or CryzenHub.Theme.CornerRadius
        corner.Parent = instance
    end
    return instance
end

function CryzenHub.Utils.AddStroke(instance, color, thickness, transparency)
    if instance:FindFirstChild("UIStroke") then
        instance.UIStroke.Color = color or CryzenHub.Theme.Stroke
        instance.UIStroke.Thickness = thickness or CryzenHub.Theme.StrokeThickness
        instance.UIStroke.Transparency = transparency or 0
    else
        local stroke = Instance.new("UIStroke")
        stroke.Color = color or CryzenHub.Theme.Stroke
        stroke.Thickness = thickness or CryzenHub.Theme.StrokeThickness
        stroke.Transparency = transparency or 0
        stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        stroke.Parent = instance
    end
    return instance
end

function CryzenHub.Utils.CreateShadow(instance, size, transparency)
    size = size or 15
    transparency = transparency or 0.5
    
    if instance:FindFirstChild("Shadow") then
        instance.Shadow:Destroy()
    end
    
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.fromScale(0.5, 0.5)
    shadow.Size = UDim2.new(1, size, 1, size)
    shadow.Image = "rbxassetid://6014261993"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = transparency
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    shadow.ZIndex = instance.ZIndex - 1
    shadow.Parent = instance
    
    return shadow
end

function CryzenHub.Utils.CreateRipple(parent, startPos)
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ripple.BackgroundTransparency = 0.85
    ripple.Position = UDim2.new(0, startPos.X - parent.AbsolutePosition.X, 0, startPos.Y - parent.AbsolutePosition.Y)
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.ZIndex = parent.ZIndex + 1
    CryzenHub.Utils.SetRoundedCorners(ripple, UDim.new(1, 0))
    ripple.Parent = parent
    
    -- Calculate maximum size needed
    local maxSize = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
    
    -- Animate ripple
    CryzenHub.Utils.Tween(ripple, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        BackgroundTransparency = 1
    }, 0.5)
    
    -- Clean up
    task.delay(0.5, function()
        ripple:Destroy()
    end)
    
    return ripple
end

function CryzenHub.Utils.CreateBlur()
    if Lighting:FindFirstChild("CryzenHubBlur") then
        return Lighting.CryzenHubBlur
    end
    
    local blur = Instance.new("BlurEffect")
    blur.Name = "CryzenHubBlur"
    blur.Size = 0
    blur.Enabled = false
    blur.Parent = Lighting
    
    return blur
end

function CryzenHub.Utils.CreateAcrylic(parent)
    if not CryzenHub.Theme.UseAcrylic then return end
    
    local acrylic = Instance.new("Frame")
    acrylic.Name = "Acrylic"
    acrylic.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    acrylic.BackgroundTransparency = 0.3
    acrylic.BorderSizePixel = 0
    acrylic.Size = UDim2.fromScale(1, 1)
    acrylic.ZIndex = parent.ZIndex - 1
    CryzenHub.Utils.SetRoundedCorners(acrylic, CryzenHub.Theme.CornerRadius)
    acrylic.Parent = parent
    
    -- Create blur effect when hovering over acrylic
    local blur = CryzenHub.Utils.CreateBlur()
    
    local connection
    connection = RunService.RenderStepped:Connect(function()
        if not acrylic.Parent or not acrylic.Parent.Parent then
            connection:Disconnect()
            if blur.Enabled and not CryzenHub.Windows[1] then
                blur.Enabled = false
            end
            return
        end
        
        local mousePos = GetMouseLocation()
        local absPos = acrylic.AbsolutePosition
        local absSize = acrylic.AbsoluteSize
        
        if IsInBounds(mousePos, absPos, absSize) then
            if not blur.Enabled then
                blur.Size = 0
                blur.Enabled = true
                CryzenHub.Utils.Tween(blur, {Size = CryzenHub.Theme.BlurSize}, 0.2)
            end
        elseif blur.Enabled and not CryzenHub.Windows[1] then
            CryzenHub.Utils.Tween(blur, {Size = 0}, 0.2, nil, nil, function()
                if blur.Size <= 0 then
                    blur.Enabled = false
                end
            end)
        end
    end)
    
    return acrylic
end

function CryzenHub.Utils.CreateTooltip(text)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CryzenHubTooltip"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.DisplayOrder = 9999
    
    pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(screenGui)
            screenGui.Parent = CoreGui
        else
            screenGui.Parent = CoreGui
        end
    end)
    
    if not screenGui.Parent then
        screenGui.Parent = Player:WaitForChild("PlayerGui")
    end
    
    local tooltip = Instance.new("Frame")
    tooltip.Name = "Tooltip"
    tooltip.BackgroundColor3 = CryzenHub.Theme.Secondary
    tooltip.BackgroundTransparency = 0.1
    tooltip.BorderSizePixel = 0
    tooltip.Position = UDim2.new(0, Mouse.X + 15, 0, Mouse.Y + 15)
    tooltip.AutomaticSize = Enum.AutomaticSize.XY
    tooltip.ZIndex = 10
    tooltip.Parent = screenGui
    CryzenHub.Utils.SetRoundedCorners(tooltip, CryzenHub.Theme.SmallCornerRadius)
    CryzenHub.Utils.AddStroke(tooltip)
    
    if CryzenHub.Theme.EnableShadows then
        CryzenHub.Utils.CreateShadow(tooltip)
    end
    
    local paddingX, paddingY = 10, 6
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "Text"
    textLabel.BackgroundTransparency = 1
    textLabel.Size = UDim2.new(1, -paddingX*2, 0, 0)
    textLabel.Position = UDim2.new(0, paddingX, 0, paddingY)
    textLabel.Font = CryzenHub.Theme.Font
    textLabel.Text = text
    textLabel.TextColor3 = CryzenHub.Theme.Text
    textLabel.TextSize = CryzenHub.Theme.SubTextSize
    textLabel.RichText = true
    textLabel.TextWrapped = true
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.ZIndex = 11
    textLabel.AutomaticSize = Enum.AutomaticSize.Y
    textLabel.Parent = tooltip
    
    -- Adjust tooltip size
    tooltip.Size = UDim2.new(0, math.min(300, textLabel.TextBounds.X + paddingX * 2), 0, textLabel.TextBounds.Y + paddingY * 2)
    
    -- Position tooltip to avoid going off screen
    local function updatePosition()
        local mousePos = GetMouseLocation()
        local tooltipSize = tooltip.AbsoluteSize
        local viewportSize = ViewportSize
        
        local posX = mousePos.X + 15
        local posY = mousePos.Y + 15
        
        if posX + tooltipSize.X > viewportSize.X then
            posX = mousePos.X - tooltipSize.X - 15
        end
        
        if posY + tooltipSize.Y > viewportSize.Y then
            posY = mousePos.Y - tooltipSize.Y - 15
        end
        
        tooltip.Position = UDim2.new(0, posX, 0, posY)
    end
    
    updatePosition()
    
    local connection = RunService.RenderStepped:Connect(updatePosition)
    
    local tooltipObj = {
        Instance = tooltip,
        ScreenGui = screenGui,
        Connection = connection,
        Destroy = function()
            connection:Disconnect()
            screenGui:Destroy()
        end
    }
    
    return tooltipObj
end

-- Create ScreenGui for UI
function CryzenHub.Utils.CreateScreenGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CryzenHubV2"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.DisplayOrder = 100
    screenGui.ResetOnSpawn = false
    
    -- Try to use CoreGui if possible (better synapse support)
    pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(screenGui)
            screenGui.Parent = CoreGui
        else
            screenGui.Parent = CoreGui
        end
    end)
    
    -- Fallback to PlayerGui if CoreGui fails
    if not screenGui.Parent then
        screenGui.Parent = Player:WaitForChild("PlayerGui")
    end
    
    return screenGui
end

-- Main Window Creator
function CryzenHub:CreateWindow(config)
    config = config or {}
    
    -- Apply custom theme if provided
    if config.Theme then
        for key, value in pairs(config.Theme) do
            CryzenHub.Theme[key] = value
        end
    end
    
    -- Create ScreenGui if not already created
    if not CryzenHub.ScreenGui then
        CryzenHub.ScreenGui = CryzenHub.Utils.CreateScreenGui()
    end
    
    -- Window properties
    local title = config.Title or "CryzenHub"
    local size = config.Size or UDim2.new(0, 600, 0, 450)
    local position = config.Position or UDim2.new(0.5, -size.X.Offset/2, 0.5, -size.Y.Offset/2)
    local minSize = config.MinSize or Vector2.new(400, 300)
    local theme = CryzenHub.Theme
    
    local window = {
        Tabs = {},
        ActiveTab = nil,
        Flags = {},
        Theme = theme,
        MinSize = minSize
    }
    
    -- Main Container
    local mainContainer = Instance.new("Frame")
    mainContainer.Name = "WindowContainer"
    mainContainer.Size = size
    mainContainer.Position = position
    mainContainer.BackgroundColor3 = theme.Primary
    mainContainer.BackgroundTransparency = 0
    mainContainer.BorderSizePixel = 0
    mainContainer.ClipsDescendants = true
    mainContainer.Parent = CryzenHub.ScreenGui
    window.Container = mainContainer
    
    CryzenHub.Utils.SetRoundedCorners(mainContainer)
    
    -- Add shadow
    if theme.EnableShadows then
        CryzenHub.Utils.CreateShadow(mainContainer)
    end
    
    -- Add acrylic effect if enabled
    if theme.UseAcrylic and theme.Blur then
        CryzenHub.Utils.CreateAcrylic(mainContainer)
    end
    
    -- Create gradient if enabled
    if theme.UseGradients then
        local gradient = Instance.new("UIGradient")
        gradient.Color = theme.PrimaryGradient
        gradient.Rotation = 45
        gradient.Parent = mainContainer
    end
    
    -- Create title bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = theme.Secondary
    titleBar.BackgroundTransparency = 0.2
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainContainer
    window.TitleBar = titleBar
    
    -- Add title
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Size = UDim2.new(1, -120, 1, 0)
    titleText.Position = UDim2.new(0, 15, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = title
    titleText.Font = theme.Font
    titleText.TextSize = theme.HeaderSize
    titleText.TextColor3 = theme.Text
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    -- Version label
    local versionLabel = Instance.new("TextLabel")
    versionLabel.Name = "Version"
    versionLabel.Size = UDim2.new(0, 50, 0, 20)
    versionLabel.Position = UDim2.new(0, titleText.TextBounds.X + 20, 0.5, -10)
    versionLabel.BackgroundColor3 = theme.Accent
    versionLabel.BackgroundTransparency = 0.7
    versionLabel.Text = "v" .. CryzenHub.Version
    versionLabel.TextColor3 = theme.Text
    versionLabel.TextSize = theme.SubTextSize
    versionLabel.Font = theme.Font
    versionLabel.Parent = titleBar
    CryzenHub.Utils.SetRoundedCorners(versionLabel, theme.SmallCornerRadius)
    
    -- Window controls
    local controlsContainer = Instance.new("Frame")
    controlsContainer.Name = "Controls"
    controlsContainer.Size = UDim2.new(0, 100, 1, 0)
    controlsContainer.Position = UDim2.new(1, -100, 0, 0)
    controlsContainer.BackgroundTransparency = 1
    controlsContainer.Parent = titleBar
    
    -- Control buttons (minimize, maximize, close)
    local buttonSize = 30
    local buttonPositions = {
        Close = UDim2.new(1, -buttonSize, 0.5, -buttonSize/2),
        Maximize = UDim2.new(1, -buttonSize*2, 0.5, -buttonSize/2),
        Minimize = UDim2.new(1, -buttonSize*3, 0.5, -buttonSize/2)
    }
    local buttonSymbols = {
        Close = "✕",
        Maximize = "□",
        Minimize = "−"
    }
    local buttonColors = {
        Close = theme.Error,
        Maximize = theme.Warning,
        Minimize = theme.Info
    }
    
    for name, position in pairs(buttonPositions) do
        local button = Instance.new("TextButton")
        button.Name = name .. "Button"
        button.Size = UDim2.new(0, buttonSize, 0, buttonSize)
        button.Position = position
        button.BackgroundColor3 = buttonColors[name]
        button.BackgroundTransparency = 0.9
        button.Text = buttonSymbols[name]
        button.TextSize = 16
        button.Font = theme.Font
        button.TextColor3 = theme.Text
        button.Parent = controlsContainer
        CryzenHub.Utils.SetRoundedCorners(button, theme.RoundCornerRadius)
        
        -- Hover effect
        button.MouseEnter:Connect(function()
            CryzenHub.Utils.Tween(button, {BackgroundTransparency = 0.5}, 0.2)
        end)
        
        button.MouseLeave:Connect(function()
            CryzenHub.Utils.Tween(button, {BackgroundTransparency = 0.9}, 0.2)
        end)
        
        -- Click effect
        button.MouseButton1Down:Connect(function()
            CryzenHub.Utils.Tween(button, {BackgroundTransparency = 0.3}, 0.1)
        end)
        
        button.MouseButton1Up:Connect(function()
            CryzenHub.Utils.Tween(button, {BackgroundTransparency = 0.5}, 0.1)
        end)
    end
    
    -- Button functionality
    local closeButton = controlsContainer:FindFirstChild("CloseButton")
    local minimizeButton = controlsContainer:FindFirstChild("MinimizeButton")
    local maximizeButton = controlsContainer:FindFirstChild("MaximizeButton")
    
    -- Close button
    closeButton.MouseButton1Click:Connect(function()
        CryzenHub.Utils.Tween(mainContainer, {
            Position = UDim2.new(1, size.X.Offset/2, mainContainer.Position.Y.Scale, mainContainer.Position.Y.Offset),
            Size = UDim2.new(0, 0, 0, size.Y.Offset)
        }, 0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.In, function()
            mainContainer:Destroy()
            table.remove(CryzenHub.Windows, table.find(CryzenHub.Windows, window))
            
            -- Disable blur if no windows are open
            if #CryzenHub.Windows == 0 then
                local blur = Lighting:FindFirstChild("CryzenHubBlur")
                if blur and blur.Enabled then
                    CryzenHub.Utils.Tween(blur, {Size = 0}, 0.2, nil, nil, function()
                        blur.Enabled = false
                    end)
                end
            end
        end)
    end)
    
    -- Minimize button
    local isMinimized = false
    local originalSize = size
    minimizeButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        
        if isMinimized then
            CryzenHub.Utils.Tween(mainContainer, {
                Size = UDim2.new(size.X.Scale, size.X.Offset, 0, 40)
            }, 0.3)
        else
            CryzenHub.Utils.Tween(mainContainer, {
                Size = originalSize
            }, 0.3)
        end
    end)
    
    -- Maximize button
    local isMaximized = false
    local originalPosition = position
    maximizeButton.MouseButton1Click:Connect(function()
        isMaximized = not isMaximized
        
        if isMaximized then
            originalSize = mainContainer.Size
            originalPosition = mainContainer.Position
            
            CryzenHub.Utils.Tween(mainContainer, {
                Size = UDim2.new(1, -40, 1, -40),
                Position = UDim2.new(0, 20, 0, 20)
            }, 0.3)
        else
            CryzenHub.Utils.Tween(mainContainer, {
                Size = originalSize,
                Position = originalPosition
            }, 0.3)
        end
    end)
    
    -- Make window draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainContainer.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging and not isMaximized then
            local delta = input.Position - dragStart
            
            CryzenHub.Utils.Tween(mainContainer, {
                Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            }, 0.05, Enum.EasingStyle.Linear)
        end
    end)
    
    -- Make window resizable
    local resizing = false
    local resizeCorner = Instance.new("TextButton")
    resizeCorner.Name = "ResizeCorner"
    resizeCorner.Size = UDim2.new(0, 20, 0, 20)
    resizeCorner.Position = UDim2.new(1, -20, 1, -20)
    resizeCorner.BackgroundTransparency = 1
    resizeCorner.Text = "◢"
    resizeCorner.TextColor3 = theme.TextDark
    resizeCorner.Font = Enum.Font.SourceSans
    resizeCorner.TextSize = 16
    resizeCorner.Parent = mainContainer
    
    resizeCorner.MouseButton1Down:Connect(function()
        resizing = true
        dragStart = GetMouseLocation()
        startSize = mainContainer.Size
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and resizing then
            local delta = GetMouseLocation() - dragStart
            local newSize = UDim2.new(
                startSize.X.Scale,
                math.max(window.MinSize.X, startSize.X.Offset + delta.X),
                startSize.Y.Scale,
                math.max(window.MinSize.Y, startSize.Y.Offset + delta.Y)
            )
            
            CryzenHub.Utils.Tween(mainContainer, {Size = newSize}, 0.05, Enum.EasingStyle.Linear)
            originalSize = newSize
        end
    end)
    
    -- Content area
    local contentArea = Instance.new("Frame")
    contentArea.Name = "ContentArea"
    contentArea.BackgroundTransparency = 1
    contentArea.Size = UDim2.new(1, 0, 1, -40) -- Subtract title bar height
    contentArea.Position = UDim2.new(0, 0, 0, 40)
    contentArea.Parent = mainContainer
    window.ContentArea = contentArea
    
    -- Tab navigation
    local tabContainer = Instance.new("Frame")
    tabContainer.Name = "TabContainer"
    tabContainer.BackgroundColor3 = theme.Secondary
    tabContainer.BackgroundTransparency = 0.2
    tabContainer.Size = UDim2.new(0, 60, 1, 0)
    tabContainer.BorderSizePixel = 0
    tabContainer.Parent = contentArea
    window.TabContainer = tabContainer
    
    local tabContainerSeparator = Instance.new("Frame")
    tabContainerSeparator.Name = "Separator"
    tabContainerSeparator.BackgroundColor3 = theme.Stroke
    tabContainerSeparator.BackgroundTransparency = 0.5
    tabContainerSeparator.BorderSizePixel = 0
    tabContainerSeparator.Size = UDim2.new(0, 1, 1, 0)
    tabContainerSeparator.Position = UDim2.new(1, 0, 0, 0)
    tabContainerSeparator.Parent = tabContainer
    
    local tabButtonContainer = Instance.new("ScrollingFrame")
    tabButtonContainer.Name = "TabButtonContainer"
    tabButtonContainer.BackgroundTransparency = 1
    tabButtonContainer.Size = UDim2.new(1, 0, 1, 0)
    tabButtonContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabButtonContainer.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tabButtonContainer.ScrollBarThickness = 0
    tabButtonContainer.ScrollingEnabled = true
    tabButtonContainer.Parent = tabContainer
    
    local tabButtonLayout = Instance.new("UIListLayout")
    tabButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabButtonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabButtonLayout.Padding = UDim.new(0, theme.ElementPadding)
    tabButtonLayout.Parent = tabButtonContainer
    
    local tabButtonPadding = Instance.new("UIPadding")
    tabButtonPadding.PaddingTop = UDim.new(0, theme.ElementPadding)
    tabButtonPadding.PaddingBottom = UDim.new(0, theme.ElementPadding)
    tabButtonPadding.Parent = tabButtonContainer
    
    -- Tab content area
    local tabContentContainer = Instance.new("Frame")
    tabContentContainer.Name = "TabContentContainer"
    tabContentContainer.BackgroundTransparency = 1
    tabContentContainer.Size = UDim2.new(1, -60, 1, 0)
    tabContentContainer.Position = UDim2.new(0, 60, 0, 0)
    tabContentContainer.Parent = contentArea
    window.TabContentContainer = tabContentContainer
    
    -- Tab creation function
    function window:Tab(name, icon)
        local tab = {
            Name = name,
            Icon = icon,
            Sections = {},
            Elements = {}
        }
        
        -- Create tab button
        local tabButton = Instance.new("TextButton")
        tabButton.Name = name .. "Button"
        tabButton.Size = UDim2.new(0, 40, 0, 40)
        tabButton.BackgroundColor3 = theme.Tertiary
        tabButton.BackgroundTransparency = 0.9
        tabButton.Text = ""
        tabButton.Parent = tabButtonContainer
        tab.Button = tabButton
        CryzenHub.Utils.SetRoundedCorners(tabButton, theme.SmallCornerRadius)
        
        -- Active indicator
        local activeIndicator = Instance.new("Frame")
        activeIndicator.Name = "ActiveIndicator"
        activeIndicator.Size = UDim2.new(0, 3, 0.7, 0)
        activeIndicator.Position = UDim2.new(0, 0, 0.15, 0)
        activeIndicator.BackgroundColor3 = theme.Accent
        activeIndicator.BackgroundTransparency = 1
        activeIndicator.BorderSizePixel = 0
        activeIndicator.Parent = tabButton
        CryzenHub.Utils.SetRoundedCorners(activeIndicator, UDim.new(0, 2))
        tab.ActiveIndicator = activeIndicator
        
        -- Tab icon
        local iconImage = Instance.new("ImageLabel")
        iconImage.Name = "Icon"
        iconImage.Size = UDim2.new(0, 20, 0, 20)
        iconImage.Position = UDim2.new(0.5, 0, 0.5, 0)
        iconImage.AnchorPoint = Vector2.new(0.5, 0.5)
        iconImage.BackgroundTransparency = 1
        iconImage.Image = icon or ""
        iconImage.ImageColor3 = theme.TextDark
        iconImage.ImageTransparency = 0
        iconImage.Parent = tabButton
        tab.IconImage = iconImage
        
        -- Tab tooltip
        local tooltipText = name
        local tooltipConnection
        local activeTooltip
        
        tabButton.MouseEnter:Connect(function()
            tooltipConnection = task.delay(0.5, function()
                activeTooltip = CryzenHub.Utils.CreateTooltip(tooltipText)
            end)
            
            if window.ActiveTab ~= tab then
                CryzenHub.Utils.Tween(tabButton, {BackgroundTransparency = 0.7}, 0.2)
            end
        end)
        
        tabButton.MouseLeave:Connect(function()
            if tooltipConnection then
                task.cancel(tooltipConnection)
                tooltipConnection = nil
            end
            
            if activeTooltip then
                activeTooltip:Destroy()
                activeTooltip = nil
            end
            
            if window.ActiveTab ~= tab then
                CryzenHub.Utils.Tween(tabButton, {BackgroundTransparency = 0.9}, 0.2)
            end
        end)
        
        -- Tab content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = name .. "Content"
        tabContent.BackgroundTransparency = 1
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        tabContent.ScrollBarThickness = 3
        tabContent.ScrollBarImageColor3 = theme.Accent
        tabContent.ScrollingEnabled = true
        tabContent.Visible = false
        tabContent.Parent = tabContentContainer
        tab.Content = tabContent
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, theme.ElementPadding)
        contentLayout.Parent = tabContent
        
        local contentPadding = Instance.new("UIPadding")
        contentPadding.PaddingTop = UDim.new(0, theme.WindowPadding)
        contentPadding.PaddingLeft = UDim.new(0, theme.WindowPadding)
        contentPadding.PaddingRight = UDim.new(0, theme.WindowPadding)
        contentPadding.PaddingBottom = UDim.new(0, theme.WindowPadding)
        contentPadding.Parent = tabContent
        
        -- Tab selection
        tabButton.MouseButton1Click:Connect(function()
            window:SelectTab(tab)
        end)
        
        -- Section creator
        function tab:Section(title)
            local section = {
                Title = title,
                Elements = {}
            }
            
            -- Create section container
            local sectionContainer = Instance.new("Frame")
            sectionContainer.Name = title .. "Section"
            sectionContainer.BackgroundColor3 = theme.Secondary
            sectionContainer.BackgroundTransparency = 0.2
            sectionContainer.Size = UDim2.new(1, 0, 0, 40) -- Will be auto-sized
            sectionContainer.AutomaticSize = Enum.AutomaticSize.Y
            sectionContainer.Parent = tabContent
            section.Container = sectionContainer
            CryzenHub.Utils.SetRoundedCorners(sectionContainer)
            CryzenHub.Utils.AddStroke(sectionContainer, theme.Stroke, 1, 0.5)
            
            -- Section header
            local sectionHeader = Instance.new("Frame")
            sectionHeader.Name = "Header"
            sectionHeader.BackgroundTransparency = 1
            sectionHeader.Size = UDim2.new(1, 0, 0, 36)
            sectionHeader.Parent = sectionContainer
            
            local sectionTitle = Instance.new("TextLabel")
            sectionTitle.Name = "Title"
            sectionTitle.BackgroundTransparency = 1
            sectionTitle.Size = UDim2.new(1, -40, 1, 0)
            sectionTitle.Position = UDim2.new(0, 15, 0, 0)
            sectionTitle.Font = theme.Font
            sectionTitle.Text = title
            sectionTitle.TextColor3 = theme.Text
            sectionTitle.TextSize = theme.TextSize
            sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            sectionTitle.Parent = sectionHeader
            
            -- Collapse button
            local collapseButton = Instance.new("ImageButton")
            collapseButton.Name = "CollapseButton"
            collapseButton.BackgroundTransparency = 1
            collapseButton.Size = UDim2.new(0, 20, 0, 20)
            collapseButton.Position = UDim2.new(1, -30, 0.5, -10)
            collapseButton.Image = "rbxassetid://7072706318" -- Chevron icon
            collapseButton.ImageColor3 = theme.TextDark
            collapseButton.Rotation = 0
            collapseButton.Parent = sectionHeader
            
            -- Section divider
            local divider = Instance.new("Frame")
            divider.Name = "Divider"
            divider.BackgroundColor3 = theme.Stroke
            divider.BackgroundTransparency = 0.5
            divider.BorderSizePixel = 0
            divider.Size = UDim2.new(1, -30, 0, 1)
            divider.Position = UDim2.new(0, 15, 1, 0)
            divider.Parent = sectionHeader
            
            -- Content container
            local sectionContent = Instance.new("Frame")
            sectionContent.Name = "Content"
            sectionContent.BackgroundTransparency = 1
            sectionContent.Size = UDim2.new(1, 0, 0, 0)
            sectionContent.Position = UDim2.new(0, 0, 0, 36)
            sectionContent.AutomaticSize = Enum.AutomaticSize.Y
            sectionContent.Parent = sectionContainer
            section.Content = sectionContent
            
            local contentLayout = Instance.new("UIListLayout")
            contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
            contentLayout.Padding = UDim.new(0, theme.ElementPadding)
            contentLayout.Parent = sectionContent
            
            local contentPadding = Instance.new("UIPadding")
            contentPadding.PaddingTop = UDim.new(0, theme.ElementPadding)
            contentPadding.PaddingLeft = UDim.new(0, 15)
            contentPadding.PaddingRight = UDim.new(0, 15)
            contentPadding.PaddingBottom = UDim.new(0, theme.ElementPadding)
            contentPadding.Parent = sectionContent
            
            -- Collapse functionality
            local collapsed = false
            collapseButton.MouseButton1Click:Connect(function()
                collapsed = not collapsed
                
                if collapsed then
                    CryzenHub.Utils.Tween(collapseButton, {Rotation = -90}, 0.3)
                    sectionContent.Visible = false
                else
                    CryzenHub.Utils.Tween(collapseButton, {Rotation = 0}, 0.3)
                    sectionContent.Visible = true
                end
            end)
            
            -- Element creation functions
            function section:Label(text, options)
                options = options or {}
                local element = {
                    Type = "Label",
                    Text = text
                }
                
                local labelFrame = Instance.new("Frame")
                labelFrame.Name = "Label"
                labelFrame.BackgroundTransparency = 1
                labelFrame.Size = UDim2.new(1, 0, 0, options.Height or 26)
                labelFrame.Parent = sectionContent
                element.Instance = labelFrame
                
                local labelText = Instance.new("TextLabel")
                labelText.Name = "Text"
                labelText.BackgroundTransparency = 1
                labelText.Size = UDim2.new(1, 0, 1, 0)
                labelText.Font = theme.Font
                labelText.Text = text
                labelText.TextColor3 = options.Color or theme.Text
                labelText.TextSize = options.TextSize or theme.TextSize
                labelText.TextWrapped = true
                labelText.RichText = true
                labelText.TextXAlignment = options.TextXAlignment or Enum.TextXAlignment.Left
                labelText.Parent = labelFrame
                element.TextLabel = labelText
                
                -- Update function
                function element:Update(newText)
                    self.Text = newText
                    labelText.Text = newText
                end
                
                table.insert(section.Elements, element)
                tab.Elements[options.Flag or "Label_" .. #section.Elements] = element
                return element
            end
            
            function section:Button(text, callback, options)
                options = options or {}
                local element = {
                    Type = "Button",
                    Text = text,
                    Callback = callback,
                    Enabled = true
                }
                
                local buttonFrame = Instance.new("Frame")
                buttonFrame.Name = "ButtonFrame"
                buttonFrame.BackgroundTransparency = 1
                buttonFrame.Size = UDim2.new(1, 0, 0, 32)
                buttonFrame.Parent = sectionContent
                element.Instance = buttonFrame
                
                local button = Instance.new("TextButton")
                button.Name = "Button"
                button.BackgroundColor3 = theme.Tertiary
                button.BackgroundTransparency = 0
                button.Size = UDim2.new(1, 0, 1, 0)
                button.Font = theme.Font
                button.Text = text
                button.TextColor3 = theme.Text
                button.TextSize = theme.TextSize
                button.ClipsDescendants = true
                button.Parent = buttonFrame
                element.Button = button
                CryzenHub.Utils.SetRoundedCorners(button, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(button, theme.Stroke, 1, 0.5)
                
                -- Button functionality
                button.MouseButton1Down:Connect(function(x, y)
                    if not element.Enabled then return end
                    CryzenHub.Utils.CreateRipple(button, Vector2.new(x, y))
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = theme.Accent}, 0.2)
                end)
                
                button.MouseButton1Up:Connect(function()
                    if not element.Enabled then return end
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = theme.Tertiary}, 0.2)
                end)
                
                button.MouseButton1Click:Connect(function()
                    if not element.Enabled then return end
                    
                    if callback then
                        task.spawn(callback)
                    end
                end)
                
                -- Hover effect
                button.MouseEnter:Connect(function()
                    if not element.Enabled then return end
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = CryzenHub.Utils.LightenColor(theme.Tertiary, 0.1)}, 0.2)
                end)
                
                button.MouseLeave:Connect(function()
                    if not element.Enabled then return end
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = theme.Tertiary}, 0.2)
                end)
                
                -- Update function
                function element:Update(newText)
                    self.Text = newText
                    button.Text = newText
                end
                
                -- Enable/disable functions
                function element:Enable()
                    self.Enabled = true
                    button.TextColor3 = theme.Text
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = theme.Tertiary}, 0.2)
                end
                
                function element:Disable()
                    self.Enabled = false
                    button.TextColor3 = theme.TextDark
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = CryzenHub.Utils.DarkenColor(theme.Tertiary, 0.1)}, 0.2)
                end
                
                table.insert(section.Elements, element)
                tab.Elements[options.Flag or "Button_" .. #section.Elements] = element
                return element
            end
            
            function section:Toggle(text, default, callback, options)
                options = options or {}
                default = default or false
                local flag = options.Flag or "Toggle_" .. #section.Elements + 1
                
                local element = {
                    Type = "Toggle",
                    Text = text,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Name = "ToggleFrame"
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.Size = UDim2.new(1, 0, 0, 32)
                toggleFrame.Parent = sectionContent
                element.Instance = toggleFrame
                
                local toggleButton = Instance.new("TextButton")
                toggleButton.Name = "ToggleButton"
                toggleButton.BackgroundTransparency = 1
                toggleButton.Size = UDim2.new(1, 0, 1, 0)
                toggleButton.Text = ""
                toggleButton.Parent = toggleFrame
                
                local toggleLabel = Instance.new("TextLabel")
                toggleLabel.Name = "Label"
                toggleLabel.BackgroundTransparency = 1
                toggleLabel.Size = UDim2.new(1, -50, 1, 0)
                toggleLabel.Font = theme.Font
                toggleLabel.Text = text
                toggleLabel.TextColor3 = theme.Text
                toggleLabel.TextSize = theme.TextSize
                toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                toggleLabel.Parent = toggleFrame
                
                local toggleBackground = Instance.new("Frame")
                toggleBackground.Name = "Background"
                toggleBackground.BackgroundColor3 = default and theme.Accent or theme.Tertiary
                toggleBackground.Size = UDim2.new(0, 40, 0, 20)
                toggleBackground.Position = UDim2.new(1, -45, 0.5, -10)
                toggleBackground.Parent = toggleFrame
                CryzenHub.Utils.SetRoundedCorners(toggleBackground, theme.RoundCornerRadius)
                CryzenHub.Utils.AddStroke(toggleBackground, theme.Stroke, 1, 0.5)
                
                local toggleIndicator = Instance.new("Frame")
                toggleIndicator.Name = "Indicator"
                toggleIndicator.BackgroundColor3 = theme.Text
                toggleIndicator.Size = UDim2.new(0, 16, 0, 16)
                toggleIndicator.Position = UDim2.new(default and 1 or 0, default and -18 or 2, 0.5, -8)
                toggleIndicator.Parent = toggleBackground
                CryzenHub.Utils.SetRoundedCorners(toggleIndicator, theme.RoundCornerRadius)
                
                -- Update toggle state
                local function updateToggle(value)
                    element.Value = value
                    CryzenHub.Utils.Tween(toggleBackground, {BackgroundColor3 = value and theme.Accent or theme.Tertiary}, 0.2)
                    CryzenHub.Utils.Tween(toggleIndicator, {Position = UDim2.new(value and 1 or 0, value and -18 or 2, 0.5, -8)}, 0.2)
                    
                    -- Update flag value
                    window.Flags[flag] = value
                    
                    -- Call callback
                    if callback then
                        task.spawn(callback, value)
                    end
                end
                
                -- Set initial value
                window.Flags[flag] = default
                
                -- Toggle button functionality
                toggleButton.MouseButton1Click:Connect(function()
                    updateToggle(not element.Value)
                end)
                
                -- Update function
                function element:Update(value)
                    updateToggle(value)
                end
                
                -- Set value function
                function element:SetValue(value)
                    updateToggle(value)
                end
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:Slider(text, options, callback)
                options = options or {}
                local min = options.Min or 0
                local max = options.Max or 100
                local default = options.Default or min
                local decimals = options.Decimals or 0
                local suffix = options.Suffix or ""
                local flag = options.Flag or "Slider_" .. #section.Elements + 1
                
                -- Validate default value
                default = math.clamp(default, min, max)
                
                local element = {
                    Type = "Slider",
                    Text = text,
                    Min = min,
                    Max = max,
                    Value = default,
                    Decimals = decimals,
                    Suffix = suffix,
                    Callback = callback,
                    Flag = flag
                }
                
                local sliderFrame = Instance.new("Frame")
                sliderFrame.Name = "SliderFrame"
                sliderFrame.BackgroundTransparency = 1
                sliderFrame.Size = UDim2.new(1, 0, 0, 50)
                sliderFrame.Parent = sectionContent
                element.Instance = sliderFrame
                
                local sliderLabel = Instance.new("TextLabel")
                sliderLabel.Name = "Label"
                sliderLabel.BackgroundTransparency = 1
                sliderLabel.Size = UDim2.new(1, 0, 0, 20)
                sliderLabel.Font = theme.Font
                sliderLabel.Text = text
                sliderLabel.TextColor3 = theme.Text
                sliderLabel.TextSize = theme.TextSize
                sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                sliderLabel.Parent = sliderFrame
                
                local valueLabel = Instance.new("TextBox")
                valueLabel.Name = "Value"
                valueLabel.BackgroundColor3 = theme.Tertiary
                valueLabel.Size = UDim2.new(0, 60, 0, 20)
                valueLabel.Position = UDim2.new(1, -60, 0, 0)
                valueLabel.Font = theme.Font
                valueLabel.Text = tostring(default) .. suffix
                valueLabel.TextColor3 = theme.Text
                valueLabel.TextSize = theme.TextSize
                valueLabel.Parent = sliderFrame
                CryzenHub.Utils.SetRoundedCorners(valueLabel, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(valueLabel, theme.Stroke, 1, 0.5)
                
                local sliderBackground = Instance.new("Frame")
                sliderBackground.Name = "Background"
                sliderBackground.BackgroundColor3 = theme.Tertiary
                sliderBackground.Size = UDim2.new(1, 0, 0, 10)
                sliderBackground.Position = UDim2.new(0, 0, 0, 30)
                sliderBackground.Parent = sliderFrame
                CryzenHub.Utils.SetRoundedCorners(sliderBackground, theme.RoundCornerRadius)
                CryzenHub.Utils.AddStroke(sliderBackground, theme.Stroke, 1, 0.5)
                
                local sliderFill = Instance.new("Frame")
                sliderFill.Name = "Fill"
                sliderFill.BackgroundColor3 = theme.Accent
                sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                sliderFill.Position = UDim2.new(0, 0, 0, 0)
                sliderFill.Parent = sliderBackground
                CryzenHub.Utils.SetRoundedCorners(sliderFill, theme.RoundCornerRadius)
                
                local sliderKnob = Instance.new("Frame")
                sliderKnob.Name = "Knob"
                sliderKnob.BackgroundColor3 = theme.Text
                sliderKnob.Size = UDim2.new(0, 16, 0, 16)
                sliderKnob.Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8)
                sliderKnob.Parent = sliderBackground
                CryzenHub.Utils.SetRoundedCorners(sliderKnob, theme.RoundCornerRadius)
                CryzenHub.Utils.AddStroke(sliderKnob, theme.Stroke, 1, 0.5)
                
                -- Slider functionality
                local isDragging = false
                
                local function formatValue(value)
                    if decimals == 0 then
                        return tostring(math.floor(value)) .. suffix
                    else
                        local fmt = "%." .. decimals .. "f"
                        return string.format(fmt, value) .. suffix
                    end
                end
                
                local function updateSlider(value, fromInput)
                    value = math.clamp(value, min, max)
                    
                    -- Round to decimals
                    if decimals == 0 then
                        value = math.floor(value)
                    else
                        local mult = 10 ^ decimals
                        value = math.floor(value * mult + 0.5) / mult
                    end
                    
                    element.Value = value
                    
                    -- Update visual elements
                    if not fromInput then
                        valueLabel.Text = formatValue(value)
                    end
                    
                    local percent = (value - min) / (max - min)
                    CryzenHub.Utils.Tween(sliderFill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
                    CryzenHub.Utils.Tween(sliderKnob, {Position = UDim2.new(percent, -8, 0.5, -8)}, 0.1)
                    
                    -- Update flag value
                    window.Flags[flag] = value
                    
                    -- Call callback
                    if callback then
                        task.spawn(callback, value)
                    end
                end
                
                -- Set initial value
                window.Flags[flag] = default
                
                -- Direct value input
                valueLabel.FocusLost:Connect(function(enterPressed)
                    local inputValue = tonumber(valueLabel.Text:gsub("[^%d.-]", ""))
                    
                    if inputValue then
                        updateSlider(inputValue, true)
                    else
                        valueLabel.Text = formatValue(element.Value)
                    end
                end)
                
                -- Mouse interaction
                local function onSliderInteraction(input)
                    local sliderPosition = sliderBackground.AbsolutePosition
                    local sliderSize = sliderBackground.AbsoluteSize
                    local mousePosition = input.Position.X
                    
                    local percent = math.clamp((mousePosition - sliderPosition.X) / sliderSize.X, 0, 1)
                    local value = min + (max - min) * percent
                    
                    updateSlider(value)
                end
                
                sliderBackground.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = true
                        onSliderInteraction(input)
                    end
                end)
                
                sliderKnob.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        onSliderInteraction(input)
                    end
                end)
                
                -- Update function
                function element:Update(value)
                    updateSlider(value)
                end
                
                -- Set value function
                function element:SetValue(value)
                    updateSlider(value)
                end
                
                -- Set min/max function
                function element:SetMinMax(newMin, newMax)
                    self.Min = newMin
                    self.Max = newMax
                    min = newMin
                    max = newMax
                    
                    -- Update slider with current value
                    updateSlider(math.clamp(element.Value, min, max))
                end
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:Dropdown(text, options, callback)
                options = options or {}
                local items = options.Items or {}
                local default = options.Default
                local multiSelect = options.MultiSelect or false
                local flag = options.Flag or "Dropdown_" .. #section.Elements + 1
                
                local selected = multiSelect and (default or {}) or default
                
                local element = {
                    Type = "Dropdown",
                    Text = text,
                    Items = items,
                    Value = selected,
                    MultiSelect = multiSelect,
                    Callback = callback,
                    Flag = flag
                }
                
                local dropdownFrame = Instance.new("Frame")
                dropdownFrame.Name = "DropdownFrame"
                dropdownFrame.BackgroundTransparency = 1
                dropdownFrame.Size = UDim2.new(1, 0, 0, 50)
                dropdownFrame.Parent = sectionContent
                element.Instance = dropdownFrame
                
                local dropdownLabel = Instance.new("TextLabel")
                dropdownLabel.Name = "Label"
                dropdownLabel.BackgroundTransparency = 1
                dropdownLabel.Size = UDim2.new(1, 0, 0, 20)
                dropdownLabel.Font = theme.Font
                dropdownLabel.Text = text
                dropdownLabel.TextColor3 = theme.Text
                dropdownLabel.TextSize = theme.TextSize
                dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                dropdownLabel.Parent = dropdownFrame
                
                local dropdownButton = Instance.new("TextButton")
                dropdownButton.Name = "Button"
                dropdownButton.BackgroundColor3 = theme.Tertiary
                dropdownButton.Size = UDim2.new(1, 0, 0, 30)
                dropdownButton.Position = UDim2.new(0, 0, 0, 20)
                dropdownButton.Font = theme.Font
                dropdownButton.Text = ""
                dropdownButton.TextColor3 = theme.Text
                dropdownButton.TextSize = theme.TextSize
                dropdownButton.Parent = dropdownFrame
                CryzenHub.Utils.SetRoundedCorners(dropdownButton, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(dropdownButton, theme.Stroke, 1, 0.5)
                
                local selectedText = Instance.new("TextLabel")
                selectedText.Name = "SelectedText"
                selectedText.BackgroundTransparency = 1
                selectedText.Size = UDim2.new(1, -30, 1, 0)
                selectedText.Position = UDim2.new(0, 10, 0, 0)
                selectedText.Font = theme.Font
                selectedText.Text = multiSelect 
                    and (#selected > 0 and table.concat(selected, ", ") or "None") 
                    or (selected or "Select...")
                selectedText.TextColor3 = theme.Text
                selectedText.TextSize = theme.TextSize
                selectedText.TextXAlignment = Enum.TextXAlignment.Left
                selectedText.TextTruncate = Enum.TextTruncate.AtEnd
                selectedText.Parent = dropdownButton
                
                local dropdownIcon = Instance.new("ImageLabel")
                dropdownIcon.Name = "Icon"
                dropdownIcon.BackgroundTransparency = 1
                dropdownIcon.Size = UDim2.new(0, 20, 0, 20)
                dropdownIcon.Position = UDim2.new(1, -25, 0.5, -10)
                dropdownIcon.Image = "rbxassetid://7072706318"
                dropdownIcon.ImageColor3 = theme.TextDark
                dropdownIcon.Rotation = 0
                dropdownIcon.Parent = dropdownButton
                
                -- Dropdown container
                local dropdownContainer = Instance.new("Frame")
                dropdownContainer.Name = "Container"
                dropdownContainer.BackgroundColor3 = theme.Tertiary
                dropdownContainer.BackgroundTransparency = 0
                dropdownContainer.BorderSizePixel = 0
                dropdownContainer.Size = UDim2.new(1, 0, 0, 0)
                dropdownContainer.Position = UDim2.new(0, 0, 1, 5)
                dropdownContainer.ClipsDescendants = true
                dropdownContainer.Visible = false
                dropdownContainer.ZIndex = 10
                dropdownContainer.Parent = dropdownFrame
                CryzenHub.Utils.SetRoundedCorners(dropdownContainer, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(dropdownContainer, theme.Stroke, 1, 0.5)
                
                -- Search bar
                local searchBar = Instance.new("TextBox")
                searchBar.Name = "SearchBar"
                searchBar.BackgroundColor3 = theme.Secondary
                searchBar.BackgroundTransparency = 0.5
                searchBar.Size = UDim2.new(1, -10, 0, 24)
                searchBar.Position = UDim2.new(0, 5, 0, 5)
                searchBar.Font = theme.Font
                searchBar.PlaceholderText = "Search..."
                searchBar.Text = ""
                searchBar.TextColor3 = theme.Text
                searchBar.TextSize = theme.TextSize
                searchBar.ZIndex = 11
                searchBar.Parent = dropdownContainer
                CryzenHub.Utils.SetRoundedCorners(searchBar, theme.SmallCornerRadius)
                
                -- Items container
                local itemsContainer = Instance.new("ScrollingFrame")
                itemsContainer.Name = "Items"
                itemsContainer.BackgroundTransparency = 1
                itemsContainer.Size = UDim2.new(1, 0, 1, -34)
                itemsContainer.Position = UDim2.new(0, 0, 0, 34)
                itemsContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
                itemsContainer.ScrollBarThickness = 3
                itemsContainer.ScrollBarImageColor3 = theme.Accent
                itemsContainer.AutomaticCanvasSize = Enum.AutomaticSize.Y
                itemsContainer.ZIndex = 11
                itemsContainer.Parent = dropdownContainer
                
                local itemsLayout = Instance.new("UIListLayout")
                itemsLayout.SortOrder = Enum.SortOrder.LayoutOrder
                itemsLayout.Padding = UDim.new(0, 2)
                itemsLayout.Parent = itemsContainer
                
                local itemsPadding = Instance.new("UIPadding")
                itemsPadding.PaddingLeft = UDim.new(0, 5)
                itemsPadding.PaddingRight = UDim.new(0, 5)
                itemsPadding.PaddingTop = UDim.new(0, 5)
                itemsPadding.PaddingBottom = UDim.new(0, 5)
                itemsPadding.Parent = itemsContainer
                
                -- Dropdown functionality
                local isOpen = false
                
                local function updateText()
                    if multiSelect then
                        if #selected > 0 then
                            selectedText.Text = table.concat(selected, ", ")
                        else
                            selectedText.Text = "None"
                        end
                    else
                        selectedText.Text = selected or "Select..."
                    end
                end
                
                local function updateDropdown(newValue)
                    element.Value = newValue
                    window.Flags[flag] = newValue
                    
                    updateText()
                    
                    if callback then
                        task.spawn(callback, newValue)
                    end
                end
                
                -- Initialize value
                window.Flags[flag] = selected
                
                -- Toggle dropdown
                dropdownButton.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    
                    if isOpen then
                        dropdownContainer.Visible = true
                        CryzenHub.Utils.Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, math.min(150, #items * 30 + 34))}, 0.2)
                        CryzenHub.Utils.Tween(dropdownIcon, {Rotation = 180}, 0.2)
                    else
                        CryzenHub.Utils.Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        CryzenHub.Utils.Tween(dropdownIcon, {Rotation = 0}, 0.2)
                        task.delay(0.2, function()
                            dropdownContainer.Visible = false
                        end)
                    end
                end)
                
                -- Search functionality
                searchBar:GetPropertyChangedSignal("Text"):Connect(function()
                    local searchText = string.lower(searchBar.Text)
                    
                    for _, itemButton in pairs(itemsContainer:GetChildren()) do
                        if itemButton:IsA("TextButton") then
                            if searchText == "" then
                                itemButton.Visible = true
                            else
                                local itemText = string.lower(itemButton.Text)
                                itemButton.Visible = string.find(itemText, searchText) ~= nil
                            end
                        end
                    end
                end)
                
                -- Create item buttons
                local function createItems()
                    -- Clear existing items
                    for _, item in pairs(itemsContainer:GetChildren()) do
                        if item:IsA("TextButton") then
                            item:Destroy()
                        end
                    end
                    
                    -- Create new items
                    for i, item in ipairs(items) do
                        local itemButton = Instance.new("TextButton")
                        itemButton.Name = "Item_" .. i
                        itemButton.BackgroundColor3 = theme.Secondary
                        itemButton.BackgroundTransparency = 0.8
                        itemButton.Size = UDim2.new(1, 0, 0, 28)
                        itemButton.Font = theme.Font
                        itemButton.Text = item
                        itemButton.TextColor3 = theme.Text
                        itemButton.TextSize = theme.TextSize
                        itemButton.ZIndex = 12
                        itemButton.Parent = itemsContainer
                        CryzenHub.Utils.SetRoundedCorners(itemButton, theme.SmallCornerRadius)
                        
                        -- Highlight selected items
                        if multiSelect and table.find(selected, item) then
                            itemButton.BackgroundColor3 = theme.Accent
                            itemButton.BackgroundTransparency = 0.7
                        elseif not multiSelect and selected == item then
                            itemButton.BackgroundColor3 = theme.Accent
                            itemButton.BackgroundTransparency = 0.7
                        end
                        
                        -- Item selection
                        itemButton.MouseButton1Click:Connect(function()
                            if multiSelect then
                                -- Toggle selection
                                local index = table.find(selected, item)
                                if index then
                                    table.remove(selected, index)
                                    itemButton.BackgroundColor3 = theme.Secondary
                                    itemButton.BackgroundTransparency = 0.8
                                else
                                    table.insert(selected, item)
                                    itemButton.BackgroundColor3 = theme.Accent
                                    itemButton.BackgroundTransparency = 0.7
                                end
                                
                                updateDropdown(selected)
                            else
                                -- Single selection
                                selected = item
                                updateDropdown(selected)
                                
                                -- Close dropdown
                                isOpen = false
                                CryzenHub.Utils.Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                                CryzenHub.Utils.Tween(dropdownIcon, {Rotation = 0}, 0.2)
                                task.delay(0.2, function()
                                    dropdownContainer.Visible = false
                                end)
                            end
                        end)
                        
                        -- Hover effect
                        itemButton.MouseEnter:Connect(function()
                            if (multiSelect and not table.find(selected, item)) or 
                               (not multiSelect and selected ~= item) then
                                CryzenHub.Utils.Tween(itemButton, {BackgroundTransparency = 0.5}, 0.2)
                            end
                        end)
                        
                        itemButton.MouseLeave:Connect(function()
                            if (multiSelect and not table.find(selected, item)) or 
                               (not multiSelect and selected ~= item) then
                                CryzenHub.Utils.Tween(itemButton, {BackgroundTransparency = 0.8}, 0.2)
                            end
                        end)
                    end
                end
                
                createItems()
                
                -- Update function
                function element:Update(newItems)
                    self.Items = newItems
                    items = newItems
                    createItems()
                    
                    -- Update selected text
                    updateText()
                end
                
                -- Set value function
                function element:SetValue(newValue)
                    if multiSelect then
                        selected = type(newValue) == "table" and newValue or {newValue}
                    else
                        selected = newValue
                    end
                    
                    updateDropdown(selected)
                    createItems() -- Refresh to highlight selected items
                end
                
                -- Add item function
                function element:AddItem(newItem)
                    table.insert(items, newItem)
                    createItems()
                end
                
                -- Remove item function
                function element:RemoveItem(item)
                    for i, v in ipairs(items) do
                        if v == item then
                            table.remove(items, i)
                            break
                        end
                    end
                    
                    -- Remove from selected if it's there
                    if multiSelect then
                        local index = table.find(selected, item)
                        if index then
                            table.remove(selected, index)
                            updateDropdown(selected)
                        end
                    elseif selected == item then
                        selected = nil
                        updateDropdown(nil)
                    end
                    
                    createItems()
                end
                
                -- Clear function
                function element:Clear()
                    items = {}
                    if multiSelect then
                        selected = {}
                    else
                        selected = nil
                    end
                    
                    updateDropdown(selected)
                    createItems()
                end
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:Textbox(text, options, callback)
                options = options or {}
                local default = options.Default or ""
                local placeholder = options.Placeholder or "Enter text..."
                local clearOnFocus = options.ClearOnFocus
                if clearOnFocus == nil then clearOnFocus = false end
                local flag = options.Flag or "Textbox_" .. #section.Elements + 1
                
                local element = {
                    Type = "Textbox",
                    Text = text,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                local textboxFrame = Instance.new("Frame")
                textboxFrame.Name = "TextboxFrame"
                textboxFrame.BackgroundTransparency = 1
                textboxFrame.Size = UDim2.new(1, 0, 0, 50)
                textboxFrame.Parent = sectionContent
                element.Instance = textboxFrame
                
                local textboxLabel = Instance.new("TextLabel")
                textboxLabel.Name = "Label"
                textboxLabel.BackgroundTransparency = 1
                textboxLabel.Size = UDim2.new(1, 0, 0, 20)
                textboxLabel.Font = theme.Font
                textboxLabel.Text = text
                textboxLabel.TextColor3 = theme.Text
                textboxLabel.TextSize = theme.TextSize
                textboxLabel.TextXAlignment = Enum.TextXAlignment.Left
                textboxLabel.Parent = textboxFrame
                
                local textboxContainer = Instance.new("Frame")
                textboxContainer.Name = "Container"
                textboxContainer.BackgroundColor3 = theme.Tertiary
                textboxContainer.Size = UDim2.new(1, 0, 0, 30)
                textboxContainer.Position = UDim2.new(0, 0, 0, 20)
                textboxContainer.Parent = textboxFrame
                CryzenHub.Utils.SetRoundedCorners(textboxContainer, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(textboxContainer, theme.Stroke, 1, 0.5)
                
                local textbox = Instance.new("TextBox")
                textbox.Name = "Textbox"
                textbox.BackgroundTransparency = 1
                textbox.Size = UDim2.new(1, -10, 1, 0)
                textbox.Position = UDim2.new(0, 5, 0, 0)
                textbox.Font = theme.Font
                textbox.Text = default
                textbox.PlaceholderText = placeholder
                textbox.TextColor3 = theme.Text
                textbox.TextSize = theme.TextSize
                textbox.TextXAlignment = Enum.TextXAlignment.Left
                textbox.ClearTextOnFocus = clearOnFocus
                textbox.Parent = textboxContainer
                
                -- Initialize flag
                window.Flags[flag] = default
                
                -- Textbox functionality
                textbox.Focused:Connect(function()
                    CryzenHub.Utils.Tween(textboxContainer, {BackgroundColor3 = CryzenHub.Utils.LightenColor(theme.Tertiary, 0.1)}, 0.2)
                end)
                
                textbox.FocusLost:Connect(function(enterPressed)
                    CryzenHub.Utils.Tween(textboxContainer, {BackgroundColor3 = theme.Tertiary}, 0.2)
                    
                    element.Value = textbox.Text
                    window.Flags[flag] = textbox.Text
                    
                    if callback then
                        task.spawn(callback, textbox.Text, enterPressed)
                    end
                end)
                
                -- Update function
                function element:Update(value)
                    self.Value = value
                    textbox.Text = value
                    window.Flags[flag] = value
                    
                    if callback then
                        task.spawn(callback, value, false)
                    end
                end
                
                -- Set value function
                function element:SetValue(value)
                    self:Update(value)
                end
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:ColorPicker(text, options, callback)
                options = options or {}
                local default = options.Default or Color3.fromRGB(255, 255, 255)
                local flag = options.Flag or "ColorPicker_" .. #section.Elements + 1
                
                local element = {
                    Type = "ColorPicker",
                    Text = text,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                local colorPickerFrame = Instance.new("Frame")
                colorPickerFrame.Name = "ColorPickerFrame"
                colorPickerFrame.BackgroundTransparency = 1
                colorPickerFrame.Size = UDim2.new(1, 0, 0, 32)
                colorPickerFrame.Parent = sectionContent
                element.Instance = colorPickerFrame
                
                local colorPickerLabel = Instance.new("TextLabel")
                colorPickerLabel.Name = "Label"
                colorPickerLabel.BackgroundTransparency = 1
                colorPickerLabel.Size = UDim2.new(1, -40, 1, 0)
                colorPickerLabel.Font = theme.Font
                colorPickerLabel.Text = text
                colorPickerLabel.TextColor3 = theme.Text
                colorPickerLabel.TextSize = theme.TextSize
                colorPickerLabel.TextXAlignment = Enum.TextXAlignment.Left
                colorPickerLabel.Parent = colorPickerFrame
                
                local colorDisplay = Instance.new("Frame")
                colorDisplay.Name = "ColorDisplay"
                colorDisplay.BackgroundColor3 = default
                colorDisplay.Size = UDim2.new(0, 30, 0, 30)
                colorDisplay.Position = UDim2.new(1, -30, 0.5, -15)
                colorDisplay.Parent = colorPickerFrame
                CryzenHub.Utils.SetRoundedCorners(colorDisplay, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(colorDisplay, theme.Stroke, 1, 0.5)
                
                local colorButton = Instance.new("TextButton")
                colorButton.Name = "ColorButton"
                colorButton.BackgroundTransparency = 1
                colorButton.Size = UDim2.new(1, 0, 1, 0)
                colorButton.Text = ""
                colorButton.Parent = colorDisplay
                
                -- Color picker popup
                local pickerPopup = Instance.new("Frame")
                pickerPopup.Name = "PickerPopup"
                pickerPopup.BackgroundColor3 = theme.Secondary
                pickerPopup.BackgroundTransparency = 0
                pickerPopup.Size = UDim2.new(0, 260, 0, 260)
                pickerPopup.Position = UDim2.new(1, 10, 0, 0)
                pickerPopup.Visible = false
                pickerPopup.ZIndex = 100
                pickerPopup.Parent = colorPickerFrame
                CryzenHub.Utils.SetRoundedCorners(pickerPopup, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(pickerPopup, theme.Stroke, 1, 0.5)
                
                -- Color saturation/value panel
                local colorPanel = Instance.new("ImageLabel")
                colorPanel.Name = "ColorPanel"
                colorPanel.BackgroundColor3 = default
                colorPanel.Size = UDim2.new(0, 200, 0, 200)
                colorPanel.Position = UDim2.new(0.5, -100, 0, 10)
                colorPanel.Image = "rbxassetid://4155801252" -- Saturation/value gradient
                colorPanel.ZIndex = 101
                colorPanel.Parent = pickerPopup
                CryzenHub.Utils.SetRoundedCorners(colorPanel, theme.SmallCornerRadius)
                
                -- Hue slider
                local hueSlider = Instance.new("Frame")
                hueSlider.Name = "HueSlider"
                hueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                hueSlider.Size = UDim2.new(0, 200, 0, 20)
                hueSlider.Position = UDim2.new(0.5, -100, 0, 220)
                hueSlider.ZIndex = 101
                hueSlider.Parent = pickerPopup
                CryzenHub.Utils.SetRoundedCorners(hueSlider, theme.SmallCornerRadius)
                
                -- Hue gradient
                local hueGradient = Instance.new("UIGradient")
                hueGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                })
                hueGradient.Parent = hueSlider
                
                -- SV selector
                local svSelector = Instance.new("Frame")
                svSelector.Name = "SVSelector"
                svSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                svSelector.BackgroundTransparency = 0
                svSelector.BorderColor3 = Color3.fromRGB(0, 0, 0)
                svSelector.BorderSizePixel = 1
                svSelector.Size = UDim2.new(0, 10, 0, 10)
                svSelector.ZIndex = 102
                svSelector.Parent = colorPanel
                CryzenHub.Utils.SetRoundedCorners(svSelector, theme.RoundCornerRadius)
                
                -- Hue selector
                local hueSelector = Instance.new("Frame")
                hueSelector.Name = "HueSelector"
                hueSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                hueSelector.BorderColor3 = Color3.fromRGB(0, 0, 0)
                hueSelector.BorderSizePixel = 1
                hueSelector.Size = UDim2.new(0, 5, 1, 0)
                hueSelector.ZIndex = 102
                hueSelector.Parent = hueSlider
                CryzenHub.Utils.SetRoundedCorners(hueSelector, UDim.new(0, 2))
                
                -- RGB inputs
                local rgbContainer = Instance.new("Frame")
                rgbContainer.Name = "RGBContainer"
                rgbContainer.BackgroundTransparency = 1
                rgbContainer.Size = UDim2.new(0, 200, 0, 20)
                rgbContainer.Position = UDim2.new(0.5, -100, 0, 245)
                rgbContainer.ZIndex = 101
                rgbContainer.Parent = pickerPopup
                
                local function createRGBInput(name, xPos)
                    local container = Instance.new("Frame")
                    container.Name = name
                    container.BackgroundColor3 = theme.Tertiary
                    container.Size = UDim2.new(0, 60, 0, 20)
                    container.Position = UDim2.new(0, xPos, 0, 0)
                    container.ZIndex = 101
                    container.Parent = rgbContainer
                    CryzenHub.Utils.SetRoundedCorners(container, theme.SmallCornerRadius)
                    
                    local label = Instance.new("TextLabel")
                    label.Name = "Label"
                    label.BackgroundTransparency = 1
                    label.Size = UDim2.new(0, 15, 1, 0)
                    label.Font = theme.Font
                    label.Text = string.sub(name, 1, 1)
                    label.TextColor3 = theme.Text
                    label.TextSize = theme.SubTextSize
                    label.ZIndex = 102
                    label.Parent = container
                    
                    local input = Instance.new("TextBox")
                    input.Name = "Input"
                    input.BackgroundTransparency = 1
                    input.Size = UDim2.new(1, -15, 1, 0)
                    input.Position = UDim2.new(0, 15, 0, 0)
                    input.Font = theme.Font
                    input.Text = "255"
                    input.TextColor3 = theme.Text
                    input.TextSize = theme.SubTextSize
                    input.ZIndex = 102
                    input.Parent = container
                    
                    return input
                end
                
                local rInput = createRGBInput("Red", 0)
                local gInput = createRGBInput("Green", 70)
                local bInput = createRGBInput("Blue", 140)
                
                -- Color picker variables
                local hue, saturation, value = 0, 0, 1
                local hsvDragging = false
                local hueDragging = false
                
                -- Initialize flag
                window.Flags[flag] = default
                
                -- Functions for color manipulation
                local function updateRGB()
                    local color = element.Value
                    rInput.Text = math.floor(color.R * 255 + 0.5)
                    gInput.Text = math.floor(color.G * 255 + 0.5)
                    bInput.Text = math.floor(color.B * 255 + 0.5)
                end
                
                local function updateFromRGB()
                    local r = tonumber(rInput.Text) or 255
                    local g = tonumber(gInput.Text) or 255
                    local b = tonumber(bInput.Text) or 255
                    
                    r = math.clamp(r, 0, 255)
                    g = math.clamp(g, 0, 255)
                    b = math.clamp(b, 0, 255)
                    
                    rInput.Text = tostring(math.floor(r))
                    gInput.Text = tostring(math.floor(g))
                    bInput.Text = tostring(math.floor(b))
                    
                    local newColor = Color3.fromRGB(r, g, b)
                    element.Value = newColor
                    colorDisplay.BackgroundColor3 = newColor
                    window.Flags[flag] = newColor
                    
                    -- Update HSV
                    hue, saturation, value = Color3.toHSV(newColor)
                    
                    -- Update color panel
                    colorPanel.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                    
                    -- Update selectors
                    svSelector.Position = UDim2.new(saturation, -5, 1 - value, -5)
                    hueSelector.Position = UDim2.new(hue, -2.5, 0, 0)
                    
                    if callback then
                        task.spawn(callback, newColor)
                    end
                end
                
                local function HSVToRGB(h, s, v)
                    return Color3.fromHSV(h, s, v)
                end
                
                local function updateColor()
                    local newColor = HSVToRGB(hue, saturation, value)
                    element.Value = newColor
                    colorDisplay.BackgroundColor3 = newColor
                    colorPanel.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                    window.Flags[flag] = newColor
                    
                    updateRGB()
                    
                    if callback then
                        task.spawn(callback, newColor)
                    end
                end
                
                -- Set initial color
                updateRGB()
                
                -- RGB input handlers
                rInput.FocusLost:Connect(updateFromRGB)
                gInput.FocusLost:Connect(updateFromRGB)
                bInput.FocusLost:Connect(updateFromRGB)
                
                -- Color panel interaction
                colorPanel.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        hsvDragging = true
                        
                        -- Get initial position
                        local panelPosition = colorPanel.AbsolutePosition
                        local panelSize = colorPanel.AbsoluteSize
                        local mousePosition = input.Position
                        
                        -- Calculate saturation and value
                        local relativeX = math.clamp((mousePosition.X - panelPosition.X) / panelSize.X, 0, 1)
                        local relativeY = math.clamp((mousePosition.Y - panelPosition.Y) / panelSize.Y, 0, 1)
                        
                        saturation = relativeX
                        value = 1 - relativeY
                        
                        -- Update selector position
                        svSelector.Position = UDim2.new(relativeX, -5, relativeY, -5)
                        
                        -- Update color
                        updateColor()
                    end
                end)
                
                colorPanel.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and hsvDragging then
                        -- Get position
                        local panelPosition = colorPanel.AbsolutePosition
                        local panelSize = colorPanel.AbsoluteSize
                        local mousePosition = input.Position
                        
                        -- Calculate saturation and value
                        local relativeX = math.clamp((mousePosition.X - panelPosition.X) / panelSize.X, 0, 1)
                        local relativeY = math.clamp((mousePosition.Y - panelPosition.Y) / panelSize.Y, 0, 1)
                        
                        saturation = relativeX
                        value = 1 - relativeY
                        
                        -- Update selector position
                        svSelector.Position = UDim2.new(relativeX, -5, relativeY, -5)
                        
                        -- Update color
                        updateColor()
                    end
                end)
                
                -- Hue slider interaction
                hueSlider.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        hueDragging = true
                        
                        -- Get initial position
                        local sliderPosition = hueSlider.AbsolutePosition
                        local sliderSize = hueSlider.AbsoluteSize
                        local mousePosition = input.Position
                        
                        -- Calculate hue
                        local relativeX = math.clamp((mousePosition.X - sliderPosition.X) / sliderSize.X, 0, 1)
                        
                        hue = relativeX
                        
                        -- Update selector position
                        hueSelector.Position = UDim2.new(relativeX, -2.5, 0, 0)
                        
                        -- Update color
                        updateColor()
                    end
                end)
                
                hueSlider.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and hueDragging then
                        -- Get position
                        local sliderPosition = hueSlider.AbsolutePosition
                        local sliderSize = hueSlider.AbsoluteSize
                        local mousePosition = input.Position
                        
                        -- Calculate hue
                        local relativeX = math.clamp((mousePosition.X - sliderPosition.X) / sliderSize.X, 0, 1)
                        
                        hue = relativeX
                        
                        -- Update selector position
                        hueSelector.Position = UDim2.new(relativeX, -2.5, 0, 0)
                        
                        -- Update color
                        updateColor()
                    end
                end)
                
                -- End dragging
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        hsvDragging = false
                        hueDragging = false
                    end
                end)
                
                -- Toggle color picker popup
                local isPickerOpen = false
                
                colorButton.MouseButton1Click:Connect(function()
                    isPickerOpen = not isPickerOpen
                    pickerPopup.Visible = isPickerOpen
                end)
                
                -- Close picker when clicking elsewhere
                UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and isPickerOpen then
                        local mousePosition = UserInputService:GetMouseLocation()
                        
                        local pickerPos = pickerPopup.AbsolutePosition
                        local pickerSize = pickerPopup.AbsoluteSize
                        
                        local colorDisplayPos = colorDisplay.AbsolutePosition
                        local colorDisplaySize = colorDisplay.AbsoluteSize
                        
                        if not (mousePosition.X >= pickerPos.X and mousePosition.X <= pickerPos.X + pickerSize.X and
                                mousePosition.Y >= pickerPos.Y and mousePosition.Y <= pickerPos.Y + pickerSize.Y) and
                           not (mousePosition.X >= colorDisplayPos.X and mousePosition.X <= colorDisplayPos.X + colorDisplaySize.X and
                                mousePosition.Y >= colorDisplayPos.Y and mousePosition.Y <= colorDisplayPos.Y + colorDisplaySize.Y) then
                            
                            isPickerOpen = false
                            pickerPopup.Visible = false
                        end
                    end
                end)
                
                -- Update function
                function element:Update(newColor)
                    self.Value = newColor
                    colorDisplay.BackgroundColor3 = newColor
                    window.Flags[flag] = newColor
                    
                    -- Update HSV
                    hue, saturation, value = Color3.toHSV(newColor)
                    
                    -- Update color panel
                    colorPanel.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                    
                    -- Update selectors
                    svSelector.Position = UDim2.new(saturation, -5, 1 - value, -5)
                    hueSelector.Position = UDim2.new(hue, -2.5, 0, 0)
                    
                    -- Update RGB inputs
                    updateRGB()
                    
                    if callback then
                        task.spawn(callback, newColor)
                    end
                end
                
                -- Set value function
                function element:SetValue(newColor)
                    self:Update(newColor)
                end
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:Keybind(text, options, callback)
                options = options or {}
                local default = options.Default
                local flag = options.Flag or "Keybind_" .. #section.Elements + 1
                
                local element = {
                    Type = "Keybind",
                    Text = text,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                local keybindFrame = Instance.new("Frame")
                keybindFrame.Name = "KeybindFrame"
                keybindFrame.BackgroundTransparency = 1
                keybindFrame.Size = UDim2.new(1, 0, 0, 32)
                keybindFrame.Parent = sectionContent
                element.Instance = keybindFrame
                
                local keybindLabel = Instance.new("TextLabel")
                keybindLabel.Name = "Label"
                keybindLabel.BackgroundTransparency = 1
                keybindLabel.Size = UDim2.new(1, -80, 1, 0)
                keybindLabel.Font = theme.Font
                keybindLabel.Text = text
                keybindLabel.TextColor3 = theme.Text
                keybindLabel.TextSize = theme.TextSize
                keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
                keybindLabel.Parent = keybindFrame
                
                local keybindButton = Instance.new("TextButton")
                keybindButton.Name = "Button"
                keybindButton.BackgroundColor3 = theme.Tertiary
                keybindButton.Size = UDim2.new(0, 70, 0, 30)
                keybindButton.Position = UDim2.new(1, -70, 0.5, -15)
                keybindButton.Font = theme.Font
                keybindButton.Text = default and default.Name or "None"
                keybindButton.TextColor3 = theme.Text
                keybindButton.TextSize = theme.TextSize
                keybindButton.Parent = keybindFrame
                CryzenHub.Utils.SetRoundedCorners(keybindButton, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(keybindButton, theme.Stroke, 1, 0.5)
                
                -- Initialize flag
                window.Flags[flag] = default
                
                -- Variables
                local waitingForInput = false
                
                -- Update keybind display
                local function updateKeybind(key)
                    element.Value = key
                    keybindButton.Text = key and key.Name or "None"
                    window.Flags[flag] = key
                    
                    -- Reset state
                    waitingForInput = false
                    
                    if callback then
                        task.spawn(callback, key)
                    end
                end
                
                -- Button click to change keybind
                keybindButton.MouseButton1Click:Connect(function()
                    waitingForInput = true
                    keybindButton.Text = "..."
                    
                    -- Wait for input
                    local inputConnection
                    inputConnection = UserInputService.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            -- Escape to cancel
                            if input.KeyCode == Enum.KeyCode.Escape then
                                updateKeybind(element.Value)
                            else
                                updateKeybind(input.KeyCode)
                            end
                            
                            inputConnection:Disconnect()
                        end
                    end)
                    
                    -- Cancel binding if clicked elsewhere
                    local cancelConnection
                    cancelConnection = UserInputService.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            local mousePos = UserInputService:GetMouseLocation()
                            local buttonPos = keybindButton.AbsolutePosition
                            local buttonSize = keybindButton.AbsoluteSize
                            
                            if not (mousePos.X >= buttonPos.X and mousePos.X <= buttonPos.X + buttonSize.X and
                                   mousePos.Y >= buttonPos.Y and mousePos.Y <= buttonPos.Y + buttonSize.Y) then
                                
                                updateKeybind(element.Value)
                                inputConnection:Disconnect()
                                cancelConnection:Disconnect()
                            end
                        end
                    end)
                end)
                
                -- Listen for keybind presses
                UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Keyboard and 
                       element.Value and input.KeyCode == element.Value and not waitingForInput then
                        
                        if callback then
                            task.spawn(callback, element.Value)
                        end
                    end
                end)
                
                -- Hover effects
                keybindButton.MouseEnter:Connect(function()
                    CryzenHub.Utils.Tween(keybindButton, {BackgroundColor3 = CryzenHub.Utils.LightenColor(theme.Tertiary, 0.1)}, 0.2)
                end)
                
                keybindButton.MouseLeave:Connect(function()
                    CryzenHub.Utils.Tween(keybindButton, {BackgroundColor3 = theme.Tertiary}, 0.2)
                end)
                
                -- Update function
                function element:Update(key)
                    updateKeybind(key)
                end
                
                -- Set value function
                function element:SetValue(key)
                    updateKeybind(key)
                end
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:Checkbox(text, default, callback, options)
                options = options or {}
                default = default or false
                local flag = options.Flag or "Checkbox_" .. #section.Elements + 1
                
                local element = {
                    Type = "Checkbox",
                    Text = text,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                local checkboxFrame = Instance.new("Frame")
                checkboxFrame.Name = "CheckboxFrame"
                checkboxFrame.BackgroundTransparency = 1
                checkboxFrame.Size = UDim2.new(1, 0, 0, 32)
                checkboxFrame.Parent = sectionContent
                element.Instance = checkboxFrame
                
                local checkboxLabel = Instance.new("TextLabel")
                checkboxLabel.Name = "Label"
                checkboxLabel.BackgroundTransparency = 1
                checkboxLabel.Size = UDim2.new(1, -30, 1, 0)
                checkboxLabel.Position = UDim2.new(0, 30, 0, 0)
                checkboxLabel.Font = theme.Font
                checkboxLabel.Text = text
                checkboxLabel.TextColor3 = theme.Text
                checkboxLabel.TextSize = theme.TextSize
                checkboxLabel.TextXAlignment = Enum.TextXAlignment.Left
                checkboxLabel.Parent = checkboxFrame
                
                local checkboxButton = Instance.new("TextButton")
                checkboxButton.Name = "Button"
                checkboxButton.BackgroundColor3 = theme.Tertiary
                checkboxButton.Size = UDim2.new(0, 20, 0, 20)
                checkboxButton.Position = UDim2.new(0, 0, 0.5, -10)
                checkboxButton.Text = ""
                checkboxButton.Parent = checkboxFrame
                CryzenHub.Utils.SetRoundedCorners(checkboxButton, theme.SmallCornerRadius)
                CryzenHub.Utils.AddStroke(checkboxButton, theme.Stroke, 1, 0.5)
                
                local checkmark = Instance.new("ImageLabel")
                checkmark.Name = "Checkmark"
                checkmark.BackgroundTransparency = 1
                checkmark.Size = UDim2.new(0.8, 0, 0.8, 0)
                checkmark.Position = UDim2.new(0.1, 0, 0.1, 0)
                checkmark.Image = "rbxassetid://7072706620" -- Checkmark icon
                checkmark.ImageColor3 = theme.Text
                checkmark.ImageTransparency = default and 0 or 1
                checkmark.Parent = checkboxButton
                
                -- Initialize flag
                window.Flags[flag] = default
                
                -- Update checkbox state
                local function updateCheckbox(value)
                    element.Value = value
                    CryzenHub.Utils.Tween(checkboxButton, {BackgroundColor3 = value and theme.Accent or theme.Tertiary}, 0.2)
                    CryzenHub.Utils.Tween(checkmark, {ImageTransparency = value and 0 or 1}, 0.2)
                    window.Flags[flag] = value
                    
                    if callback then
                        task.spawn(callback, value)
                    end
                end
                
                -- Set initial state
                if default then
                    checkboxButton.BackgroundColor3 = theme.Accent
                end
                
                -- Checkbox functionality
                checkboxButton.MouseButton1Click:Connect(function()
                    updateCheckbox(not element.Value)
                end)
                
                -- Click on label too
                local textButton = Instance.new("TextButton")
                textButton.Name = "TextButton"
                textButton.BackgroundTransparency = 1
                textButton.Size = UDim2.new(1, 0, 1, 0)
                textButton.Text = ""
                textButton.Parent = checkboxLabel
                
                textButton.MouseButton1Click:Connect(function()
                    updateCheckbox(not element.Value)
                end)
                
                -- Hover effects
                checkboxButton.MouseEnter:Connect(function()
                    if not element.Value then
                        CryzenHub.Utils.Tween(checkboxButton, {BackgroundColor3 = CryzenHub.Utils.LightenColor(theme.Tertiary, 0.1)}, 0.2)
                    end
                end)
                
                checkboxButton.MouseLeave:Connect(function()
                    if not element.Value then
                        CryzenHub.Utils.Tween(checkboxButton, {BackgroundColor3 = theme.Tertiary}, 0.2)
                    end
                end)
                
                -- Update function
                function element:Update(value)
                    updateCheckbox(value)
                end
                
                -- Set value function
                function element:SetValue(value)
                    updateCheckbox(value)
                end
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:Divider(options)
                options = options or {}
                local element = {
                    Type = "Divider"
                }
                
                local dividerFrame = Instance.new("Frame")
                dividerFrame.Name = "Divider"
                dividerFrame.BackgroundTransparency = 1
                dividerFrame.Size = UDim2.new(1, 0, 0, 10)
                dividerFrame.Parent = sectionContent
                element.Instance = dividerFrame
                
                local dividerLine = Instance.new("Frame")
                dividerLine.Name = "Line"
                dividerLine.BackgroundColor3 = options.Color or theme.Stroke
                dividerLine.BackgroundTransparency = options.Transparency or 0.5
                dividerLine.BorderSizePixel = 0
                dividerLine.Size = UDim2.new(1, 0, 0, 1)
                dividerLine.Position = UDim2.new(0, 0, 0.5, 0)
                dividerLine.Parent = dividerFrame
                
                table.insert(section.Elements, element)
                return element
            end
            
            return section
        end
        
        table.insert(window.Tabs, tab)
        return tab
    end
    
    -- Select a tab
    function window:SelectTab(tab)
        if window.ActiveTab then
            -- Deselect current tab
            local currentTab = window.ActiveTab
            currentTab.Button.BackgroundTransparency = 0.9
            currentTab.IconImage.ImageColor3 = theme.TextDark
            currentTab.ActiveIndicator.BackgroundTransparency = 1
            currentTab.Content.Visible = false
        end
        
        -- Select new tab
        window.ActiveTab = tab
        tab.Button.BackgroundTransparency = 0.5
        tab.IconImage.ImageColor3 = theme.Accent
        tab.ActiveIndicator.BackgroundTransparency = 0
        tab.Content.Visible = true
    end
    
    -- Notify function
    function window:Notify(options)
        options = options or {}
        local title = options.Title or "Notification"
        local message = options.Message or ""
        local duration = options.Duration or 3
        local type = options.Type or "Info" -- Info, Success, Warning, Error
        
        -- Create notification container if it doesn't exist
        if not CryzenHub.ScreenGui:FindFirstChild("NotificationContainer") then
            local container = Instance.new("Frame")
            container.Name = "NotificationContainer"
            container.Size = UDim2.new(0, 300, 1, 0)
            container.Position = UDim2.new(1, -320, 0, 0)
            container.BackgroundTransparency = 1
            container.Parent = CryzenHub.ScreenGui
            
            local listLayout = Instance.new("UIListLayout")
            listLayout.SortOrder = Enum.SortOrder.LayoutOrder
            listLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
            listLayout.Padding = UDim.new(0, 10)
            listLayout.Parent = container
            
            local padding = Instance.new("UIPadding")
            padding.PaddingBottom = UDim.new(0, 20)
            padding.Parent = container
        end
        
        local container = CryzenHub.ScreenGui:FindFirstChild("NotificationContainer")
        
        -- Get notification color based on type
        local typeColors = {
            Info = theme.Info,
            Success = theme.Success,
            Warning = theme.Warning,
            Error = theme.Error
        }
        local color = typeColors[type] or theme.Info
        
        -- Create notification
        local notification = Instance.new("Frame")
        notification.Name = "Notification"
        notification.Size = UDim2.new(1, -20, 0, 0) -- Will be sized based on content
        notification.BackgroundColor3 = theme.Secondary
        notification.BackgroundTransparency = 0.1
        notification.ClipsDescendants = true
        notification.Parent = container
        CryzenHub.Utils.SetRoundedCorners(notification)
        CryzenHub.Utils.AddStroke(notification, theme.Stroke, 1, 0.5)
        
        if theme.EnableShadows then
            CryzenHub.Utils.CreateShadow(notification)
        end
        
        -- Notification header
        local header = Instance.new("Frame")
        header.Name = "Header"
        header.Size = UDim2.new(1, 0, 0, 28)
        header.BackgroundColor3 = color
        header.BackgroundTransparency = 0.8
        header.BorderSizePixel = 0
        header.Parent = notification
        
        -- Title
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Name = "Title"
        titleLabel.Size = UDim2.new(1, -30, 1, 0)
        titleLabel.Position = UDim2.new(0, 30, 0, 0)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Font = theme.Font
        titleLabel.Text = title
        titleLabel.TextColor3 = theme.Text
        titleLabel.TextSize = theme.TextSize
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.Parent = header
        
        -- Icon
        local icons = {
            Info = "rbxassetid://7072717958", -- Info icon
            Success = "rbxassetid://7072706620", -- Checkmark
            Warning = "rbxassetid://7072718266", -- Warning
            Error = "rbxassetid://7072718631" -- X
        }
        
        local icon = Instance.new("ImageLabel")
        icon.Name = "Icon"
        icon.Size = UDim2.new(0, 16, 0, 16)
        icon.Position = UDim2.new(0, 8, 0.5, -8)
        icon.BackgroundTransparency = 1
        icon.Image = icons[type] or icons.Info
        icon.ImageColor3 = color
        icon.Parent = header
        
        -- Close button
        local closeButton = Instance.new("TextButton")
        closeButton.Name = "CloseButton"
        closeButton.Size = UDim2.new(0, 20, 0, 20)
        closeButton.Position = UDim2.new(1, -20, 0, 4)
        closeButton.BackgroundTransparency = 1
        closeButton.Text = "✕"
        closeButton.TextColor3 = theme.TextDark
        closeButton.Font = theme.Font
        closeButton.TextSize = 14
        closeButton.Parent = header
        
        -- Message
        local messageLabel = Instance.new("TextLabel")
        messageLabel.Name = "Message"
        messageLabel.Size = UDim2.new(1, -20, 0, 0)
        messageLabel.Position = UDim2.new(0, 10, 0, 28)
        messageLabel.BackgroundTransparency = 1
        messageLabel.Font = theme.Font
        messageLabel.Text = message
        messageLabel.TextColor3 = theme.TextDark
        messageLabel.TextSize = theme.TextSize
        messageLabel.TextWrapped = true
        messageLabel.TextXAlignment = Enum.TextXAlignment.Left
        messageLabel.TextYAlignment = Enum.TextYAlignment.Top
        messageLabel.AutomaticSize = Enum.AutomaticSize.Y
        messageLabel.Parent = notification
        
        -- Progress bar
        local progressBar = Instance.new("Frame")
        progressBar.Name = "ProgressBar"
        progressBar.Size = UDim2.new(1, 0, 0, 2)
        progressBar.Position = UDim2.new(0, 0, 1, -2)
        progressBar.BackgroundColor3 = color
        progressBar.BorderSizePixel = 0
        progressBar.Parent = notification
        
        -- Size notification based on message
        task.spawn(function()
            task.wait()
            local messageHeight = messageLabel.TextBounds.Y
            local totalHeight = messageHeight + 40 -- Header + padding
            notification.Size = UDim2.new(1, -20, 0, totalHeight)
            
            -- Animate in
            notification.Position = UDim2.new(1, 0, 0, 0)
            CryzenHub.Utils.Tween(notification, {Position = UDim2.new(0, 0, 0, 0)}, 0.3)
            
            -- Animate progress bar
            CryzenHub.Utils.Tween(progressBar, {Size = UDim2.new(0, 0, 0, 2)}, duration)
            
            -- Auto close
            task.delay(duration, function()
                if notification and notification.Parent then
                    CryzenHub.Utils.Tween(notification, {Position = UDim2.new(1, 0, 0, 0)}, 0.3, nil, nil, function()
                        notification:Destroy()
                    end)
                end
            end)
        end)
        
        -- Close button functionality
        closeButton.MouseButton1Click:Connect(function()
            CryzenHub.Utils.Tween(notification, {Position = UDim2.new(1, 0, 0, 0)}, 0.3, nil, nil, function()
                notification:Destroy()
            end)
        end)
        
        -- Hover effect
        closeButton.MouseEnter:Connect(function()
            closeButton.TextColor3 = theme.Text
        end)
        
        closeButton.MouseLeave:Connect(function()
            closeButton.TextColor3 = theme.TextDark
        end)
        
        return notification
    end

    -- Save/Load Config functions
    function window:SaveConfig(name)
        local config = {
            Flags = {}
        }
        
        for flag, value in pairs(window.Flags) do
            -- Handle different value types
            if typeof(value) == "Color3" then
                config.Flags[flag] = {
                    Type = "Color3",
                    Value = {value.R, value.G, value.B}
                }
            elseif typeof(value) == "EnumItem" then
                config.Flags[flag] = {
                    Type = "Enum",
                    Value = tostring(value)
                }
            elseif typeof(value) == "table" then
                config.Flags[flag] = {
                    Type = "Table",
                    Value = value
                }
            else
                config.Flags[flag] = {
                    Type = typeof(value),
                    Value = value
                }
            end
        end
        
        -- Save to file if writefile exists
        local success = false
        if writefile then
            local json = HttpService:JSONEncode(config)
            writefile("CryzenHub_" .. name .. ".json", json)
            success = true
        end
        
        return success, config
    end
    
    function window:LoadConfig(name)
        local config
        local success = false
        
        -- Try to load from file
        if isfile and isfile("CryzenHub_" .. name .. ".json") and readfile then
            local json = readfile("CryzenHub_" .. name .. ".json")
            config = HttpService:JSONDecode(json)
            success = true
        elseif type(name) == "table" then
            config = name
            success = true
        end
        
        if success and config then
            for flag, data in pairs(config.Flags) do
                local element = self:GetElementByFlag(flag)
                if element then
                    local value
                    
                    -- Convert value based on type
                    if data.Type == "Color3" then
                        value = Color3.new(table.unpack(data.Value))
                    elseif data.Type == "Enum" then
                        local enumType, enumItem = string.match(data.Value, "Enum%.(.+)%.(.+)")
                        if enumType and enumItem and Enum[enumType] then
                            value = Enum[enumType][enumItem]
                        end
                    else
                        value = data.Value
                    end
                    
                    -- Update element
                    element:SetValue(value)
                end
            end
        end
        
        return success
    end
    
    -- Get element by flag
    function window:GetElementByFlag(flag)
        for _, tab in pairs(self.Tabs) do
            if tab.Elements[flag] then
                return tab.Elements[flag]
            end
        end
        return nil
    end
    
    -- Add window to list
    table.insert(CryzenHub.Windows, window)
    
    return window
end

return CryzenHub
