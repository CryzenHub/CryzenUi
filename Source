--[[
    CryzenHub UI Library v3.0.0 - ULTRA
    The ultimate premium UI library for Roblox scripts
    Created by CryzenHub
    
    Features:
    - Ultra Premium Design
    - Advanced Glow Effects
    - Particle Systems
    - Sound Effects
    - Advanced Animations
    - AI-Powered Auto-Config
    - Real-time Performance Monitoring
    - Advanced Search & Filtering
    - Custom Themes & Presets
    - Multi-Window Support
]]

local CryzenHub = {
    Version = "3.0.0",
    Build = "ULTRA",
    Windows = {},
    Themes = {},
    Flags = {},
    Connections = {},
    Particles = {},
    Sounds = {},
    Performance = {},
    SearchEngine = {},
    AI = {},
    Utils = {}
}

-- Services
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local Lighting = game:GetService("Lighting")
local SoundService = game:GetService("SoundService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local StarterGui = game:GetService("StarterGui")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local Camera = workspace.CurrentCamera
local ViewportSize = Camera.ViewportSize
local Random = Random.new()

-- Ultra Premium Theme System
CryzenHub.Themes = {
    Ultra = {
        Name = "Ultra",
        Primary = Color3.fromRGB(15, 15, 25),
        Secondary = Color3.fromRGB(25, 25, 35),
        Tertiary = Color3.fromRGB(35, 35, 50),
        Quaternary = Color3.fromRGB(45, 45, 65),
        Accent = Color3.fromRGB(120, 140, 255),
        AccentSecondary = Color3.fromRGB(100, 255, 180),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(200, 200, 220),
        TextTertiary = Color3.fromRGB(150, 150, 170),
        Success = Color3.fromRGB(80, 220, 140),
        Warning = Color3.fromRGB(255, 200, 80),
        Error = Color3.fromRGB(255, 100, 100),
        Info = Color3.fromRGB(100, 180, 255),
        
        -- Glow Colors
        GlowPrimary = Color3.fromRGB(120, 140, 255),
        GlowSecondary = Color3.fromRGB(100, 255, 180),
        GlowAccent = Color3.fromRGB(255, 120, 255),
        
        -- Gradients
        PrimaryGradient = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(15, 15, 25)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 20))
        }),
        
        AccentGradient = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(140, 160, 255)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(120, 140, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 120, 255))
        }),
        
        -- Effects
        BlurSize = 15,
        GlowIntensity = 0.8,
        ParticleCount = 50,
        AnimationSpeed = 0.3,
        SoundVolume = 0.5,
        
        -- Typography
        Font = Enum.Font.GothamBold,
        FontSize = {
            Header = 20,
            Title = 16,
            Body = 14,
            Caption = 12,
            Small = 10
        },
        
        -- Spacing
        Padding = {
            Small = 4,
            Medium = 8,
            Large = 12,
            XLarge = 16
        },
        
        -- Corner Radius
        Radius = {
            Small = UDim.new(0, 4),
            Medium = UDim.new(0, 8),
            Large = UDim.new(0, 12),
            Round = UDim.new(0, 999)
        },
        
        -- Stroke
        StrokeThickness = 1.5,
        StrokeTransparency = 0.3
    },
    
    Cyberpunk = {
        Name = "Cyberpunk",
        Primary = Color3.fromRGB(10, 10, 15),
        Secondary = Color3.fromRGB(20, 20, 30),
        Tertiary = Color3.fromRGB(30, 30, 45),
        Quaternary = Color3.fromRGB(40, 40, 60),
        Accent = Color3.fromRGB(255, 20, 147),
        AccentSecondary = Color3.fromRGB(0, 255, 255),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(255, 20, 147),
        TextTertiary = Color3.fromRGB(0, 255, 255),
        Success = Color3.fromRGB(57, 255, 20),
        Warning = Color3.fromRGB(255, 165, 0),
        Error = Color3.fromRGB(255, 20, 60),
        Info = Color3.fromRGB(0, 191, 255),
        
        GlowPrimary = Color3.fromRGB(255, 20, 147),
        GlowSecondary = Color3.fromRGB(0, 255, 255),
        GlowAccent = Color3.fromRGB(57, 255, 20),
        
        BlurSize = 20,
        GlowIntensity = 1.2,
        ParticleCount = 75
    },
    
    Neon = {
        Name = "Neon",
        Primary = Color3.fromRGB(5, 5, 10),
        Secondary = Color3.fromRGB(15, 15, 25),
        Tertiary = Color3.fromRGB(25, 25, 40),
        Quaternary = Color3.fromRGB(35, 35, 55),
        Accent = Color3.fromRGB(57, 255, 20),
        AccentSecondary = Color3.fromRGB(255, 20, 147),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(57, 255, 20),
        TextTertiary = Color3.fromRGB(255, 20, 147),
        Success = Color3.fromRGB(0, 255, 127),
        Warning = Color3.fromRGB(255, 215, 0),
        Error = Color3.fromRGB(255, 69, 0),
        Info = Color3.fromRGB(30, 144, 255),
        
        GlowPrimary = Color3.fromRGB(57, 255, 20),
        GlowSecondary = Color3.fromRGB(255, 20, 147),
        GlowAccent = Color3.fromRGB(0, 255, 255),
        
        BlurSize = 25,
        GlowIntensity = 1.5,
        ParticleCount = 100
    }
}

-- Set default theme
CryzenHub.CurrentTheme = CryzenHub.Themes.Ultra

-- Sound System
CryzenHub.Sounds = {
    Click = "rbxassetid://131961136",
    Hover = "rbxassetid://131961136",
    Success = "rbxassetid://131961136",
    Error = "rbxassetid://131961136",
    Notification = "rbxassetid://131961136",
    Slide = "rbxassetid://131961136",
    Toggle = "rbxassetid://131961136",
    Type = "rbxassetid://131961136"
}

-- Performance Monitor
CryzenHub.Performance = {
    FPS = 0,
    Memory = 0,
    Network = 0,
    UpdateRate = 60,
    History = {}
}

-- Utility Functions
function CryzenHub.Utils.CreateSound(soundId, volume, pitch)
    local sound = Instance.new("Sound")
    sound.SoundId = soundId
    sound.Volume = volume or CryzenHub.CurrentTheme.SoundVolume or 0.5
    sound.Pitch = pitch or 1
    sound.Parent = SoundService
    return sound
end

function CryzenHub.Utils.PlaySound(soundName)
    if CryzenHub.Sounds[soundName] then
        local sound = CryzenHub.Utils.CreateSound(CryzenHub.Sounds[soundName])
        sound:Play()
        
        sound.Ended:Connect(function()
            sound:Destroy()
        end)
        
        return sound
    end
end

function CryzenHub.Utils.Tween(object, properties, duration, style, direction, callback)
    local tweenInfo = TweenInfo.new(
        duration or CryzenHub.CurrentTheme.AnimationSpeed or 0.3,
        style or Enum.EasingStyle.Quart,
        direction or Enum.EasingDirection.Out
    )
    
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    
    if callback then
        tween.Completed:Connect(callback)
    end
    
    return tween
end

function CryzenHub.Utils.CreateGlow(parent, color, intensity, size)
    intensity = intensity or CryzenHub.CurrentTheme.GlowIntensity or 0.8
    size = size or 20
    
    local glow = Instance.new("ImageLabel")
    glow.Name = "Glow"
    glow.AnchorPoint = Vector2.new(0.5, 0.5)
    glow.BackgroundTransparency = 1
    glow.Position = UDim2.fromScale(0.5, 0.5)
    glow.Size = UDim2.new(1, size, 1, size)
    glow.Image = "rbxassetid://5028857084"
    glow.ImageColor3 = color or CryzenHub.CurrentTheme.GlowPrimary
    glow.ImageTransparency = 1 - intensity
    glow.ZIndex = parent.ZIndex - 1
    glow.Parent = parent
    
    -- Animated glow
    local glowTween = TweenService:Create(glow, 
        TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
        {ImageTransparency = 0.9 - intensity}
    )
    glowTween:Play()
    
    return glow, glowTween
end

function CryzenHub.Utils.CreateParticles(parent, count, color)
    count = count or CryzenHub.CurrentTheme.ParticleCount or 50
    color = color or CryzenHub.CurrentTheme.GlowPrimary
    
    local particles = {}
    
    for i = 1, count do
        local particle = Instance.new("Frame")
        particle.Name = "Particle"
        particle.BackgroundColor3 = color
        particle.BackgroundTransparency = math.random(50, 90) / 100
        particle.BorderSizePixel = 0
        particle.Size = UDim2.new(0, math.random(1, 3), 0, math.random(1, 3))
        particle.Position = UDim2.new(
            math.random(0, 100) / 100,
            0,
            math.random(0, 100) / 100,
            0
        )
        particle.ZIndex = parent.ZIndex + 1
        particle.Parent = parent
        
        -- Rounded corners
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(1, 0)
        corner.Parent = particle
        
        -- Random movement
        local function animateParticle()
            local newPos = UDim2.new(
                math.random(0, 100) / 100,
                0,
                math.random(0, 100) / 100,
                0
            )
            
            CryzenHub.Utils.Tween(particle, {
                Position = newPos,
                BackgroundTransparency = math.random(50, 95) / 100
            }, math.random(3, 8), Enum.EasingStyle.Sine, nil, animateParticle)
        end
        
        animateParticle()
        table.insert(particles, particle)
    end
    
    return particles
end

function CryzenHub.Utils.CreateRipple(parent, position, color, size)
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.BackgroundColor3 = color or CryzenHub.CurrentTheme.Accent
    ripple.BackgroundTransparency = 0.7
    ripple.BorderSizePixel = 0
    ripple.Position = UDim2.new(0, position.X - parent.AbsolutePosition.X, 0, position.Y - parent.AbsolutePosition.Y)
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.ZIndex = parent.ZIndex + 10
    ripple.Parent = parent
    
    -- Rounded corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = ripple
    
    -- Animate ripple
    local maxSize = size or math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
    
    CryzenHub.Utils.Tween(ripple, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        BackgroundTransparency = 1
    }, 0.6, Enum.EasingStyle.Quad, nil, function()
        ripple:Destroy()
    end)
    
    return ripple
end

function CryzenHub.Utils.CreateBlur(intensity)
    intensity = intensity or CryzenHub.CurrentTheme.BlurSize or 15
    
    local blur = Lighting:FindFirstChild("CryzenHubBlur")
    if not blur then
        blur = Instance.new("BlurEffect")
        blur.Name = "CryzenHubBlur"
        blur.Size = 0
        blur.Enabled = false
        blur.Parent = Lighting
    end
    
    return blur
end

function CryzenHub.Utils.CreateAcrylic(parent, transparency, color)
    transparency = transparency or 0.2
    color = color or CryzenHub.CurrentTheme.Primary
    
    local acrylic = Instance.new("Frame")
    acrylic.Name = "Acrylic"
    acrylic.BackgroundColor3 = color
    acrylic.BackgroundTransparency = transparency
    acrylic.BorderSizePixel = 0
    acrylic.Size = UDim2.fromScale(1, 1)
    acrylic.ZIndex = parent.ZIndex - 1
    acrylic.Parent = parent
    
    -- Rounded corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = CryzenHub.CurrentTheme.Radius.Medium
    corner.Parent = acrylic
    
    -- Noise texture for glass effect
    local noise = Instance.new("ImageLabel")
    noise.Name = "Noise"
    noise.BackgroundTransparency = 1
    noise.Size = UDim2.fromScale(1, 1)
    noise.Image = "rbxassetid://241650934"
    noise.ImageTransparency = 0.95
    noise.ImageColor3 = Color3.fromRGB(255, 255, 255)
    noise.ScaleType = Enum.ScaleType.Tile
    noise.TileSize = UDim2.new(0, 100, 0, 100)
    noise.ZIndex = acrylic.ZIndex + 1
    noise.Parent = acrylic
    
    return acrylic
end

function CryzenHub.Utils.CreateGradient(parent, colorSequence, rotation)
    local gradient = Instance.new("UIGradient")
    gradient.Color = colorSequence or CryzenHub.CurrentTheme.PrimaryGradient
    gradient.Rotation = rotation or 45
    gradient.Parent = parent
    
    return gradient
end

function CryzenHub.Utils.CreateStroke(parent, color, thickness, transparency)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or CryzenHub.CurrentTheme.Accent
    stroke.Thickness = thickness or CryzenHub.CurrentTheme.StrokeThickness
    stroke.Transparency = transparency or CryzenHub.CurrentTheme.StrokeTransparency
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = parent
    
    return stroke
end

function CryzenHub.Utils.CreateCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = radius or CryzenHub.CurrentTheme.Radius.Medium
    corner.Parent = parent
    
    return corner
end

function CryzenHub.Utils.CreateShadow(parent, color, size, transparency)
    size = size or 20
    transparency = transparency or 0.5
    color = color or Color3.fromRGB(0, 0, 0)
    
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.fromScale(0.5, 0.5)
    shadow.Size = UDim2.new(1, size, 1, size)
    shadow.Image = "rbxassetid://6014261993"
    shadow.ImageColor3 = color
    shadow.ImageTransparency = transparency
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    shadow.ZIndex = parent.ZIndex - 2
    shadow.Parent = parent
    
    return shadow
end

-- Performance Monitoring
function CryzenHub.Performance.StartMonitoring()
    local lastTime = tick()
    local frameCount = 0
    
    RunService.Heartbeat:Connect(function()
        frameCount = frameCount + 1
        local currentTime = tick()
        
        if currentTime - lastTime >= 1 then
            CryzenHub.Performance.FPS = frameCount
            CryzenHub.Performance.Memory = gcinfo()
            
            -- Store history
            table.insert(CryzenHub.Performance.History, {
                Time = currentTime,
                FPS = CryzenHub.Performance.FPS,
                Memory = CryzenHub.Performance.Memory
            })
            
            -- Limit history to last 60 seconds
            if #CryzenHub.Performance.History > 60 then
                table.remove(CryzenHub.Performance.History, 1)
            end
            
            frameCount = 0
            lastTime = currentTime
        end
    end)
end

-- AI-Powered Features
CryzenHub.AI = {
    AutoConfig = function(gameId)
        -- Automatically configure UI based on game
        local configs = {
            [606849621] = { -- Jailbreak
                Theme = "Cyberpunk",
                Features = {"ESP", "Speed", "Teleport", "Auto Rob"}
            },
            [292439477] = { -- Phantom Forces
                Theme = "Neon",
                Features = {"Aimbot", "ESP", "Speed", "No Recoil"}
            }
        }
        
        return configs[gameId] or {
            Theme = "Ultra",
            Features = {"Basic Features"}
        }
    end,
    
    OptimizePerformance = function()
        local avgFPS = 0
        for _, data in ipairs(CryzenHub.Performance.History) do
            avgFPS = avgFPS + data.FPS
        end
        
        if #CryzenHub.Performance.History > 0 then
            avgFPS = avgFPS / #CryzenHub.Performance.History
            
            if avgFPS < 30 then
                -- Reduce visual effects for better performance
                CryzenHub.CurrentTheme.ParticleCount = 10
                CryzenHub.CurrentTheme.BlurSize = 5
                CryzenHub.CurrentTheme.GlowIntensity = 0.3
            elseif avgFPS > 50 then
                -- Increase visual effects for better experience
                CryzenHub.CurrentTheme.ParticleCount = 100
                CryzenHub.CurrentTheme.BlurSize = 25
                CryzenHub.CurrentTheme.GlowIntensity = 1.2
            end
        end
    end
}

-- Advanced Search Engine
CryzenHub.SearchEngine = {
    Index = {},
    
    AddToIndex = function(element, keywords)
        table.insert(CryzenHub.SearchEngine.Index, {
            Element = element,
            Keywords = keywords,
            Type = element.Type or "Unknown"
        })
    end,
    
    Search = function(query)
        local results = {}
        query = string.lower(query)
        
        for _, item in ipairs(CryzenHub.SearchEngine.Index) do
            for _, keyword in ipairs(item.Keywords) do
                if string.find(string.lower(keyword), query) then
                    table.insert(results, item)
                    break
                end
            end
        end
        
        return results
    end,
    
    Filter = function(results, filterType)
        if not filterType then return results end
        
        local filtered = {}
        for _, result in ipairs(results) do
            if result.Type == filterType then
                table.insert(filtered, result)
            end
        end
        
        return filtered
    end
}

-- Screen GUI Creation
function CryzenHub.Utils.CreateScreenGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CryzenHubV3_ULTRA"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.DisplayOrder = 999
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    
    -- Try to use CoreGui
    pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(screenGui)
            screenGui.Parent = CoreGui
        else
            screenGui.Parent = CoreGui
        end
    end)
    
    if not screenGui.Parent then
        screenGui.Parent = Player:WaitForChild("PlayerGui")
    end
    
    return screenGui
end

-- Main Window Creation
function CryzenHub:CreateWindow(config)
    config = config or {}
    
    -- Apply theme
    if config.Theme then
        if type(config.Theme) == "string" and CryzenHub.Themes[config.Theme] then
            CryzenHub.CurrentTheme = CryzenHub.Themes[config.Theme]
        elseif type(config.Theme) == "table" then
            for key, value in pairs(config.Theme) do
                CryzenHub.CurrentTheme[key] = value
            end
        end
    end
    
    -- AI Auto-Config
    if config.AutoConfig ~= false then
        local gameConfig = CryzenHub.AI.AutoConfig(game.PlaceId)
        if gameConfig.Theme and CryzenHub.Themes[gameConfig.Theme] then
            CryzenHub.CurrentTheme = CryzenHub.Themes[gameConfig.Theme]
        end
    end
    
    -- Create ScreenGui
    if not CryzenHub.ScreenGui then
        CryzenHub.ScreenGui = CryzenHub.Utils.CreateScreenGui()
    end
    
    local theme = CryzenHub.CurrentTheme
    
    -- Window properties
    local title = config.Title or "CryzenHub ULTRA"
    local size = config.Size or UDim2.new(0, 700, 0, 500)
    local position = config.Position or UDim2.fromScale(0.5, 0.5)
    local minSize = config.MinSize or Vector2.new(500, 400)
    
    local window = {
        Tabs = {},
        ActiveTab = nil,
        Flags = {},
        Elements = {},
        Theme = theme,
        MinSize = minSize,
        Visible = true,
        Locked = false,
        SearchResults = {},
        Performance = {
            FPS = 0,
            Memory = 0,
            ElementCount = 0
        }
    }
    
    -- Main Container with ultra effects
    local mainContainer = Instance.new("Frame")
    mainContainer.Name = "UltraContainer"
    mainContainer.Size = size
    mainContainer.Position = position
    mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    mainContainer.BackgroundColor3 = theme.Primary
    mainContainer.BackgroundTransparency = 0.1
    mainContainer.BorderSizePixel = 0
    mainContainer.ClipsDescendants = false
    mainContainer.ZIndex = 1
    mainContainer.Parent = CryzenHub.ScreenGui
    window.Container = mainContainer
    
    -- Ultra visual effects
    CryzenHub.Utils.CreateCorner(mainContainer, theme.Radius.Large)
    CryzenHub.Utils.CreateShadow(mainContainer, Color3.fromRGB(0, 0, 0), 40, 0.3)
    CryzenHub.Utils.CreateGlow(mainContainer, theme.GlowPrimary, theme.GlowIntensity, 30)
    CryzenHub.Utils.CreateAcrylic(mainContainer, 0.15, theme.Primary)
    CryzenHub.Utils.CreateGradient(mainContainer, theme.PrimaryGradient, 135)
    CryzenHub.Utils.CreateStroke(mainContainer, theme.Accent, 2, 0.5)
    
    -- Particle effects
    if theme.ParticleCount > 0 then
        CryzenHub.Utils.CreateParticles(mainContainer, theme.ParticleCount, theme.GlowSecondary)
    end
    
    -- Ultra Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "UltraTitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 50)
    titleBar.BackgroundColor3 = theme.Secondary
    titleBar.BackgroundTransparency = 0.3
    titleBar.BorderSizePixel = 0
    titleBar.ZIndex = 2
    titleBar.Parent = mainContainer
    window.TitleBar = titleBar
    
    CryzenHub.Utils.CreateGradient(titleBar, theme.AccentGradient, 90)
    CryzenHub.Utils.CreateGlow(titleBar, theme.GlowPrimary, 0.6, 20)
    
    -- Animated title with glow effect
    local titleText = Instance.new("TextLabel")
    titleText.Name = "UltraTitle"
    titleText.Size = UDim2.new(1, -200, 1, 0)
    titleText.Position = UDim2.new(0, 20, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = title
    titleText.Font = theme.Font
    titleText.TextSize = theme.FontSize.Header
    titleText.TextColor3 = theme.Text
    titleText.TextStrokeTransparency = 0.8
    titleText.TextStrokeColor3 = theme.GlowPrimary
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.ZIndex = 3
    titleText.Parent = titleBar
    
    -- Animated text glow
    local textGlow = CryzenHub.Utils.CreateGlow(titleText, theme.GlowPrimary, 0.5, 15)
    
    -- Version badge with ultra effects
    local versionBadge = Instance.new("Frame")
    versionBadge.Name = "VersionBadge"
    versionBadge.Size = UDim2.new(0, 80, 0, 25)
    versionBadge.Position = UDim2.new(0, titleText.TextBounds.X + 30, 0.5, -12.5)
    versionBadge.BackgroundColor3 = theme.AccentSecondary
    versionBadge.BackgroundTransparency = 0.2
    versionBadge.ZIndex = 3
    versionBadge.Parent = titleBar
    
    CryzenHub.Utils.CreateCorner(versionBadge, theme.Radius.Round)
    CryzenHub.Utils.CreateGlow(versionBadge, theme.AccentSecondary, 0.8, 10)
    CryzenHub.Utils.CreateStroke(versionBadge, theme.AccentSecondary, 1, 0.3)
    
    local versionText = Instance.new("TextLabel")
    versionText.Name = "VersionText"
    versionText.Size = UDim2.fromScale(1, 1)
    versionText.BackgroundTransparency = 1
    versionText.Text = "v" .. CryzenHub.Version .. " " .. CryzenHub.Build
    versionText.Font = theme.Font
    versionText.TextSize = theme.FontSize.Caption
    versionText.TextColor3 = theme.Text
    versionText.TextStrokeTransparency = 0.9
    versionText.TextStrokeColor3 = theme.AccentSecondary
    versionText.ZIndex = 4
    versionText.Parent = versionBadge
    
    -- Performance monitor
    local perfMonitor = Instance.new("Frame")
    perfMonitor.Name = "PerformanceMonitor"
    perfMonitor.Size = UDim2.new(0, 100, 0, 30)
    perfMonitor.Position = UDim2.new(1, -220, 0.5, -15)
    perfMonitor.BackgroundColor3 = theme.Tertiary
    perfMonitor.BackgroundTransparency = 0.3
    perfMonitor.ZIndex = 3
    perfMonitor.Parent = titleBar
    
    CryzenHub.Utils.CreateCorner(perfMonitor, theme.Radius.Small)
    CryzenHub.Utils.CreateStroke(perfMonitor, theme.Info, 1, 0.5)
    
    local fpsText = Instance.new("TextLabel")
    fpsText.Name = "FPSText"
    fpsText.Size = UDim2.new(0.5, -2, 1, 0)
    fpsText.BackgroundTransparency = 1
    fpsText.Text = "FPS: 60"
    fpsText.Font = theme.Font
    fpsText.TextSize = theme.FontSize.Small
    fpsText.TextColor3 = theme.Success
    fpsText.ZIndex = 4
    fpsText.Parent = perfMonitor
    
    local memoryText = Instance.new("TextLabel")
    memoryText.Name = "MemoryText"
    memoryText.Size = UDim2.new(0.5, -2, 1, 0)
    memoryText.Position = UDim2.new(0.5, 2, 0, 0)
    memoryText.BackgroundTransparency = 1
    memoryText.Text = "MEM: 0MB"
    memoryText.Font = theme.Font
    memoryText.TextSize = theme.FontSize.Small
    memoryText.TextColor3 = theme.Info
    memoryText.ZIndex = 4
    memoryText.Parent = perfMonitor
    
    -- Update performance display
    RunService.Heartbeat:Connect(function()
        fpsText.Text = "FPS: " .. CryzenHub.Performance.FPS
        memoryText.Text = "MEM: " .. math.floor(CryzenHub.Performance.Memory) .. "MB"
        
        -- Color based on performance
        if CryzenHub.Performance.FPS >= 50 then
            fpsText.TextColor3 = theme.Success
        elseif CryzenHub.Performance.FPS >= 30 then
            fpsText.TextColor3 = theme.Warning
        else
            fpsText.TextColor3 = theme.Error
        end
    end)
    
    -- Ultra Control Buttons
    local controlsContainer = Instance.new("Frame")
    controlsContainer.Name = "UltraControls"
    controlsContainer.Size = UDim2.new(0, 120, 1, 0)
    controlsContainer.Position = UDim2.new(1, -120, 0, 0)
    controlsContainer.BackgroundTransparency = 1
    controlsContainer.ZIndex = 3
    controlsContainer.Parent = titleBar
    
    local buttonSize = 30
    local buttonSpacing = 5
    local buttonData = {
        {Name = "Minimize", Symbol = "−", Color = theme.Info, Action = "minimize"},
        {Name = "Maximize", Symbol = "□", Color = theme.Warning, Action = "maximize"},
        {Name = "Close", Symbol = "✕", Color = theme.Error, Action = "close"}
    }
    
    for i, data in ipairs(buttonData) do
        local button = Instance.new("TextButton")
        button.Name = data.Name .. "Button"
        button.Size = UDim2.new(0, buttonSize, 0, buttonSize)
        button.Position = UDim2.new(1, -(buttonSize + buttonSpacing) * i, 0.5, -buttonSize/2)
        button.BackgroundColor3 = data.Color
        button.BackgroundTransparency = 0.7
        button.Text = data.Symbol
        button.Font = theme.Font
        button.TextSize = theme.FontSize.Body
        button.TextColor3 = theme.Text
        button.ZIndex = 4
        button.Parent = controlsContainer
        
        CryzenHub.Utils.CreateCorner(button, theme.Radius.Round)
        CryzenHub.Utils.CreateGlow(button, data.Color, 0.6, 8)
        
        -- Ultra hover effects
        button.MouseEnter:Connect(function()
            CryzenHub.Utils.PlaySound("Hover")
            CryzenHub.Utils.Tween(button, {
                BackgroundTransparency = 0.3,
                Size = UDim2.new(0, buttonSize + 4, 0, buttonSize + 4)
            }, 0.2)
        end)
        
        button.MouseLeave:Connect(function()
            CryzenHub.Utils.Tween(button, {
                BackgroundTransparency = 0.7,
                Size = UDim2.new(0, buttonSize, 0, buttonSize)
            }, 0.2)
        end)
        
        button.MouseButton1Down:Connect(function()
            CryzenHub.Utils.CreateRipple(button, UserInputService:GetMouseLocation(), data.Color)
        end)
        
        -- Button actions
        if data.Action == "close" then
            button.MouseButton1Click:Connect(function()
                CryzenHub.Utils.PlaySound("Click")
                
                -- Ultra close animation
                CryzenHub.Utils.Tween(mainContainer, {
                    Size = UDim2.new(0, 0, 0, 0),
                    BackgroundTransparency = 1
                }, 0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In, function()
                    mainContainer:Destroy()
                    
                    -- Remove from windows list
                    for i, win in ipairs(CryzenHub.Windows) do
                        if win == window then
                            table.remove(CryzenHub.Windows, i)
                            break
                        end
                    end
                    
                    -- Disable blur if no windows
                    if #CryzenHub.Windows == 0 then
                        local blur = CryzenHub.Utils.CreateBlur()
                        CryzenHub.Utils.Tween(blur, {Size = 0}, 0.3, nil, nil, function()
                            blur.Enabled = false
                        end)
                    end
                end)
            end)
        elseif data.Action == "minimize" then
            local isMinimized = false
            local originalSize = size
            
            button.MouseButton1Click:Connect(function()
                CryzenHub.Utils.PlaySound("Click")
                isMinimized = not isMinimized
                
                if isMinimized then
                    CryzenHub.Utils.Tween(mainContainer, {
                        Size = UDim2.new(originalSize.X.Scale, originalSize.X.Offset, 0, 50)
                    }, 0.3)
                else
                    CryzenHub.Utils.Tween(mainContainer, {
                        Size = originalSize
                    }, 0.3)
                end
            end)
        elseif data.Action == "maximize" then
            local isMaximized = false
            local originalSize = size
            local originalPosition = position
            
            button.MouseButton1Click:Connect(function()
                CryzenHub.Utils.PlaySound("Click")
                isMaximized = not isMaximized
                
                if isMaximized then
                    originalSize = mainContainer.Size
                    originalPosition = mainContainer.Position
                    
                    CryzenHub.Utils.Tween(mainContainer, {
                        Size = UDim2.new(1, -40, 1, -40),
                        Position = UDim2.fromScale(0.5, 0.5)
                    }, 0.3)
                else
                    CryzenHub.Utils.Tween(mainContainer, {
                        Size = originalSize,
                        Position = originalPosition
                    }, 0.3)
                end
            end)
        end
    end
    
    -- Ultra Search Bar
    local searchContainer = Instance.new("Frame")
    searchContainer.Name = "UltraSearch"
    searchContainer.Size = UDim2.new(1, -40, 0, 40)
    searchContainer.Position = UDim2.new(0, 20, 0, 60)
    searchContainer.BackgroundColor3 = theme.Tertiary
    searchContainer.BackgroundTransparency = 0.2
    searchContainer.ZIndex = 2
    searchContainer.Parent = mainContainer
    
    CryzenHub.Utils.CreateCorner(searchContainer, theme.Radius.Medium)
    CryzenHub.Utils.CreateGlow(searchContainer, theme.GlowSecondary, 0.4, 15)
    CryzenHub.Utils.CreateStroke(searchContainer, theme.GlowSecondary, 1, 0.6)
    
    local searchIcon = Instance.new("ImageLabel")
    searchIcon.Name = "SearchIcon"
    searchIcon.Size = UDim2.new(0, 20, 0, 20)
    searchIcon.Position = UDim2.new(0, 15, 0.5, -10)
    searchIcon.BackgroundTransparency = 1
    searchIcon.Image = "rbxassetid://7072717958"
    searchIcon.ImageColor3 = theme.TextSecondary
    searchIcon.ZIndex = 3
    searchIcon.Parent = searchContainer
    
    local searchBox = Instance.new("TextBox")
    searchBox.Name = "SearchBox"
    searchBox.Size = UDim2.new(1, -50, 1, 0)
    searchBox.Position = UDim2.new(0, 45, 0, 0)
    searchBox.BackgroundTransparency = 1
    searchBox.Text = ""
    searchBox.PlaceholderText = "Search for features..."
    searchBox.Font = theme.Font
    searchBox.TextSize = theme.FontSize.Body
    searchBox.TextColor3 = theme.Text
    searchBox.PlaceholderColor3 = theme.TextSecondary
    searchBox.TextXAlignment = Enum.TextXAlignment.Left
    searchBox.ClearTextOnFocus = false
    searchBox.ZIndex = 3
    searchBox.Parent = searchContainer
    
    -- Search functionality with AI
    local searchResults = Instance.new("ScrollingFrame")
    searchResults.Name = "SearchResults"
    searchResults.Size = UDim2.new(1, 0, 0, 200)
    searchResults.Position = UDim2.new(0, 0, 1, 5)
    searchResults.BackgroundColor3 = theme.Secondary
    searchResults.BackgroundTransparency = 0.1
    searchResults.ScrollBarThickness = 4
    searchResults.ScrollBarImageColor3 = theme.Accent
    searchResults.AutomaticCanvasSize = Enum.AutomaticSize.Y
    searchResults.Visible = false
    searchResults.ZIndex = 10
    searchResults.Parent = searchContainer
    
    CryzenHub.Utils.CreateCorner(searchResults, theme.Radius.Medium)
    CryzenHub.Utils.CreateShadow(searchResults, Color3.fromRGB(0, 0, 0), 20, 0.6)
    
    local resultsLayout = Instance.new("UIListLayout")
    resultsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    resultsLayout.Padding = UDim.new(0, 2)
    resultsLayout.Parent = searchResults
    
    searchBox:GetPropertyChangedSignal("Text"):Connect(function()
        local query = searchBox.Text
        
        if query and #query > 0 then
            local results = CryzenHub.SearchEngine.Search(query)
            
            -- Clear previous results
            for _, child in ipairs(searchResults:GetChildren()) do
                if child:IsA("GuiObject") and child ~= resultsLayout then
                    child:Destroy()
                end
            end
            
            -- Show results
            if #results > 0 then
                searchResults.Visible = true
                
                for i, result in ipairs(results) do
                    local resultItem = Instance.new("TextButton")
                    resultItem.Name = "Result" .. i
                    resultItem.Size = UDim2.new(1, -10, 0, 30)
                    resultItem.BackgroundColor3 = theme.Tertiary
                    resultItem.BackgroundTransparency = 0.3
                    resultItem.Text = table.concat(result.Keywords, " | ")
                    resultItem.Font = theme.Font
                    resultItem.TextSize = theme.FontSize.Body
                    resultItem.TextColor3 = theme.Text
                    resultItem.TextXAlignment = Enum.TextXAlignment.Left
                    resultItem.ZIndex = 11
                    resultItem.Parent = searchResults
                    
                    CryzenHub.Utils.CreateCorner(resultItem, theme.Radius.Small)
                    
                    resultItem.MouseEnter:Connect(function()
                        CryzenHub.Utils.Tween(resultItem, {BackgroundTransparency = 0.1}, 0.2)
                    end)
                    
                    resultItem.MouseLeave:Connect(function()
                        CryzenHub.Utils.Tween(resultItem, {BackgroundTransparency = 0.3}, 0.2)
                    end)
                    
                    resultItem.MouseButton1Click:Connect(function()
                        -- Navigate to element
                        if result.Element and result.Element.Instance then
                            -- Scroll to element or highlight it
                            searchBox.Text = ""
                            searchResults.Visible = false
                        end
                    end)
                end
            else
                searchResults.Visible = false
            end
        else
            searchResults.Visible = false
        end
    end)
    
    -- Hide search results when clicking outside
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = UserInputService:GetMouseLocation()
            local searchPos = searchContainer.AbsolutePosition
            local searchSize = searchContainer.AbsoluteSize
            
            if not (mousePos.X >= searchPos.X and mousePos.X <= searchPos.X + searchSize.X and
                   mousePos.Y >= searchPos.Y and mousePos.Y <= searchPos.Y + searchSize.Y + 200) then
                searchResults.Visible = false
            end
        end
    end)
    
    -- Make window draggable with ultra smooth movement
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not window.Locked then
            dragging = true
            dragStart = input.Position
            startPos = mainContainer.Position
            
            CryzenHub.Utils.PlaySound("Click")
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            
            -- Ultra smooth dragging with momentum
            CryzenHub.Utils.Tween(mainContainer, {
                Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            }, 0.05, Enum.EasingStyle.Quart)
        end
    end)
    
    -- Ultra resizing
    local resizeHandle = Instance.new("Frame")
    resizeHandle.Name = "UltraResizeHandle"
    resizeHandle.Size = UDim2.new(0, 20, 0, 20)
    resizeHandle.Position = UDim2.new(1, -20, 1, -20)
    resizeHandle.BackgroundColor3 = theme.Accent
    resizeHandle.BackgroundTransparency = 0.7
    resizeHandle.ZIndex = 5
    resizeHandle.Parent = mainContainer
    
    CryzenHub.Utils.CreateCorner(resizeHandle, UDim.new(0, 4))
    CryzenHub.Utils.CreateGlow(resizeHandle, theme.Accent, 0.6, 8)
    
    local resizeIcon = Instance.new("TextLabel")
    resizeIcon.Size = UDim2.fromScale(1, 1)
    resizeIcon.BackgroundTransparency = 1
    resizeIcon.Text = "◢"
    resizeIcon.Font = theme.Font
    resizeIcon.TextSize = theme.FontSize.Body
    resizeIcon.TextColor3 = theme.Text
    resizeIcon.ZIndex = 6
    resizeIcon.Parent = resizeHandle
    
    local resizing = false
    local resizeStart
    local startSize
    
    resizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = true
            resizeStart = UserInputService:GetMouseLocation()
            startSize = mainContainer.Size
            
            CryzenHub.Utils.PlaySound("Click")
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and resizing then
            local currentMouse = UserInputService:GetMouseLocation()
            local delta = currentMouse - resizeStart
            
            local newSize = UDim2.new(
                startSize.X.Scale,
                math.max(window.MinSize.X, startSize.X.Offset + delta.X),
                startSize.Y.Scale,
                math.max(window.MinSize.Y, startSize.Y.Offset + delta.Y)
            )
            
            CryzenHub.Utils.Tween(mainContainer, {Size = newSize}, 0.05, Enum.EasingStyle.Linear)
        end
    end)
    
    -- Content area with ultra design
    local contentArea = Instance.new("Frame")
    contentArea.Name = "UltraContentArea"
    contentArea.Size = UDim2.new(1, -40, 1, -150)
    contentArea.Position = UDim2.new(0, 20, 0, 110)
    contentArea.BackgroundTransparency = 1
    contentArea.ZIndex = 2
    contentArea.Parent = mainContainer
    window.ContentArea = contentArea
    
    -- Ultra Navigation (Left Side)
    local navigation = Instance.new("Frame")
    navigation.Name = "UltraNavigation"
    navigation.Size = UDim2.new(0, 80, 1, 0)
    navigation.BackgroundColor3 = theme.Secondary
    navigation.BackgroundTransparency = 0.3
    navigation.ZIndex = 3
    navigation.Parent = contentArea
    window.Navigation = navigation
    
    CryzenHub.Utils.CreateCorner(navigation, theme.Radius.Medium)
    CryzenHub.Utils.CreateGlow(navigation, theme.GlowSecondary, 0.3, 12)
    CryzenHub.Utils.CreateStroke(navigation, theme.GlowSecondary, 1, 0.7)
    
    -- Navigation separator
    local navSeparator = Instance.new("Frame")
    navSeparator.Name = "Separator"
    navSeparator.Size = UDim2.new(0, 2, 1, -20)
    navSeparator.Position = UDim2.new(1, -1, 0, 10)
    navSeparator.BackgroundColor3 = theme.Accent
    navSeparator.BorderSizePixel = 0
    navSeparator.ZIndex = 4
    navSeparator.Parent = navigation
    
    CryzenHub.Utils.CreateGlow(navSeparator, theme.Accent, 0.8, 6)
    
    -- Tab buttons container
    local tabButtonsContainer = Instance.new("ScrollingFrame")
    tabButtonsContainer.Name = "TabButtons"
    tabButtonsContainer.Size = UDim2.new(1, 0, 1, -20)
    tabButtonsContainer.Position = UDim2.new(0, 0, 0, 10)
    tabButtonsContainer.BackgroundTransparency = 1
    tabButtonsContainer.ScrollBarThickness = 0
    tabButtonsContainer.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tabButtonsContainer.ZIndex = 4
    tabButtonsContainer.Parent = navigation
    
    local tabButtonsLayout = Instance.new("UIListLayout")
    tabButtonsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabButtonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabButtonsLayout.Padding = UDim.new(0, theme.Padding.Medium)
    tabButtonsLayout.Parent = tabButtonsContainer
    
    local tabButtonsPadding = Instance.new("UIPadding")
    tabButtonsPadding.PaddingTop = UDim.new(0, theme.Padding.Medium)
    tabButtonsPadding.PaddingBottom = UDim.new(0, theme.Padding.Medium)
    tabButtonsPadding.Parent = tabButtonsContainer
    
    -- Tab content area
    local tabContentArea = Instance.new("Frame")
    tabContentArea.Name = "UltraTabContent"
    tabContentArea.Size = UDim2.new(1, -90, 1, 0)
    tabContentArea.Position = UDim2.new(0, 90, 0, 0)
    tabContentArea.BackgroundTransparency = 1
    tabContentArea.ZIndex = 3
    tabContentArea.Parent = contentArea
    window.TabContentArea = tabContentArea
    
    -- Tab creation function
    function window:Tab(name, icon)
        local tab = {
            Name = name,
            Icon = icon or "rbxassetid://7059346373",
            Sections = {},
            Elements = {},
            Visible = false
        }
        
        -- Ultra Tab Button
        local tabButton = Instance.new("TextButton")
        tabButton.Name = name .. "Button"
        tabButton.Size = UDim2.new(0, 60, 0, 60)
        tabButton.BackgroundColor3 = theme.Tertiary
        tabButton.BackgroundTransparency = 0.4
        tabButton.Text = ""
        tabButton.ZIndex = 5
        tabButton.Parent = tabButtonsContainer
        tab.Button = tabButton
        
        CryzenHub.Utils.CreateCorner(tabButton, theme.Radius.Medium)
        
        -- Ultra Active Indicator
        local activeIndicator = Instance.new("Frame")
        activeIndicator.Name = "ActiveIndicator"
        activeIndicator.Size = UDim2.new(0, 4, 0.8, 0)
        activeIndicator.Position = UDim2.new(0, -2, 0.1, 0)
        activeIndicator.BackgroundColor3 = theme.Accent
        activeIndicator.BackgroundTransparency = 1
        activeIndicator.BorderSizePixel = 0
        activeIndicator.ZIndex = 6
        activeIndicator.Parent = tabButton
        
        CryzenHub.Utils.CreateCorner(activeIndicator, UDim.new(0, 2))
        CryzenHub.Utils.CreateGlow(activeIndicator, theme.Accent, 1.0, 8)
        tab.ActiveIndicator = activeIndicator
        
        -- Ultra Tab Icon
        local tabIcon = Instance.new("ImageLabel")
        tabIcon.Name = "Icon"
        tabIcon.Size = UDim2.new(0, 30, 0, 30)
        tabIcon.Position = UDim2.fromScale(0.5, 0.4)
        tabIcon.AnchorPoint = Vector2.new(0.5, 0.5)
        tabIcon.BackgroundTransparency = 1
        tabIcon.Image = tab.Icon
        tabIcon.ImageColor3 = theme.TextSecondary
        tabIcon.ZIndex = 6
        tabIcon.Parent = tabButton
        tab.IconImage = tabIcon
        
        -- Tab Name Label
        local tabNameLabel = Instance.new("TextLabel")
        tabNameLabel.Name = "NameLabel"
        tabNameLabel.Size = UDim2.new(1, -4, 0, 20)
        tabNameLabel.Position = UDim2.new(0, 2, 0.7, 0)
        tabNameLabel.BackgroundTransparency = 1
        tabNameLabel.Text = name
        tabNameLabel.Font = theme.Font
        tabNameLabel.TextSize = theme.FontSize.Small
        tabNameLabel.TextColor3 = theme.TextTertiary
        tabNameLabel.TextScaled = true
        tabNameLabel.ZIndex = 6
        tabNameLabel.Parent = tabButton
        tab.NameLabel = tabNameLabel
        
        -- Ultra hover effects
        tabButton.MouseEnter:Connect(function()
            if window.ActiveTab ~= tab then
                CryzenHub.Utils.PlaySound("Hover")
                CryzenHub.Utils.Tween(tabButton, {
                    BackgroundTransparency = 0.1,
                    Size = UDim2.new(0, 64, 0, 64)
                }, 0.2)
                CryzenHub.Utils.Tween(tabIcon, {ImageColor3 = theme.TextSecondary}, 0.2)
            end
        end)
        
        tabButton.MouseLeave:Connect(function()
            if window.ActiveTab ~= tab then
                CryzenHub.Utils.Tween(tabButton, {
                    BackgroundTransparency = 0.4,
                    Size = UDim2.new(0, 60, 0, 60)
                }, 0.2)
                CryzenHub.Utils.Tween(tabIcon, {ImageColor3 = theme.TextSecondary}, 0.2)
            end
        end)
        
        tabButton.MouseButton1Down:Connect(function()
            CryzenHub.Utils.CreateRipple(tabButton, UserInputService:GetMouseLocation(), theme.Accent)
        end)
        
        -- Tab Content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = name .. "Content"
        tabContent.Size = UDim2.fromScale(1, 1)
        tabContent.BackgroundTransparency = 1
        tabContent.ScrollBarThickness = 6
        tabContent.ScrollBarImageColor3 = theme.Accent
        tabContent.ScrollBarImageTransparency = 0.3
        tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        tabContent.Visible = false
        tabContent.ZIndex = 4
        tabContent.Parent = tabContentArea
        tab.Content = tabContent
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, theme.Padding.Large)
        contentLayout.Parent = tabContent
        
        local contentPadding = Instance.new("UIPadding")
        contentPadding.PaddingAll = UDim.new(0, theme.Padding.Large)
        contentPadding.Parent = tabContent
        
        -- Tab selection
        tabButton.MouseButton1Click:Connect(function()
            window:SelectTab(tab)
        end)
        
        -- Ultra Section Creator
        function tab:Section(title)
            local section = {
                Title = title,
                Elements = {},
                Collapsed = false
            }
            
            -- Ultra Section Container
            local sectionContainer = Instance.new("Frame")
            sectionContainer.Name = title .. "Section"
            sectionContainer.BackgroundColor3 = theme.Secondary
            sectionContainer.BackgroundTransparency = 0.2
            sectionContainer.Size = UDim2.new(1, 0, 0, 50)
            sectionContainer.AutomaticSize = Enum.AutomaticSize.Y
            sectionContainer.ZIndex = 5
            sectionContainer.Parent = tabContent
            section.Container = sectionContainer
            
            CryzenHub.Utils.CreateCorner(sectionContainer, theme.Radius.Large)
            CryzenHub.Utils.CreateGlow(sectionContainer, theme.GlowSecondary, 0.2, 15)
            CryzenHub.Utils.CreateStroke(sectionContainer, theme.Accent, 1, 0.8)
            
            -- Section Header
            local sectionHeader = Instance.new("Frame")
            sectionHeader.Name = "Header"
            sectionHeader.Size = UDim2.new(1, 0, 0, 45)
            sectionHeader.BackgroundColor3 = theme.Tertiary
            sectionHeader.BackgroundTransparency = 0.3
            sectionHeader.ZIndex = 6
            sectionHeader.Parent = sectionContainer
            
            CryzenHub.Utils.CreateCorner(sectionHeader, theme.Radius.Large)
            CryzenHub.Utils.CreateGradient(sectionHeader, theme.AccentGradient, 90)
            
            -- Section Icon
            local sectionIcon = Instance.new("ImageLabel")
            sectionIcon.Name = "Icon"
            sectionIcon.Size = UDim2.new(0, 24, 0, 24)
            sectionIcon.Position = UDim2.new(0, 15, 0.5, -12)
            sectionIcon.BackgroundTransparency = 1
            sectionIcon.Image = "rbxassetid://7072717958"
            sectionIcon.ImageColor3 = theme.Accent
            sectionIcon.ZIndex = 7
            sectionIcon.Parent = sectionHeader
            
            CryzenHub.Utils.CreateGlow(sectionIcon, theme.Accent, 0.6, 8)
            
            -- Section Title
            local sectionTitle = Instance.new("TextLabel")
            sectionTitle.Name = "Title"
            sectionTitle.Size = UDim2.new(1, -100, 1, 0)
            sectionTitle.Position = UDim2.new(0, 50, 0, 0)
            sectionTitle.BackgroundTransparency = 1
            sectionTitle.Text = title
            sectionTitle.Font = theme.Font
            sectionTitle.TextSize = theme.FontSize.Title
            sectionTitle.TextColor3 = theme.Text
            sectionTitle.TextStrokeTransparency = 0.9
            sectionTitle.TextStrokeColor3 = theme.Accent
            sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            sectionTitle.ZIndex = 7
            sectionTitle.Parent = sectionHeader
            
            -- Collapse Button
            local collapseButton = Instance.new("TextButton")
            collapseButton.Name = "CollapseButton"
            collapseButton.Size = UDim2.new(0, 30, 0, 30)
            collapseButton.Position = UDim2.new(1, -40, 0.5, -15)
            collapseButton.BackgroundColor3 = theme.Quaternary
            collapseButton.BackgroundTransparency = 0.3
            collapseButton.Text = "⌄"
            collapseButton.Font = theme.Font
            collapseButton.TextSize = theme.FontSize.Body
            collapseButton.TextColor3 = theme.Text
            collapseButton.ZIndex = 7
            collapseButton.Parent = sectionHeader
            
            CryzenHub.Utils.CreateCorner(collapseButton, theme.Radius.Round)
            CryzenHub.Utils.CreateGlow(collapseButton, theme.Info, 0.4, 6)
            
            -- Section Content
            local sectionContent = Instance.new("Frame")
            sectionContent.Name = "Content"
            sectionContent.Size = UDim2.new(1, 0, 0, 0)
            sectionContent.Position = UDim2.new(0, 0, 0, 45)
            sectionContent.BackgroundTransparency = 1
            sectionContent.AutomaticSize = Enum.AutomaticSize.Y
            sectionContent.ZIndex = 6
            sectionContent.Parent = sectionContainer
            section.Content = sectionContent
            
            local contentLayout = Instance.new("UIListLayout")
            contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
            contentLayout.Padding = UDim.new(0, theme.Padding.Medium)
            contentLayout.Parent = sectionContent
            
            local contentPadding = Instance.new("UIPadding")
            contentPadding.PaddingAll = UDim.new(0, theme.Padding.Large)
            contentPadding.Parent = sectionContent
            
            -- Collapse functionality
            collapseButton.MouseButton1Click:Connect(function()
                section.Collapsed = not section.Collapsed
                CryzenHub.Utils.PlaySound("Click")
                
                if section.Collapsed then
                    CryzenHub.Utils.Tween(collapseButton, {Rotation = -90}, 0.3)
                    sectionContent.Visible = false
                else
                    CryzenHub.Utils.Tween(collapseButton, {Rotation = 0}, 0.3)
                    sectionContent.Visible = true
                end
            end)
            
            -- Ultra Element Creation Functions
            function section:Label(text, options)
                options = options or {}
                local element = {
                    Type = "Label",
                    Text = text,
                    Instance = nil
                }
                
                local labelFrame = Instance.new("Frame")
                labelFrame.Name = "UltraLabel"
                labelFrame.Size = UDim2.new(1, 0, 0, options.Height or 30)
                labelFrame.BackgroundTransparency = 1
                labelFrame.ZIndex = 7
                labelFrame.Parent = sectionContent
                element.Instance = labelFrame
                
                local labelText = Instance.new("TextLabel")
                labelText.Name = "Text"
                labelText.Size = UDim2.fromScale(1, 1)
                labelText.BackgroundTransparency = 1
                labelText.Text = text
                labelText.Font = options.Font or theme.Font
                labelText.TextSize = options.TextSize or theme.FontSize.Body
                labelText.TextColor3 = options.Color or theme.Text
                labelText.TextWrapped = true
                labelText.RichText = true
                labelText.TextXAlignment = options.TextXAlignment or Enum.TextXAlignment.Left
                labelText.ZIndex = 8
                labelText.Parent = labelFrame
                element.TextLabel = labelText
                
                if options.Glow then
                    CryzenHub.Utils.CreateGlow(labelText, options.Color or theme.Text, 0.3, 8)
                end
                
                function element:Update(newText)
                    self.Text = newText
                    labelText.Text = newText
                end
                
                -- Add to search index
                CryzenHub.SearchEngine.AddToIndex(element, {text, "label", title})
                
                table.insert(section.Elements, element)
                tab.Elements[options.Flag or "Label_" .. #section.Elements] = element
                return element
            end
            
            function section:Button(text, callback, options)
                options = options or {}
                local element = {
                    Type = "Button",
                    Text = text,
                    Callback = callback,
                    Enabled = true
                }
                
                local buttonFrame = Instance.new("Frame")
                buttonFrame.Name = "UltraButtonFrame"
                buttonFrame.Size = UDim2.new(1, 0, 0, 40)
                buttonFrame.BackgroundTransparency = 1
                buttonFrame.ZIndex = 7
                buttonFrame.Parent = sectionContent
                element.Instance = buttonFrame
                
                local button = Instance.new("TextButton")
                button.Name = "UltraButton"
                button.Size = UDim2.fromScale(1, 1)
                button.BackgroundColor3 = theme.Tertiary
                button.BackgroundTransparency = 0.1
                button.Text = text
                button.Font = theme.Font
                button.TextSize = theme.FontSize.Body
                button.TextColor3 = theme.Text
                button.TextStrokeTransparency = 0.9
                button.TextStrokeColor3 = theme.Accent
                button.ClipsDescendants = true
                button.ZIndex = 8
                button.Parent = buttonFrame
                element.Button = button
                
                CryzenHub.Utils.CreateCorner(button, theme.Radius.Medium)
                CryzenHub.Utils.CreateGradient(button, theme.AccentGradient, 135)
                CryzenHub.Utils.CreateGlow(button, theme.Accent, 0.3, 12)
                CryzenHub.Utils.CreateStroke(button, theme.Accent, 1, 0.6)
                
                -- Ultra button effects
                button.MouseEnter:Connect(function()
                    if not element.Enabled then return end
                    CryzenHub.Utils.PlaySound("Hover")
                    CryzenHub.Utils.Tween(button, {
                        BackgroundTransparency = 0,
                        Size = UDim2.new(1, 4, 1, 4)
                    }, 0.2)
                end)
                
                button.MouseLeave:Connect(function()
                    if not element.Enabled then return end
                    CryzenHub.Utils.Tween(button, {
                        BackgroundTransparency = 0.1,
                        Size = UDim2.fromScale(1, 1)
                    }, 0.2)
                end)
                
                button.MouseButton1Down:Connect(function()
                    if not element.Enabled then return end
                    CryzenHub.Utils.CreateRipple(button, UserInputService:GetMouseLocation(), theme.AccentSecondary)
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = theme.Accent}, 0.1)
                end)
                
                button.MouseButton1Up:Connect(function()
                    if not element.Enabled then return end
                    CryzenHub.Utils.Tween(button, {BackgroundColor3 = theme.Tertiary}, 0.1)
                end)
                
                button.MouseButton1Click:Connect(function()
                    if not element.Enabled then return end
                    CryzenHub.Utils.PlaySound("Click")
                    
                    if callback then
                        task.spawn(callback)
                    end
                end)
                
                function element:Update(newText)
                    self.Text = newText
                    button.Text = newText
                end
                
                function element:Enable()
                    self.Enabled = true
                    button.TextColor3 = theme.Text
                    CryzenHub.Utils.Tween(button, {BackgroundTransparency = 0.1}, 0.2)
                end
                
                function element:Disable()
                    self.Enabled = false
                    button.TextColor3 = theme.TextTertiary
                    CryzenHub.Utils.Tween(button, {BackgroundTransparency = 0.5}, 0.2)
                end
                
                -- Add to search index
                CryzenHub.SearchEngine.AddToIndex(element, {text, "button", title})
                
                table.insert(section.Elements, element)
                tab.Elements[options.Flag or "Button_" .. #section.Elements] = element
                return element
            end
            
            function section:Toggle(text, options, callback)
                options = options or {}
                local default = options.Default or false
                local flag = options.Flag or "Toggle_" .. #section.Elements + 1
                
                local element = {
                    Type = "Toggle",
                    Text = text,
                    Value = default,
                    Callback = callback,
                    Flag = flag
                }
                
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Name = "UltraToggleFrame"
                toggleFrame.Size = UDim2.new(1, 0, 0, 40)
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.ZIndex = 7
                toggleFrame.Parent = sectionContent
                element.Instance = toggleFrame
                
                local toggleButton = Instance.new("TextButton")
                toggleButton.Name = "ToggleButton"
                toggleButton.Size = UDim2.fromScale(1, 1)
                toggleButton.BackgroundTransparency = 1
                toggleButton.Text = ""
                toggleButton.ZIndex = 8
                toggleButton.Parent = toggleFrame
                
                local toggleLabel = Instance.new("TextLabel")
                toggleLabel.Name = "Label"
                toggleLabel.Size = UDim2.new(1, -80, 1, 0)
                toggleLabel.BackgroundTransparency = 1
                toggleLabel.Text = text
                toggleLabel.Font = theme.Font
                toggleLabel.TextSize = theme.FontSize.Body
                toggleLabel.TextColor3 = theme.Text
                toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                toggleLabel.ZIndex = 9
                toggleLabel.Parent = toggleFrame
                
                -- Ultra Toggle Switch
                local toggleSwitch = Instance.new("Frame")
                toggleSwitch.Name = "Switch"
                toggleSwitch.Size = UDim2.new(0, 60, 0, 30)
                toggleSwitch.Position = UDim2.new(1, -65, 0.5, -15)
                toggleSwitch.BackgroundColor3 = default and theme.Accent or theme.Quaternary
                toggleSwitch.BackgroundTransparency = 0.1
                toggleSwitch.ZIndex = 9
                toggleSwitch.Parent = toggleFrame
                
                CryzenHub.Utils.CreateCorner(toggleSwitch, theme.Radius.Round)
                CryzenHub.Utils.CreateGlow(toggleSwitch, default and theme.Accent or theme.Quaternary, 0.6, 10)
                CryzenHub.Utils.CreateStroke(toggleSwitch, default and theme.Accent or theme.TextTertiary, 1, 0.5)
                
                -- Toggle Indicator
                local toggleIndicator = Instance.new("Frame")
                toggleIndicator.Name = "Indicator"
                toggleIndicator.Size = UDim2.new(0, 24, 0, 24)
                toggleIndicator.Position = UDim2.new(default and 1 or 0, default and -27 or 3, 0.5, -12)
                toggleIndicator.BackgroundColor3 = theme.Text
                toggleIndicator.ZIndex = 10
                toggleIndicator.Parent = toggleSwitch
                
                CryzenHub.Utils.CreateCorner(toggleIndicator, theme.Radius.Round)
                CryzenHub.Utils.CreateGlow(toggleIndicator, theme.Text, 0.8, 8)
                CryzenHub.Utils.CreateShadow(toggleIndicator, Color3.fromRGB(0, 0, 0), 8, 0.4)
                
                -- Keybind support
                local keybindButton = Instance.new("TextButton")
                keybindButton.Name = "KeybindButton"
                keybindButton.Size = UDim2.new(0, 20, 0, 20)
                keybindButton.Position = UDim2.new(1, -25, 0, 0)
                keybindButton.BackgroundColor3 = theme.Info
                keybindButton.BackgroundTransparency = 0.7
                keybindButton.Text = "K"
                keybindButton.Font = theme.Font
                keybindButton.TextSize = theme.FontSize.Small
                keybindButton.TextColor3 = theme.Text
                keybindButton.Visible = false
                keybindButton.ZIndex = 10
                keybindButton.Parent = toggleFrame
                
                CryzenHub.Utils.CreateCorner(keybindButton, theme.Radius.Round)
                
                local keybind = nil
                local waitingForKeybind = false
                
                -- Right-click to set keybind
                toggleButton.MouseButton2Click:Connect(function()
                    keybindButton.Visible = true
                    waitingForKeybind = true
                    keybindButton.Text = "..."
                    
                    local connection
                    connection = UserInputService.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            keybind = input.KeyCode
                            keybindButton.Text = input.KeyCode.Name:sub(1, 1)
                            waitingForKeybind = false
                            connection:Disconnect()
                        end
                    end)
                end)
                
                -- Listen for keybind
                UserInputService.InputBegan:Connect(function(input, processed)
                    if not processed and keybind and input.KeyCode == keybind and not waitingForKeybind then
                        element:SetValue(not element.Value)
                    end
                end)
                
                -- Update function
                local function updateToggle(value)
                    element.Value = value
                    window.Flags[flag] = value
                    
                    CryzenHub.Utils.Tween(toggleSwitch, {
                        BackgroundColor3 = value and theme.Accent or theme.Quaternary
                    }, 0.3)
                    
                    CryzenHub.Utils.Tween(toggleIndicator, {
                        Position = UDim2.new(value and 1 or 0, value and -27 or 3, 0.5, -12)
                    }, 0.3, Enum.EasingStyle.Quart)
                    
                    if callback then
                        task.spawn(callback, value)
                    end
                end
                
                -- Initialize
                window.Flags[flag] = default
                
                toggleButton.MouseButton1Click:Connect(function()
                    CryzenHub.Utils.PlaySound("Toggle")
                    updateToggle(not element.Value)
                end)
                
                function element:SetValue(value)
                    updateToggle(value)
                end
                
                function element:GetValue()
                    return self.Value
                end
                
                -- Add to search index
                CryzenHub.SearchEngine.AddToIndex(element, {text, "toggle", title})
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:Slider(text, options, callback)
                options = options or {}
                local min = options.Min or 0
                local max = options.Max or 100
                local default = options.Default or min
                local decimals = options.Decimals or 0
                local suffix = options.Suffix or ""
                local flag = options.Flag or "Slider_" .. #section.Elements + 1
                
                default = math.clamp(default, min, max)
                
                local element = {
                    Type = "Slider",
                    Text = text,
                    Min = min,
                    Max = max,
                    Value = default,
                    Decimals = decimals,
                    Suffix = suffix,
                    Callback = callback,
                    Flag = flag
                }
                
                local sliderFrame = Instance.new("Frame")
                sliderFrame.Name = "UltraSliderFrame"
                sliderFrame.Size = UDim2.new(1, 0, 0, 60)
                sliderFrame.BackgroundTransparency = 1
                sliderFrame.ZIndex = 7
                sliderFrame.Parent = sectionContent
                element.Instance = sliderFrame
                
                local sliderLabel = Instance.new("TextLabel")
                sliderLabel.Name = "Label"
                sliderLabel.Size = UDim2.new(1, 0, 0, 25)
                sliderLabel.BackgroundTransparency = 1
                sliderLabel.Text = text
                sliderLabel.Font = theme.Font
                sliderLabel.TextSize = theme.FontSize.Body
                sliderLabel.TextColor3 = theme.Text
                sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                sliderLabel.ZIndex = 8
                sliderLabel.Parent = sliderFrame
                
                local valueLabel = Instance.new("TextBox")
                valueLabel.Name = "Value"
                valueLabel.Size = UDim2.new(0, 80, 0, 25)
                valueLabel.Position = UDim2.new(1, -80, 0, 0)
                valueLabel.BackgroundColor3 = theme.Tertiary
                valueLabel.BackgroundTransparency = 0.3
                valueLabel.Text = tostring(default) .. suffix
                valueLabel.Font = theme.Font
                valueLabel.TextSize = theme.FontSize.Body
                valueLabel.TextColor3 = theme.Text
                valueLabel.TextXAlignment = Enum.TextXAlignment.Center
                valueLabel.ZIndex = 8
                valueLabel.Parent = sliderFrame
                
                CryzenHub.Utils.CreateCorner(valueLabel, theme.Radius.Small)
                CryzenHub.Utils.CreateStroke(valueLabel, theme.Accent, 1, 0.7)
                
                -- Ultra Slider Track
                local sliderTrack = Instance.new("Frame")
                sliderTrack.Name = "Track"
                sliderTrack.Size = UDim2.new(1, 0, 0, 12)
                sliderTrack.Position = UDim2.new(0, 0, 0, 35)
                sliderTrack.BackgroundColor3 = theme.Quaternary
                sliderTrack.BackgroundTransparency = 0.2
                sliderTrack.ZIndex = 8
                sliderTrack.Parent = sliderFrame
                
                CryzenHub.Utils.CreateCorner(sliderTrack, theme.Radius.Round)
                CryzenHub.Utils.CreateGlow(sliderTrack, theme.Quaternary, 0.3, 8)
                CryzenHub.Utils.CreateStroke(sliderTrack, theme.TextTertiary, 1, 0.8)
                
                -- Slider Fill
                local sliderFill = Instance.new("Frame")
                sliderFill.Name = "Fill"
                sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                sliderFill.BackgroundColor3 = theme.Accent
                sliderFill.BackgroundTransparency = 0.1
                sliderFill.ZIndex = 9
                sliderFill.Parent = sliderTrack
                
                CryzenHub.Utils.CreateCorner(sliderFill, theme.Radius.Round)
                CryzenHub.Utils.CreateGlow(sliderFill, theme.Accent, 0.8, 10)
                CryzenHub.Utils.CreateGradient(sliderFill, theme.AccentGradient, 90)
                
                -- Ultra Slider Knob
                local sliderKnob = Instance.new("Frame")
                sliderKnob.Name = "Knob"
                sliderKnob.Size = UDim2.new(0, 20, 0, 20)
                sliderKnob.Position = UDim2.new((default - min) / (max - min), -10, 0.5, -10)
                sliderKnob.BackgroundColor3 = theme.Text
                sliderKnob.ZIndex = 10
                sliderKnob.Parent = sliderTrack
                
                CryzenHub.Utils.CreateCorner(sliderKnob, theme.Radius.Round)
                CryzenHub.Utils.CreateGlow(sliderKnob, theme.Text, 1.0, 12)
                CryzenHub.Utils.CreateShadow(sliderKnob, Color3.fromRGB(0, 0, 0), 10, 0.5)
                CryzenHub.Utils.CreateStroke(sliderKnob, theme.Accent, 2, 0.3)
                
                local sliderButton = Instance.new("TextButton")
                sliderButton.Name = "SliderButton"
                sliderButton.Size = UDim2.fromScale(1, 1)
                sliderButton.BackgroundTransparency = 1
                sliderButton.Text = ""
                sliderButton.ZIndex = 11
                sliderButton.Parent = sliderTrack
                
                -- Slider functionality
                local isDragging = false
                
                local function formatValue(value)
                    if decimals == 0 then
                        return tostring(math.floor(value)) .. suffix
                    else
                        local fmt = "%." .. decimals .. "f"
                        return string.format(fmt, value) .. suffix
                    end
                end
                
                local function updateSlider(value, fromInput)
                    value = math.clamp(value, min, max)
                    
                    if decimals == 0 then
                        value = math.floor(value)
                    else
                        local mult = 10 ^ decimals
                        value = math.floor(value * mult + 0.5) / mult
                    end
                    
                    element.Value = value
                    window.Flags[flag] = value
                    
                    if not fromInput then
                        valueLabel.Text = formatValue(value)
                    end
                    
                    local percent = (value - min) / (max - min)
                    CryzenHub.Utils.Tween(sliderFill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
                    CryzenHub.Utils.Tween(sliderKnob, {Position = UDim2.new(percent, -10, 0.5, -10)}, 0.1)
                    
                    if callback then
                        task.spawn(callback, value)
                    end
                end
                
                -- Initialize
                window.Flags[flag] = default
                
                -- Direct value input
                valueLabel.FocusLost:Connect(function(enterPressed)
                    local inputValue = tonumber(valueLabel.Text:gsub("[^%d.-]", ""))
                    
                    if inputValue then
                        updateSlider(inputValue, true)
                    else
                        valueLabel.Text = formatValue(element.Value)
                    end
                end)
                
                -- Mouse interaction
                local function onSliderInteraction(input)
                    local trackPosition = sliderTrack.AbsolutePosition
                    local trackSize = sliderTrack.AbsoluteSize
                    local mousePosition = input.Position.X
                    
                    local percent = math.clamp((mousePosition - trackPosition.X) / trackSize.X, 0, 1)
                    local value = min + (max - min) * percent
                    
                    updateSlider(value)
                end
                
                sliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = true
                        CryzenHub.Utils.PlaySound("Slide")
                        onSliderInteraction(input)
                        
                        -- Knob hover effect
                        CryzenHub.Utils.Tween(sliderKnob, {Size = UDim2.new(0, 24, 0, 24)}, 0.2)
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = false
                        CryzenHub.Utils.Tween(sliderKnob, {Size = UDim2.new(0, 20, 0, 20)}, 0.2)
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        onSliderInteraction(input)
                    end
                end)
                
                function element:SetValue(value)
                    updateSlider(value)
                end
                
                function element:GetValue()
                    return self.Value
                end
                
                function element:SetMinMax(newMin, newMax)
                    self.Min = newMin
                    self.Max = newMax
                    min = newMin
                    max = newMax
                    updateSlider(math.clamp(element.Value, min, max))
                end
                
                -- Add to search index
                CryzenHub.SearchEngine.AddToIndex(element, {text, "slider", title})
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            function section:Dropdown(text, options, callback)
                options = options or {}
                local items = options.Items or {}
                local default = options.Default
                local multiSelect = options.MultiSelect or false
                local flag = options.Flag or "Dropdown_" .. #section.Elements + 1
                
                local selected = multiSelect and (default or {}) or default
                
                local element = {
                    Type = "Dropdown",
                    Text = text,
                    Items = items,
                    Value = selected,
                    MultiSelect = multiSelect,
                    Callback = callback,
                    Flag = flag
                }
                
                local dropdownFrame = Instance.new("Frame")
                dropdownFrame.Name = "UltraDropdownFrame"
                dropdownFrame.Size = UDim2.new(1, 0, 0, 70)
                dropdownFrame.BackgroundTransparency = 1
                dropdownFrame.ZIndex = 7
                dropdownFrame.Parent = sectionContent
                element.Instance = dropdownFrame
                
                local dropdownLabel = Instance.new("TextLabel")
                dropdownLabel.Name = "Label"
                dropdownLabel.Size = UDim2.new(1, 0, 0, 25)
                dropdownLabel.BackgroundTransparency = 1
                dropdownLabel.Text = text
                dropdownLabel.Font = theme.Font
                dropdownLabel.TextSize = theme.FontSize.Body
                dropdownLabel.TextColor3 = theme.Text
                dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                dropdownLabel.ZIndex = 8
                dropdownLabel.Parent = dropdownFrame
                
                local dropdownButton = Instance.new("TextButton")
                dropdownButton.Name = "Button"
                dropdownButton.Size = UDim2.new(1, 0, 0, 40)
                dropdownButton.Position = UDim2.new(0, 0, 0, 30)
                dropdownButton.BackgroundColor3 = theme.Tertiary
                dropdownButton.BackgroundTransparency = 0.1
                dropdownButton.Text = ""
                dropdownButton.ZIndex = 8
                dropdownButton.Parent = dropdownFrame
                
                CryzenHub.Utils.CreateCorner(dropdownButton, theme.Radius.Medium)
                CryzenHub.Utils.CreateGlow(dropdownButton, theme.Tertiary, 0.3, 10)
                CryzenHub.Utils.CreateStroke(dropdownButton, theme.Accent, 1, 0.7)
                
                local selectedText = Instance.new("TextLabel")
                selectedText.Name = "SelectedText"
                selectedText.Size = UDim2.new(1, -40, 1, 0)
                selectedText.Position = UDim2.new(0, 15, 0, 0)
                selectedText.BackgroundTransparency = 1
                selectedText.Text = multiSelect 
                    and (#selected > 0 and table.concat(selected, ", ") or "None") 
                    or (selected or "Select...")
                selectedText.Font = theme.Font
                selectedText.TextSize = theme.FontSize.Body
                selectedText.TextColor3 = theme.Text
                selectedText.TextXAlignment = Enum.TextXAlignment.Left
                selectedText.TextTruncate = Enum.TextTruncate.AtEnd
                selectedText.ZIndex = 9
                selectedText.Parent = dropdownButton
                
                local dropdownIcon = Instance.new("ImageLabel")
                dropdownIcon.Name = "Icon"
                dropdownIcon.Size = UDim2.new(0, 20, 0, 20)
                dropdownIcon.Position = UDim2.new(1, -30, 0.5, -10)
                dropdownIcon.BackgroundTransparency = 1
                dropdownIcon.Image = "rbxassetid://7072706318"
                dropdownIcon.ImageColor3 = theme.TextSecondary
                dropdownIcon.Rotation = 0
                dropdownIcon.ZIndex = 9
                dropdownIcon.Parent = dropdownButton
                
                CryzenHub.Utils.CreateGlow(dropdownIcon, theme.TextSecondary, 0.4, 6)
                
                -- Ultra Dropdown Container
                local dropdownContainer = Instance.new("Frame")
                dropdownContainer.Name = "Container"
                dropdownContainer.Size = UDim2.new(1, 0, 0, 0)
                dropdownContainer.Position = UDim2.new(0, 0, 1, 5)
                dropdownContainer.BackgroundColor3 = theme.Secondary
                dropdownContainer.BackgroundTransparency = 0.1
                dropdownContainer.ClipsDescendants = true
                dropdownContainer.Visible = false
                dropdownContainer.ZIndex = 20
                dropdownContainer.Parent = dropdownFrame
                
                CryzenHub.Utils.CreateCorner(dropdownContainer, theme.Radius.Medium)
                CryzenHub.Utils.CreateGlow(dropdownContainer, theme.Secondary, 0.4, 15)
                CryzenHub.Utils.CreateStroke(dropdownContainer, theme.Accent, 1, 0.5)
                CryzenHub.Utils.CreateShadow(dropdownContainer, Color3.fromRGB(0, 0, 0), 20, 0.6)
                
                -- Search bar
                local searchBar = Instance.new("TextBox")
                searchBar.Name = "SearchBar"
                searchBar.Size = UDim2.new(1, -10, 0, 30)
                searchBar.Position = UDim2.new(0, 5, 0, 5)
                searchBar.BackgroundColor3 = theme.Tertiary
                searchBar.BackgroundTransparency = 0.3
                searchBar.PlaceholderText = "Search..."
                searchBar.Text = ""
                searchBar.Font = theme.Font
                searchBar.TextSize = theme.FontSize.Body
                searchBar.TextColor3 = theme.Text
                searchBar.TextXAlignment = Enum.TextXAlignment.Left
                searchBar.ZIndex = 21
                searchBar.Parent = dropdownContainer
                
                CryzenHub.Utils.CreateCorner(searchBar, theme.Radius.Small)
                CryzenHub.Utils.CreateStroke(searchBar, theme.GlowSecondary, 1, 0.7)
                
                -- Items container
                local itemsContainer = Instance.new("ScrollingFrame")
                itemsContainer.Name = "Items"
                itemsContainer.Size = UDim2.new(1, 0, 1, -40)
                itemsContainer.Position = UDim2.new(0, 0, 0, 40)
                itemsContainer.BackgroundTransparency = 1
                itemsContainer.ScrollBarThickness = 4
                itemsContainer.ScrollBarImageColor3 = theme.Accent
                itemsContainer.AutomaticCanvasSize = Enum.AutomaticSize.Y
                itemsContainer.ZIndex = 21
                itemsContainer.Parent = dropdownContainer
                
                local itemsLayout = Instance.new("UIListLayout")
                itemsLayout.SortOrder = Enum.SortOrder.LayoutOrder
                itemsLayout.Padding = UDim.new(0, 2)
                itemsLayout.Parent = itemsContainer
                
                local itemsPadding = Instance.new("UIPadding")
                itemsPadding.PaddingAll = UDim.new(0, 5)
                itemsPadding.Parent = itemsContainer
                
                -- Dropdown functionality
                local isOpen = false
                
                local function updateText()
                    if multiSelect then
                        if #selected > 0 then
                            selectedText.Text = table.concat(selected, ", ")
                        else
                            selectedText.Text = "None"
                        end
                    else
                        selectedText.Text = selected or "Select..."
                    end
                end
                
                local function updateDropdown(newValue)
                    element.Value = newValue
                    window.Flags[flag] = newValue
                    updateText()
                    
                    if callback then
                        task.spawn(callback, newValue)
                    end
                end
                
                -- Initialize
                window.Flags[flag] = selected
                
                -- Toggle dropdown
                dropdownButton.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    CryzenHub.Utils.PlaySound("Click")
                    
                    if isOpen then
                        dropdownContainer.Visible = true
                        CryzenHub.Utils.Tween(dropdownContainer, {
                            Size = UDim2.new(1, 0, 0, math.min(200, #items * 35 + 45))
                        }, 0.3)
                        CryzenHub.Utils.Tween(dropdownIcon, {Rotation = 180}, 0.3)
                    else
                        CryzenHub.Utils.Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                        CryzenHub.Utils.Tween(dropdownIcon, {Rotation = 0}, 0.3)
                        task.delay(0.3, function()
                            dropdownContainer.Visible = false
                        end)
                    end
                end)
                
                -- Search functionality
                searchBar:GetPropertyChangedSignal("Text"):Connect(function()
                    local searchText = string.lower(searchBar.Text)
                    
                    for _, itemButton in pairs(itemsContainer:GetChildren()) do
                        if itemButton:IsA("TextButton") then
                            if searchText == "" then
                                itemButton.Visible = true
                            else
                                local itemText = string.lower(itemButton.Text)
                                itemButton.Visible = string.find(itemText, searchText) ~= nil
                            end
                        end
                    end
                end)
                
                -- Create item buttons
                local function createItems()
                    -- Clear existing items
                    for _, item in pairs(itemsContainer:GetChildren()) do
                        if item:IsA("TextButton") then
                            item:Destroy()
                        end
                    end
                    
                    -- Create new items
                    for i, item in ipairs(items) do
                        local itemButton = Instance.new("TextButton")
                        itemButton.Name = "Item_" .. i
                        itemButton.Size = UDim2.new(1, 0, 0, 30)
                        itemButton.BackgroundColor3 = theme.Tertiary
                        itemButton.BackgroundTransparency = 0.3
                        itemButton.Text = item
                        itemButton.Font = theme.Font
                        itemButton.TextSize = theme.FontSize.Body
                        itemButton.TextColor3 = theme.Text
                        itemButton.TextXAlignment = Enum.TextXAlignment.Left
                        itemButton.ZIndex = 22
                        itemButton.Parent = itemsContainer
                        
                        CryzenHub.Utils.CreateCorner(itemButton, theme.Radius.Small)
                        
                        -- Highlight selected items
                        if multiSelect and table.find(selected, item) then
                            itemButton.BackgroundColor3 = theme.Accent
                            itemButton.BackgroundTransparency = 0.2
                            CryzenHub.Utils.CreateGlow(itemButton, theme.Accent, 0.4, 8)
                        elseif not multiSelect and selected == item then
                            itemButton.BackgroundColor3 = theme.Accent
                            itemButton.BackgroundTransparency = 0.2
                            CryzenHub.Utils.CreateGlow(itemButton, theme.Accent, 0.4, 8)
                        end
                        
                        -- Selection logic
                        itemButton.MouseButton1Click:Connect(function()
                            if multiSelect then
                                local index = table.find(selected, item)
                                if index then
                                    table.remove(selected, index)
                                    itemButton.BackgroundColor3 = theme.Tertiary
                                    itemButton.BackgroundTransparency = 0.3
                                else
                                    table.insert(selected, item)
                                    itemButton.BackgroundColor3 = theme.Accent
                                    itemButton.BackgroundTransparency = 0.2
                                    CryzenHub.Utils.CreateGlow(itemButton, theme.Accent, 0.4, 8)
                                end
                                updateDropdown(selected)
                            else
                                selected = item
                                updateDropdown(selected)
                                
                                -- Close dropdown
                                isOpen = false
                                CryzenHub.Utils.Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                                CryzenHub.Utils.Tween(dropdownIcon, {Rotation = 0}, 0.3)
                                task.delay(0.3, function()
                                    dropdownContainer.Visible = false
                                end)
                            end
                        end)
                        
                        -- Hover effects
                        itemButton.MouseEnter:Connect(function()
                            if (multiSelect and not table.find(selected, item)) or 
                               (not multiSelect and selected ~= item) then
                                CryzenHub.Utils.Tween(itemButton, {BackgroundTransparency = 0.1}, 0.2)
                            end
                        end)
                        
                        itemButton.MouseLeave:Connect(function()
                            if (multiSelect and not table.find(selected, item)) or 
                               (not multiSelect and selected ~= item) then
                                CryzenHub.Utils.Tween(itemButton, {BackgroundTransparency = 0.3}, 0.2)
                            end
                        end)
                    end
                end
                
                createItems()
                
                function element:Update(newItems)
                    self.Items = newItems
                    items = newItems
                    createItems()
                    updateText()
                end
                
                function element:SetValue(newValue)
                    if multiSelect then
                        selected = type(newValue) == "table" and newValue or {newValue}
                    else
                        selected = newValue
                    end
                    updateDropdown(selected)
                    createItems()
                end
                
                function element:AddItem(newItem)
                    table.insert(items, newItem)
                    createItems()
                end
                
                function element:RemoveItem(item)
                    for i, v in ipairs(items) do
                        if v == item then
                            table.remove(items, i)
                            break
                        end
                    end
                    
                    if multiSelect then
                        local index = table.find(selected, item)
                        if index then
                            table.remove(selected, index)
                            updateDropdown(selected)
                        end
                    elseif selected == item then
                        selected = nil
                        updateDropdown(nil)
                    end
                    
                    createItems()
                end
                
                function element:Clear()
                    items = {}
                    if multiSelect then
                        selected = {}
                    else
                        selected = nil
                    end
                    updateDropdown(selected)
                    createItems()
                end
                
                -- Add to search index
                CryzenHub.SearchEngine.AddToIndex(element, {text, "dropdown", title})
                
                table.insert(section.Elements, element)
                tab.Elements[flag] = element
                return element
            end
            
            table.insert(tab.Sections, section)
            return section
        end
        
        table.insert(window.Tabs, tab)
        return tab
    end
    
    -- Select tab function
    function window:SelectTab(tab)
        if window.ActiveTab then
            local currentTab = window.ActiveTab
            
            -- Deselect current tab
            CryzenHub.Utils.Tween(currentTab.Button, {
                BackgroundTransparency = 0.4,
                Size = UDim2.new(0, 60, 0, 60)
            }, 0.3)
            CryzenHub.Utils.Tween(currentTab.IconImage, {ImageColor3 = theme.TextSecondary}, 0.3)
            CryzenHub.Utils.Tween(currentTab.NameLabel, {TextColor3 = theme.TextTertiary}, 0.3)
            CryzenHub.Utils.Tween(currentTab.ActiveIndicator, {BackgroundTransparency = 1}, 0.3)
            currentTab.Content.Visible = false
        end
        
        -- Select new tab
        window.ActiveTab = tab
        CryzenHub.Utils.PlaySound("Click")
        
        CryzenHub.Utils.Tween(tab.Button, {
            BackgroundTransparency = 0.1,
            Size = UDim2.new(0, 64, 0, 64)
        }, 0.3)
        CryzenHub.Utils.Tween(tab.IconImage, {ImageColor3 = theme.Accent}, 0.3)
        CryzenHub.Utils.Tween(tab.NameLabel, {TextColor3 = theme.Text}, 0.3)
        CryzenHub.Utils.Tween(tab.ActiveIndicator, {BackgroundTransparency = 0}, 0.3)
        tab.Content.Visible = true
    end
    
    -- Ultra Notification System
    function window:Notify(options)
        options = options or {}
        local title = options.Title or "Notification"
        local message = options.Message or ""
        local duration = options.Duration or 4
        local type = options.Type or "Info"
        
        -- Create notification container if needed
        if not CryzenHub.ScreenGui:FindFirstChild("UltraNotificationContainer") then
            local container = Instance.new("Frame")
            container.Name = "UltraNotificationContainer"
            container.Size = UDim2.new(0, 350, 1, 0)
            container.Position = UDim2.new(1, -370, 0, 0)
            container.BackgroundTransparency = 1
            container.ZIndex = 1000
            container.Parent = CryzenHub.ScreenGui
            
            local listLayout = Instance.new("UIListLayout")
            listLayout.SortOrder = Enum.SortOrder.LayoutOrder
            listLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
            listLayout.Padding = UDim.new(0, theme.Padding.Medium)
            listLayout.Parent = container
            
            local padding = Instance.new("UIPadding")
            padding.PaddingAll = UDim.new(0, theme.Padding.Large)
            padding.Parent = container
        end
        
        local container = CryzenHub.ScreenGui:FindFirstChild("UltraNotificationContainer")
        
        -- Type configurations
        local typeConfig = {
            Info = {Color = theme.Info, Icon = "rbxassetid://7072717958"},
            Success = {Color = theme.Success, Icon = "rbxassetid://7072706620"},
            Warning = {Color = theme.Warning, Icon = "rbxassetid://7072718266"},
            Error = {Color = theme.Error, Icon = "rbxassetid://7072718631"}
        }
        
        local config = typeConfig[type] or typeConfig.Info
        
        -- Create notification
        local notification = Instance.new("Frame")
        notification.Name = "UltraNotification"
        notification.Size = UDim2.new(1, -20, 0, 0)
        notification.BackgroundColor3 = theme.Secondary
        notification.BackgroundTransparency = 0.1
        notification.ClipsDescendants = true
        notification.ZIndex = 1001
        notification.Parent = container
        
        CryzenHub.Utils.CreateCorner(notification, theme.Radius.Large)
        CryzenHub.Utils.CreateGlow(notification, config.Color, 0.6, 20)
        CryzenHub.Utils.CreateStroke(notification, config.Color, 2, 0.4)
        CryzenHub.Utils.CreateShadow(notification, Color3.fromRGB(0, 0, 0), 25, 0.7)
        
        -- Header with glow
        local header = Instance.new("Frame")
        header.Name = "Header"
        header.Size = UDim2.new(1, 0, 0, 40)
        header.BackgroundColor3 = config.Color
        header.BackgroundTransparency = 0.7
        header.ZIndex = 1002
        header.Parent = notification
        
        CryzenHub.Utils.CreateGradient(header, ColorSequence.new({
            ColorSequenceKeypoint.new(0, CryzenHub.Utils.LightenColor(config.Color, 0.2)),
            ColorSequenceKeypoint.new(1, config.Color)
        }), 90)
        
        -- Icon with ultra effects
        local icon = Instance.new("ImageLabel")
        icon.Name = "Icon"
        icon.Size = UDim2.new(0, 20, 0, 20)
        icon.Position = UDim2.new(0, 15, 0.5, -10)
        icon.BackgroundTransparency = 1
        icon.Image = config.Icon
        icon.ImageColor3 = theme.Text
        icon.ZIndex = 1003
        icon.Parent = header
        
        CryzenHub.Utils.CreateGlow(icon, config.Color, 1.0, 10)
        
        -- Title
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Name = "Title"
        titleLabel.Size = UDim2.new(1, -80, 1, 0)
        titleLabel.Position = UDim2.new(0, 45, 0, 0)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = title
        titleLabel.Font = theme.Font
        titleLabel.TextSize = theme.FontSize.Body
        titleLabel.TextColor3 = theme.Text
        titleLabel.TextStrokeTransparency = 0.9
        titleLabel.TextStrokeColor3 = config.Color
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.ZIndex = 1003
        titleLabel.Parent = header
        
        -- Close button
        local closeButton = Instance.new("TextButton")
        closeButton.Name = "CloseButton"
        closeButton.Size = UDim2.new(0, 25, 0, 25)
        closeButton.Position = UDim2.new(1, -30, 0.5, -12.5)
        closeButton.BackgroundColor3 = theme.Error
        closeButton.BackgroundTransparency = 0.7
        closeButton.Text = "✕"
        closeButton.Font = theme.Font
        closeButton.TextSize = theme.FontSize.Small
        closeButton.TextColor3 = theme.Text
        closeButton.ZIndex = 1003
        closeButton.Parent = header
        
        CryzenHub.Utils.CreateCorner(closeButton, theme.Radius.Round)
        CryzenHub.Utils.CreateGlow(closeButton, theme.Error, 0.6, 6)
        
        -- Message
        local messageLabel = Instance.new("TextLabel")
        messageLabel.Name = "Message"
        messageLabel.Size = UDim2.new(1, -20, 0, 0)
        messageLabel.Position = UDim2.new(0, 10, 0, 45)
        messageLabel.BackgroundTransparency = 1
        messageLabel.Text = message
        messageLabel.Font = theme.Font
        messageLabel.TextSize = theme.FontSize.Body
        messageLabel.TextColor3 = theme.TextSecondary
        messageLabel.TextWrapped = true
        messageLabel.TextXAlignment = Enum.TextXAlignment.Left
        messageLabel.TextYAlignment = Enum.TextYAlignment.Top
        messageLabel.AutomaticSize = Enum.AutomaticSize.Y
        messageLabel.ZIndex = 1003
        messageLabel.Parent = notification
        
        -- Progress bar with ultra effects
        local progressBar = Instance.new("Frame")
        progressBar.Name = "ProgressBar"
        progressBar.Size = UDim2.new(1, 0, 0, 4)
        progressBar.Position = UDim2.new(0, 0, 1, -4)
        progressBar.BackgroundColor3 = config.Color
        progressBar.BorderSizePixel = 0
        progressBar.ZIndex = 1003
        progressBar.Parent = notification
        
        CryzenHub.Utils.CreateGlow(progressBar, config.Color, 1.0, 8)
        
        -- Size notification and animate
        task.spawn(function()
            task.wait()
            local messageHeight = messageLabel.TextBounds.Y
            local totalHeight = messageHeight + 55
            notification.Size = UDim2.new(1, -20, 0, totalHeight)
            
            -- Ultra entrance animation
            notification.Position = UDim2.new(1, 0, 0, 0)
            notification.BackgroundTransparency = 1
            
            CryzenHub.Utils.Tween(notification, {
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundTransparency = 0.1
            }, 0.5, Enum.EasingStyle.Quart)
            
            -- Progress bar animation
            CryzenHub.Utils.Tween(progressBar, {Size = UDim2.new(0, 0, 0, 4)}, duration)
            
            -- Sound effect
            CryzenHub.Utils.PlaySound("Notification")
            
            -- Auto close
            task.delay(duration, function()
                if notification and notification.Parent then
                    CryzenHub.Utils.Tween(notification, {
                        Position = UDim2.new(1, 0, 0, 0),
                        BackgroundTransparency = 1
                    }, 0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In, function()
                        notification:Destroy()
                    end)
                end
            end)
        end)
        
        -- Close button functionality
        closeButton.MouseButton1Click:Connect(function()
            CryzenHub.Utils.PlaySound("Click")
            CryzenHub.Utils.Tween(notification, {
                Position = UDim2.new(1, 0, 0, 0),
                BackgroundTransparency = 1
            }, 0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.In, function()
                notification:Destroy()
            end)
        end)
        
        -- Hover effects
        closeButton.MouseEnter:Connect(function()
            CryzenHub.Utils.Tween(closeButton, {BackgroundTransparency = 0.3}, 0.2)
        end)
        
        closeButton.MouseLeave:Connect(function()
            CryzenHub.Utils.Tween(closeButton, {BackgroundTransparency = 0.7}, 0.2)
        end)
        
        return notification
    end
    
    -- Save/Load Configuration with AI optimization
    function window:SaveConfig(name)
        local config = {
            Flags = {},
            Theme = CryzenHub.CurrentTheme.Name,
            Performance = CryzenHub.Performance,
            AI = {
                AutoOptimize = true,
                GameSpecific = game.PlaceId
            }
        }
        
        for flag, value in pairs(window.Flags) do
            if typeof(value) == "Color3" then
                config.Flags[flag] = {
                    Type = "Color3",
                    Value = {value.R, value.G, value.B}
                }
            elseif typeof(value) == "EnumItem" then
                config.Flags[flag] = {
                    Type = "Enum",
                    Value = tostring(value)
                }
            elseif typeof(value) == "table" then
                config.Flags[flag] = {
                    Type = "Table",
                    Value = value
                }
            else
                config.Flags[flag] = {
                    Type = typeof(value),
                    Value = value
                }
            end
        end
        
        local success = false
        if writefile then
            local json = HttpService:JSONEncode(config)
            writefile("CryzenHub_ULTRA_" .. name .. ".json", json)
            success = true
        end
        
        return success, config
    end
    
    function window:LoadConfig(name)
        local config
        local success = false
        
        if isfile and isfile("CryzenHub_ULTRA_" .. name .. ".json") and readfile then
            local json = readfile("CryzenHub_ULTRA_" .. name .. ".json")
            config = HttpService:JSONDecode(json)
            success = true
        elseif type(name) == "table" then
            config = name
            success = true
        end
        
        if success and config then
            -- Load theme
            if config.Theme and CryzenHub.Themes[config.Theme] then
                CryzenHub.CurrentTheme = CryzenHub.Themes[config.Theme]
                -- Apply theme to window
                -- ... theme application code ...
            end
            
            -- Load flags
            for flag, data in pairs(config.Flags) do
                local element = window:GetElementByFlag(flag)
                if element and element.SetValue then
                    local value
                    
                    if data.Type == "Color3" then
                        value = Color3.new(table.unpack(data.Value))
                    elseif data.Type == "Enum" then
                        local enumType, enumItem = string.match(data.Value, "Enum%.(.+)%.(.+)")
                        if enumType and enumItem and Enum[enumType] then
                            value = Enum[enumType][enumItem]
                        end
                    else
                        value = data.Value
                    end
                    
                    element:SetValue(value)
                end
            end
            
            -- AI optimization
            if config.AI and config.AI.AutoOptimize then
                CryzenHub.AI.OptimizePerformance()
            end
        end
        
        return success
    end
    
    function window:GetElementByFlag(flag)
        for _, tab in pairs(self.Tabs) do
            if tab.Elements[flag] then
                return tab.Elements[flag]
            end
        end
        return nil
    end
    
    -- Initialize window
    CryzenHub.Utils.CreateBlur()
    local blur = CryzenHub.Utils.CreateBlur()
    blur.Enabled = true
    CryzenHub.Utils.Tween(blur, {Size = theme.BlurSize}, 0.5)
    
    -- Ultra entrance animation
    mainContainer.Size = UDim2.new(0, 0, 0, 0)
    mainContainer.BackgroundTransparency = 1
    
    CryzenHub.Utils.Tween(mainContainer, {
        Size = size,
        BackgroundTransparency = 0.1
    }, 0.8, Enum.EasingStyle.Quart)
    
    -- Play entrance sound
    CryzenHub.Utils.PlaySound("Success")
    
    table.insert(CryzenHub.Windows, window)
    return window
end

-- Start performance monitoring
CryzenHub.Performance.StartMonitoring()

-- Initialize AI optimization
task.spawn(function()
    while true do
        task.wait(5) -- Check every 5 seconds
        CryzenHub.AI.OptimizePerformance()
    end
end)

return CryzenHub
